---
title: "Methanol_Manuscript"
author: "Kristin Klier"
date: "2025-08-07"
output: html_document
---

R-Skript for the Manuscript: 
"Integrating population-based metabolomics with computational microbiome modelling identifies methanol as a urinary biomarker for protective diet-microbiome-host interactions"


```{r}
#Install packages 
if (!require(readxl)) install.packages("readxl"); library(readxl)
if (!require(ggplot2)) install.packages("ggplot2"); library(ggplot2)
if (!require(ggforce)) install.packages("ggforce"); library(ggforce)
if (!require(survival)) install.packages("survival"); library(survival)
if (!require(ggbreak)) install.packages("ggbreak"); library(ggbreak)
if (!require(dplyr)) install.packages("dplyr"); library(dplyr)
if (!require(rlang)) install.packages("rlang"); library(rlang)
if (!require(tidyverse)) install.packages("tidyverse"); library(tidyverse)
if (!require(openxlsx)) install.packages("openxlsx"); library(openxlsx)
if (!require(reshape2)) install.packages("reshape2"); library(reshape2)
if (!require(rbenchmark)) install.packages("rbenchmark"); library(rbenchmark)
if (!require(stargazer)) install.packages("stargazer"); library(stargazer)
if (!require(lmtest)) install.packages("lmtest"); library(lmtest)
if (!require(zoo)) install.packages("zoo"); library(zoo)
if (!require(robustbase)) install.packages("robustbase"); library(robustbase)
if (!require(censReg)) install.packages("censReg"); library(censReg)
if (!require(maxLik)) install.packages("maxLik"); library(maxLik)
if (!require(miscTools)) install.packages("miscTools"); library(miscTools)
if (!require(sandwich)) install.packages("sandwich"); library(sandwich)
if (!require(purrr)) install.packages("purrr"); library(purrr)
if (!require(agricolae)) install.packages("agricolae"); library(agricolae)
if (!require(haven)) install.packages("haven"); library(haven)
if (!require(Hmisc)) install.packages("Hmisc"); library(Hmisc)
if (!require(rms)) install.packages("rms"); library(rms)
```

#Set working directory
setwd("B:/Methanol_project/Official data")


#Import datasets
#General Variables
startdata<-read.csv2("SHIP_2022_101_D_S0_20221116.csv", head=TRUE, sep=",")
#ID
ID<-read_excel("B:/Methanol_project/Official data/zz_nr.xlsx")
#Metabolites
List.with.metabolites<-read.csv2("export_analyses_dataset_s0_food2.csv", head=TRUE, sep=",")
for (i in 1579:1696){
  List.with.metabolites[, i]<-as.numeric(List.with.metabolites[, i])
  print(List.with.metabolites)[i]
}

List.with.metabolites2 <- List.with.metabolites[,c(1,2,1579:1696)]
Metabolites <- List.with.metabolites2[c(T,F)]

data <- read_dta('ship_s0_pha.dta')
data2<-data[c(1,5)]


#Datasets mergen
Metabolites_ID<- merge(Metabolites,ID, by=c("proband"))
mydata<- merge(startdata,Metabolites_ID, by=c("zz_nr"))
mydata$ln_PQN<-as.numeric(mydata$ln_PQN)
mydata <- mydata[,c(1:3,7:466,4,5,6)] 
mydata$gfr_mdrd_s0<-as.numeric(mydata$gfr_mdrd_s0)
mydata$som_tail<-as.numeric(mydata$som_tail)
mydata$ggt_s<-as.numeric(mydata$ggt_s)







#A. Table S2: Descriptive table of the study SHIP-START-0 (total participants) before applying exclusion criteria
 
```{r}
mydata_before_ex<-mydata  #Description table before exclusion

#Mortality all
num_male <- sum(mydata_before_ex$mort_all == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_before_ex$mort_all))
percent_male <- num_male / num_non_missing * 100
num_male
percent_male

#Mortality cancer
num_male <- sum(mydata_before_ex$mort_ca == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_before_ex$mort_ca))
percent_male <- num_male / num_non_missing * 100
num_male
percent_male

#Mortality cvd
num_male <- sum(mydata_before_ex$mort_cvd == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_before_ex$mort_cvd))
percent_male <- num_male / num_non_missing * 100
num_male
percent_male


#AGE
mean_age <- mean(mydata_before_ex$AGE_SHIP0)
mean_age
range_age <- range(mydata_before_ex$AGE_SHIP0)
range_age 


#Gender
#mean(is.na(mydata_before_ex$SEX)) * 100
num_female <- sum(mydata_before_ex$SEX == "2", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_before_ex$SEX))
percent_female <- num_female / num_non_missing * 100
num_female
percent_female


#som_tail
mean_som_tail<-mean(mydata_before_ex$som_tail, na.rm = TRUE)
sd_som_tail<- sd(mydata_before_ex$som_tail, na.rm = TRUE)
mean_som_tail
sd_som_tail


boxplot(mydata_before_ex$som_tail, main = "som_tail Boxplot")
outliers <- mydata_before_ex$som_tail > mean_som_tail + 4 * sd_som_tail | mydata_before_ex$som_tail < mean_som_tail - 4 * sd_som_tail

sum(outliers, na.rm = TRUE)



#csmoking_s0

mean(is.na(mydata_before_ex$csmoking_s0)) * 100
num_yes<- sum(mydata_before_ex$csmoking_s0 == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_before_ex$csmoking_s0))
percent_yes <- num_yes / num_non_missing * 100
num_yes
percent_yes



#alcohol
mydata_before_ex$alcg7d_s0<-as.numeric(mydata_before_ex$alcg7d_s0)

mean(mydata_before_ex$alcg7d_s0, na.rm = TRUE)
sd(mydata_before_ex$alcg7d_s0, na.rm = TRUE)
mean(is.na(mydata_before_ex$alcg7d_s0)) * 100

mean_som_tail<-mean(mydata_before_ex$alcg7d_s0, na.rm = TRUE)
sd_som_tail<- sd(mydata_before_ex$alcg7d_s0, na.rm = TRUE)

boxplot(mydata_before_ex$alcg7d_s0, main = "som_tail Boxplot")
outliers <- mydata_before_ex$alcg7d_s0 > mean_som_tail + 4 * sd_som_tail | mydata_before_ex$alcg7d_s0 < mean_som_tail - 4 * sd_som_tail

sum(outliers, na.rm = TRUE)


median(mydata_before_ex$alcg7d_s0, na.rm = TRUE)
q1 <- quantile(mydata_before_ex$alcg7d_s0, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_before_ex$alcg7d_s0, 0.75, na.rm = TRUE)
q3




#hyp_s0
num_0 <- sum(mydata_before_ex$hyp_s0 == "0", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_before_ex$hyp_s0))
percent_0 <- num_0 / num_non_missing * 100
percent_0
num_0 


#chol_hdl_s0
is.numeric(mydata_before_ex$chol_hdl_s0)
mydata_before_ex$chol_hdl_s0<-as.numeric(mydata_before_ex$chol_hdl_s0)
mean(mydata_before_ex$chol_hdl_s0, na.rm = TRUE)
sd(mydata_before_ex$chol_hdl_s0, na.rm = TRUE)


mean_chol_hdl_s0<-mean(log(mydata_before_ex$chol_hdl_s0), na.rm = TRUE)
sd_chol_hdl_s0<- sd(log(mydata_before_ex$chol_hdl_s0), na.rm = TRUE)

boxplot(mydata_before_ex$chol_hdl_s0, main = "som_tail Boxplot")
outliers <- mydata_before_ex$chol_hdl_s0 > mean_chol_hdl_s0 + 4 * sd_chol_hdl_s0 | mydata_before_ex$chol_hdl_s0 < mean_chol_hdl_s0 - 4 * sd_chol_hdl_s0

sum(outliers, na.rm = TRUE)

median(mydata_before_ex$chol_hdl_s0, na.rm = TRUE)
q1 <- quantile(mydata_before_ex$chol_hdl_s0, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_before_ex$chol_hdl_s0, 0.7500, na.rm = TRUE)
q3




#ldl_s
mydata_before_ex$ldl_s<-as.numeric(mydata_before_ex$ldl_s)
mean(mydata_before_ex$ldl_s, na.rm = TRUE)
sd(mydata_before_ex$ldl_s, na.rm = TRUE)

mean_ldl_s<-mean(log(mydata_before_ex$ldl_s), na.rm = TRUE)
sd_ldl_s<- sd(log(mydata_before_ex$ldl_s), na.rm = TRUE)

boxplot(mydata_before_ex$ldl_s, main = "som_tail Boxplot")
outliers <- mydata_before_ex$ldl_s > mean_ldl_s + 4 * sd_ldl_s | mydata_before_ex$ldl_s < mean_ldl_s - 4 * sd_ldl_s

sum(outliers, na.rm = TRUE)

median(mydata_before_ex$ldl_s, na.rm = TRUE)
q1 <- quantile(mydata_before_ex$ldl_s, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_before_ex$ldl_s, 0.75, na.rm = TRUE)
q3



#tg_s

mydata_before_ex$tg_s<-as.numeric(mydata_before_ex$tg_s)
median(mydata_before_ex$tg_s, na.rm = TRUE)
q1 <- quantile(mydata_before_ex$tg_s, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_before_ex$tg_s, 0.75, na.rm = TRUE)
q3

mean_tg_s<-mean(log(mydata_before_ex$tg_s), na.rm = TRUE)
sd_tg_s<- sd(log(mydata_before_ex$tg_s), na.rm = TRUE)

boxplot(mydata_before_ex$tg_s, main = "som_tail Boxplot")
outliers <- mydata_before_ex$tg_s > mean_chol_hdl_s0 + 4 * sd_tg_s | mydata_before_ex$tg_s < mean_tg_s - 4 * sd_tg_s

sum(outliers, na.rm = TRUE)



#hba1c
median(mydata_before_ex$hba1c, na.rm = TRUE)
mydata_before_ex$hba1c<-as.numeric(mydata_before_ex$hba1c)
q1 <- quantile(mydata_before_ex$hba1c, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_before_ex$hba1c, 0.75, na.rm = TRUE)
q3

mean(is.na(mydata_before_ex$hba1c)) * 100

mean_hba1c<-mean(log(mydata_before_ex$hba1c), na.rm = TRUE)
sd_hba1c<- sd(log(mydata_before_ex$hba1c), na.rm = TRUE)

boxplot(mydata_before_ex$hba1c, main = "som_tail Boxplot")
outliers <- mydata_before_ex$hba1c > mean_hba1c + 4 * sd_hba1c | mydata_before_ex$hba1c < mean_hba1c - 4 * sd_hba1c

sum(outliers, na.rm = TRUE)




#eGFR

mean_gfr_mdrd_s0<-mean(log(mydata_before_ex$gfr_mdrd_s0), na.rm = TRUE)
sd_gfr_mdrd_s0<- sd(log(mydata_before_ex$gfr_mdrd_s0), na.rm = TRUE)

boxplot(mydata_before_ex$gfr_mdrd_s0, main = "som_tail Boxplot")
outliers <- mydata_before_ex$gfr_mdrd_s0> mean_gfr_mdrd_s0 + 4 * sd_gfr_mdrd_s0 | mydata_before_ex$gfr_mdrd_s0 < mean_gfr_mdrd_s0 - 4 * sd_gfr_mdrd_s0

sum(outliers, na.rm = TRUE)


median(mydata_before_ex$gfr_mdrd_s0, na.rm = TRUE)
mydata_before_ex$gfr_mdrd_s0<-as.numeric(mydata_before_ex$gfr_mdrd_s0)
q1 <- quantile(mydata_before_ex$gfr_mdrd_s0, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_before_ex$gfr_mdrd_s0, 0.75, na.rm = TRUE)
q3





#diabetes_s2
mydata_before_ex$diabetes_s0
num_yes<- sum(mydata_before_ex$diabetes_s0 == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_before_ex$diabetes_s0))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes


#mydata_before_ex$physact_s0#Inactivity
mean(is.na(mydata_before_ex$physact_s0)) * 100
num_yes<- sum(mydata_before_ex$physact_s0 == "0", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_before_ex$physact_s0))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes


#mydata_before_ex$edyrs_s0
median(mydata_before_ex$edyrs_s0, na.rm = TRUE)
q1 <- quantile(mydata_before_ex$edyrs_s0, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_before_ex$edyrs_s0, 0.75, na.rm = TRUE)
q3



#dschlaf
mean(is.na(mydata_before_ex$dschlaf)) * 100

num_yes<- sum(mydata_before_ex$dschlaf == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_before_ex$dschlaf))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes

num_yes<- sum(mydata_before_ex$dschlaf == "2", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_before_ex$dschlaf))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes


num_yes<- sum(mydata_before_ex$dschlaf == "3", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_before_ex$dschlaf))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes



num_yes<- sum(mydata_before_ex$dschlaf == "9", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_before_ex$dschlaf))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes



#mydata_before_ex$wbc
mydata_before_ex$wbc
mydata_before_ex$wbc<-as.numeric(mydata_before_ex$wbc)
median(mydata_before_ex$wbc, na.rm = TRUE)
mydata_before_ex$wbc<-as.numeric(mydata_before_ex$wbc)
q1 <- quantile(mydata_before_ex$wbc, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_before_ex$wbc, 0.75, na.rm = TRUE)
q3

mean(is.na(mydata_before_ex$wbc)) * 100


mean_wbc<-mean(log(mydata_before_ex$wbc), na.rm = TRUE)
sd_wbc<- sd(log(mydata_before_ex$wbc), na.rm = TRUE)

boxplot(mydata_before_ex$wbc, main = "som_tail Boxplot")
outliers <- mydata_before_ex$wbc > mean_wbc + 4 * sd_wbc | mydata_before_ex$wbc < mean_tg_s - 4 * sd_wbc

sum(outliers, na.rm = TRUE)



#rbc
mydata_before_ex$rbc<-as.numeric(mydata_before_ex$rbc)

median(mydata_before_ex$rbc, na.rm = TRUE)
mydata_before_ex$rbc<-as.numeric(mydata_before_ex$rbc)
q1 <- quantile(mydata_before_ex$rbc, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_before_ex$rbc, 0.75, na.rm = TRUE)
q3





mean_rbc<-mean(log(mydata_before_ex$rbc), na.rm = TRUE)
sd_rbc<- sd(log(mydata_before_ex$rbc), na.rm = TRUE)

boxplot(mydata_before_ex$rbc, main = "som_tail Boxplot")
outliers <- mydata_before_ex$rbc > mean_rbc + 4 * sd_rbc | mydata_before_ex$rbc < mean_rbc - 4 * sd_rbc

sum(outliers, na.rm = TRUE)




#mydata_before_ex$crp_hs
mydata_before_ex$crp_hs<-as.numeric(mydata_before_ex$crp_hs)
mean(log(mydata_before_ex$crp_hs), na.rm = TRUE)
sd(log(mydata_before_ex$crp_hs), na.rm = TRUE)


mean_crp_hs<-mean(log(mydata_before_ex$crp_hs), na.rm = TRUE)
sd_crp_hs<- sd(log(mydata_before_ex$crp_hs), na.rm = TRUE)

boxplot(log(mydata_before_ex$crp_hs), main = "som_tail Boxplot")
outliers <- mydata_before_ex$crp_hs > mean_crp_hs + 4 * sd_crp_hs | mydata_before_ex$crp_hs < mean_crp_hs - 4 * sd_crp_hs

sum(outliers, na.rm = TRUE)

median(mydata_before_ex$crp_hs, na.rm = TRUE)
q1 <- quantile(mydata_before_ex$crp_hs, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_before_ex$crp_hs, 0.75, na.rm = TRUE)
q3


#mydata_before_ex$lastmeal_s0
mydata_before_ex$lastmeal_s0<-as.numeric(mydata_before_ex$lastmeal_s0)
mean_som_tail<-mean(mydata_before_ex$lastmeal_s0, na.rm = TRUE)
sd_som_tail<- sd(mydata_before_ex$lastmeal_s0, na.rm = TRUE)

boxplot(mydata_before_ex$lastmeal_s0, main = "som_tail Boxplot")
outliers <- mydata_before_ex$lastmeal_s0 > mean_som_tail + 4 * sd_som_tail | mydata_before_ex$lastmeal_s0 < mean_som_tail - 4 * sd_som_tail

sum(outliers, na.rm = TRUE)

median(mydata_before_ex$lastmeal_s0, na.rm = TRUE)
q1 <- quantile(mydata_before_ex$lastmeal_s0, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_before_ex$lastmeal_s0, 0.75, na.rm = TRUE)
q3


#log(ggt)
median(mydata_before_ex$ggt, na.rm = TRUE)
q1 <- quantile(mydata_before_ex$ggt, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_before_ex$ggt, 0.75, na.rm = TRUE)
q3


mean_ggt<-mean(log(mydata_before_ex$ggt), na.rm = TRUE)
sd_ggt<- sd(log(mydata_before_ex$ggt), na.rm = TRUE)

boxplot(mydata_before_ex$ggt, main = "som_tail Boxplot")
outliers <- mydata_before_ex$ggt > mean_ggt + 4 * sd_ggt | mydata_before_ex$ggt < mean_ggt - 4 * sd_ggt

#  
sum(outliers, na.rm = TRUE)



#mydata_before_ex$hdl_s
mydata_before_ex$hdl_s<-as.numeric(mydata_before_ex$hdl_s)
mean(mydata_before_ex$hdl_s, na.rm = TRUE)
sd(mydata_before_ex$hdl_s, na.rm = TRUE)


mean_hdl_s<-mean(log(mydata_before_ex$hdl_s), na.rm = TRUE)
sd_hdl_s<- sd(log(mydata_before_ex$hdl_s), na.rm = TRUE)

boxplot(log(mydata_before_ex$hdl_s), main = "som_tail Boxplot")
outliers <- mydata_before_ex$hdl_s > mean_hdl_s + 4 * sd_hdl_s | mydata_before_ex$hdl_s < mean_hdl_s - 4 * sd_hdl_s

sum(outliers, na.rm = TRUE)

median(mydata_before_ex$hdl_s, na.rm = TRUE)
q1 <- quantile(mydata_before_ex$hdl_s, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_before_ex$hdl_s, 0.75, na.rm = TRUE)
q3



#metsyn_s0
num_yes<- sum(mydata_before_ex$metsyn_s0 == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_before_ex$metsyn_s0))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes

#mi
num_yes<- sum(mydata_before_ex$mi == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_before_ex$mi))
percent_yes <- num_yes / num_non_missing * 100
num_yes
percent_yes


#gfr_mdrd_s0
mydata_before_ex$gfr_mdrd_s02 <- ifelse(mydata_before_ex$gfr_mdrd_s0 < 60, 1, 2)

num_yes<- sum(mydata_before_ex$gfr_mdrd_s02 == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_before_ex$gfr_mdrd_s02))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes
```





#B. Data Exclusion
#B.1 Included Participants
```{r}
#B.1. Availability of non-fasting urine NMR metabolome data
mydata_r<-mydata
mydata_r$enew <- rowSums(mydata_r[,c(405:463)], na.rm=TRUE)
mydata_r <- subset(mydata_r,enew>0)

#B.2. Exlusion of probands taking antibiotic medications 
subset_data <- subset(data2, ATC_ALL == "J01CA04"|
                        ATC_ALL == "J01"|
                        ATC_ALL == "J01CE02"|
                        ATC_ALL == "J01CE03"|
                        ATC_ALL == "J01CR02"|
                        ATC_ALL == "J01FA06"|
                        ATC_ALL == "J01AA08"|
                        ATC_ALL == "J01FF01"|
                        ATC_ALL == "J01MA06"|
                        ATC_ALL == "J01XE01")

data3 <- subset_data[!duplicated(subset_data[,"zz_nr"]),]
mydata_rpreg<- merge(mydata_r,data3, by="zz_nr",all.x = TRUE, all.y = FALSE)
mydata_rantib <- mydata_rpreg[is.na(mydata_rpreg$ATC_ALL), ]


#A.3. Exclusion of pregnant participants
adsfas7 <- mydata_rantib[!grepl("1", mydata_rantib$blt_grav), ]
mydata<-subset(adsfas7,select=-c(467,468))
```






# Table S4: Descriptive statistics on urinary metabolites 
```{r}
colnames(mydata)[405:463]


mydataexp<-mydata
selected_columns <- mydataexp[, 405:463]

for (col in colnames(selected_columns)) {
  mydataexp[[paste0(col, "_exp")]] <- exp(selected_columns[[col]])
}

na_count <- colSums(is.na(mydataexp[, 467:525]))

total_count <- 4017

na_percent <- (na_count / total_count) * 100
mean_values <- colMeans(mydataexp[, 467:525], na.rm = TRUE)


mydataexp[, 467:525]

names<-(c("Anhydro-beta-D-glucose",
          "1-Methylnicotinamide",
          "2-Hydroxyisobutyrate",
          "3-Aminoisobutyrate",
          "3-Hydroxyisovalerate",
          "3-Hydroxymandelate",
          "3-Indoxylsulfate",
          "4-Hydroxyphenylacetate",
          "Acetate",
          "Acetone",
          "Alanine",
          "Aspartate",
          "Benzoate",
          "Betaine",
          "Carnitine",
          "Choline",
          "Citrate",
          "Creatine",
          "Dimethylamine",
          "Ethanol",
          "Ethanolamine",
          "Formate",
          "Galactose",
          "Glucose",
          "Glycine",
          "Glycolate",
          "Hippurate",
          "Histidine",
          "Hypoxanthine",
          "Isopropanol",
          "Lactate",
          "Lysine",
          "Maleate",
          "Mannitol",
          "Methanol",
          "Methylamine",
          "N-N-Dimethylglycine",
          "O-Acetylcarnitine",
          "O-Phosphocholine",
          "Propylene-Glycol",
          "Pyroglutamate",
          "Salicylate",
          "Succinate",
          "Sucrose",
          "Tartate",
          "Taurine",
          "Threonine",
          "Trigonelline",
          "Trimethylamine-N-Oxide",
          "Tyrosine",
          "Uracil",
          "Urea",
          "Valine",
          "Xylose",
          "Cis-Aconitate",
          "Trans-Aconitate",
          "pi-Methyl-Histidine",
          "Tau-Methyl-Histidine",
          "Creatinine")) 
column_numbers <- 467:525

mydataexp[, 467:525] <- lapply(mydataexp[, 467:525], as.numeric)
mean_values <- sapply(mydataexp[, column_numbers], mean, na.rm = TRUE) / 6.798554


new_data <- data.frame(
  Column_Name = names(mydataexp[, 467:525]), # Spaltennamen als Zeilen
  Metabolites=names,
  Missing=na_percent, # Anzahl der NA-Werte
  Mean=sapply(mydataexp[, column_numbers], mean, na.rm = TRUE)/6.798554, #mean(mydataexp[, 525])
  #Mean=mean(mydataexp[, 467:525]/mydataexp[,525])
  SD=sapply(mydataexp[, column_numbers], sd, na.rm = TRUE)/6.798554
)


new_data$Missing <- round(new_data$Missing, 2)
new_data$Mean <- round(new_data$Mean, 2)
new_data$SD <- round(new_data$SD, 2)

index <- which(new_data$Metabolites == "Creatinine")
neuer_wert<-6.798554 #mean(mydataexp[, 525])
neuer_wert2<-4.411679 #sd(mydataexp[, 525])
new_data$Mean[index] <- neuer_wert
new_data$SD[index] <- neuer_wert2


new_data$Included <- ifelse(new_data$Missing > 50, "no", "yes")


new_data <- new_data[order(new_data$Missing), ]

new_data$Mean <- paste(new_data$Mean, " (", new_data$SD, ")", sep = "")

new_data <- subset(new_data, select = -SD)

new_data <- subset(new_data, select = -Column_Name)



write.xlsx(new_data, file="2Metabolites_description.xlsx", overwrite=TRUE)
```





# Table S17: Frequency of death causes based on ICD Codes
```{r}
desc_mort<-table(mydata$mort_icd10)
frequency_table <- table(mydata$mort_icd10)

percentage_table <- prop.table(frequency_table) * 100
percentage_table <- prop.table(frequency_table) * 100
write.xlsx(as.data.frame(percentage_table), file = "B:/Methanol_project/Official data/Ausgabedatei10.xlsx")
write.xlsx(as.data.frame(frequency_table), file = "B:/Methanol_project/Official data/Ausgabedatei11.xlsx")

```



#C. Data cleaning
#C.1 Exclusion: metabolites with more then 50% NA
```{r}
mydata2<-mydata[, colSums(is.na(mydata[,])) <= 2015]

mydata600<-mydata[, colSums(is.na(mydata[,])) <= 2009] #4017

#setdiff(names(mydata),names(mydata600))
# "ln_x16a_abso" "ln_x1mn_abso" "ln_x3hm_abso" "ln_acto_abso" "ln_aspa_abso" "ln_benz_abso"
# "ln_gala_abso" "ln_lysi_abso" "ln_male_abso" "ln_mann_abso" "ln_prop_abso" "ln_sali_abso" "ln_sucr_abso" "ln_tart_abso" "ln_urac_abso" "ln_xylo_abso"

mydata$ln_x16a_abso <- NULL
mydata$ln_x1mn_abso <- NULL
mydata$ln_x3hm_abso<- NULL
mydata$ln_acto_abso<- NULL
mydata$ln_aspa_abso<- NULL
mydata$ln_benz_abso<- NULL
mydata$ln_gala_abso<- NULL
mydata$ln_lysi_abso<- NULL
mydata$ln_male_abso<- NULL
mydata$ln_mann_abso<- NULL
mydata$ln_prop_abso<- NULL
mydata$ln_sali_abso<- NULL
mydata$ln_sucr_abso<- NULL
mydata$ln_tart_abso<- NULL
mydata$ln_urac_abso<- NULL
mydata$ln_xylo_abso<- NULL


#43

mydata$gfr_mdrd_s0[mydata$gfr_mdrd_s0==".n"] <- NA
mydata$hyp_s0[mydata$hyp_s0==".n"] <- NA
mydata$hyp_s0[mydata$hyp_s0==".z"] <- NA
mydata$edyrs_s0[mydata$edyrs_s0==".n"] <- NA
mydata$edyrs_s0[mydata$edyrs_s0==".z"] <- NA



mydata$csmoking_s0[mydata$csmoking_s0==".q"] <- NA
mydata$csmoking_s0[mydata$csmoking_s0==".v"] <- NA
mydata$diabetes_s0[mydata$diabetes_s0==".n"] <- NA
mydata$diabetes_s0[mydata$diabetes_s0==".z"] <- NA
mydata$som_tail[mydata$som_tail==".n"] <- NA
mydata$som_tail[mydata$som_tail==".z"] <- NA

```







#C.2 Exclusion of outliers (replaced by NA)
```{r}
#test before
mydataNAconv<-mydata

boxplot(mydata$ln_meth_abso)

for (i in 405:447){
  high <- mean(mydata[,i],na=TRUE) + sd(mydata[,i],na=TRUE) * 4
  low <- mean(mydata[,i],na=TRUE) - sd(mydata[,i],na=TRUE) * 4
  mydata$Outlier <- (mydata[,i] < low | mydata[,i] > high)
  mydata[,i][mydata$Outlier]=NA
} 

#test after outlier exclusion
boxplot(mydata$ln_meth_abso)





#NAconv
na_counts <- data.frame(Spalte = character(0), Anzahl_NA = numeric(0), stringsAsFactors = FALSE)

for (i in 405:447) {
  high <- mean(mydataNAconv[,i], na.rm = TRUE) + sd(mydataNAconv[,i], na.rm = TRUE) * 4
  low <- mean(mydataNAconv[,i], na.rm = TRUE) - sd(mydataNAconv[,i], na.rm = TRUE) * 4
  
  outlier_mask <- (mydataNAconv[,i] < low | mydataNAconv[,i] > high)
  num_outliers <- sum(outlier_mask, na.rm = TRUE)
  
  mydataNAconv[which(outlier_mask), i] <- NA
  
  na_counts <- rbind(na_counts, data.frame(Spalte = colnames(mydataNAconv)[i], Anzahl_NA = num_outliers))
}

print(na_counts)





for (i in 405:447){
  mydata[,i]<- scale(mydata[,i], center = TRUE, scale = TRUE)
}




mean_var <- mean(mydata$ln_meth_abso, na.rm = TRUE)
sd_var <- sd(mydata$ln_meth_abso, na.rm = TRUE)
if (abs(mean_var) < 0.01 && abs(sd_var - 1) < 0.01) {
  print("The variable is standardized")
} else {
  print("The variable is not standardized")
}
 
mydata$wbc
#Food items into numeric categories
#Metabolites

 

#rows where less then 10 persons selecting a category in an food item variable 
# Liste aller food-Variablen
table(mydata$food)


food_vars <- paste0("food_", 2:33)

# Schleife über jede food-Variable
for (food_var in food_vars) {
  # Berechne die Häufigkeiten der Ausprägungen 1-6
  freq <- table(mydata[[food_var]])
  
  # Überprüfe, ob Ausprägungen 1-6 weniger als 10 Personen haben
  if (any(freq[1:6] < 10)) {
    cat("In", food_var, "gibt es Ausprägungen 1-6 mit weniger als 10 Personen.\n")
  }
}

freq <- table(mydata$food)
freq


mydata[, 168:200][mydata[, 168:200] == 9] <- NA
mydata[, 168:200][mydata[, 168:200] == 8] <- NA



which(colnames(mydata)=="tg_s")
mydata$som_tail[mydata$som_tail==""] <- NA


mydata$rbc<-as.numeric(mydata$rbc)
mydata$wbc<-as.numeric(mydata$wbc)
mydata$chol_hdl_s0<-as.numeric(mydata$chol_hdl_s0)
mydata$tg_s<-as.numeric(mydata$tg_s)
mydata$som_tail<-as.numeric(mydata$som_tail)
mydata$gfr_mdrd_s0<-as.numeric(mydata$gfr_mdrd_s0)
mydata$ggt_s<-as.numeric(mydata$ggt_s)


```


# Table S1, S2: Description table after exclusion

```{r}
#mortality YFU
mydata_after_ex<-mydata
mydata_mort_ca <- subset(mydata_after_ex, mort_ca == 1)
median(mydata_mort_ca$mort_time, na.rm = TRUE) #3682/365= 10.1

mydata_mort_cvd <- subset(mydata_after_ex, mort_cvd == 1)
median(mydata_mort_cvd$mort_time, na.rm = TRUE) #3775/365=10.34

mydata_mort_all <- subset(mydata_after_ex, mort_all == 1)
median(mydata_mort_all$mort_time, na.rm = TRUE) #4178/365=11.45

max(mydata_after_ex$mort_time) #7840/365=21.48


#Mortality all
num_female <- sum(mydata_after_ex$mort_all == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_after_ex$mort_all))
percent_female <- num_female / num_non_missing * 100
percent_female
num_female

#Mortality cancer
num_female <- sum(mydata_after_ex$mort_ca == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_after_ex$mort_ca))
percent_female <- num_female / num_non_missing * 100
num_female
percent_female

#Mortality cvd
num_female <- sum(mydata_after_ex$mort_cvd == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_after_ex$mort_cvd))
percent_female <- num_female / num_non_missing * 100
percent_female
num_female



#AGE
mean_age <- mean(mydata_after_ex$AGE_SHIP0)
mean_age
range_age <- range(mydata_after_ex$AGE_SHIP0)
range_age 


#Gender
#mean(is.na(mydata_after_ex$SEX)) * 100
num_female <- sum(mydata_after_ex$SEX == "2", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_after_ex$SEX))
percent_female <- num_female / num_non_missing * 100
percent_female
num_female

#som_tail
mean_som_tail<-mean(mydata_after_ex$som_tail, na.rm = TRUE)
sd_som_tail<- sd(mydata_after_ex$som_tail, na.rm = TRUE)
mean_som_tail
sd_som_tail

boxplot(mydata_after_ex$som_tail, main = "som_tail Boxplot")
outliers <- mydata_after_ex$som_tail > mean_som_tail + 4 * sd_som_tail | mydata_after_ex$som_tail < mean_som_tail - 4 * sd_som_tail
sum(outliers, na.rm = TRUE)



#csmoking_s0

mean(is.na(mydata_after_ex$csmoking_s0)) * 100
num_yes<- sum(mydata_after_ex$csmoking_s0 == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_after_ex$csmoking_s0))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes

#alcohol
mydata_after_ex$alcg7d_s0<-as.numeric(mydata_after_ex$alcg7d_s0)


mean(mydata_after_ex$alcg7d_s0, na.rm = TRUE)
sd(mydata_after_ex$alcg7d_s0, na.rm = TRUE)
mean(is.na(mydata_after_ex$alcg7d_s0)) * 100

mean_som_tail<-mean(mydata_after_ex$alcg7d_s0, na.rm = TRUE)
sd_som_tail<- sd(mydata_after_ex$alcg7d_s0, na.rm = TRUE)

boxplot(mydata_after_ex$alcg7d_s0, main = "som_tail Boxplot")
outliers <- mydata_after_ex$alcg7d_s0 > mean_som_tail + 4 * sd_som_tail | mydata_after_ex$alcg7d_s0 < mean_som_tail - 4 * sd_som_tail

#  
sum(outliers, na.rm = TRUE)


median(mydata_after_ex$alcg7d_s0, na.rm = TRUE)
q1 <- quantile(mydata_after_ex$alcg7d_s0, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_after_ex$alcg7d_s0, 0.75, na.rm = TRUE)
q3


#hyp_s0
num_0 <- sum(mydata_after_ex$hyp_s0 == "0", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_after_ex$hyp_s0))
percent_0 <- num_0 / num_non_missing * 100
percent_0
num_0


#chol_hdl_s0
is.numeric(mydata_after_ex$chol_hdl_s0)
mydata_after_ex$chol_hdl_s0<-as.numeric(mydata_after_ex$chol_hdl_s0)
mean(mydata_after_ex$chol_hdl_s0, na.rm = TRUE)
sd(mydata_after_ex$chol_hdl_s0, na.rm = TRUE)


mean_chol_hdl_s0<-mean(log(mydata_after_ex$chol_hdl_s0), na.rm = TRUE)
sd_chol_hdl_s0<- sd(log(mydata_after_ex$chol_hdl_s0), na.rm = TRUE)

boxplot(mydata_after_ex$chol_hdl_s0, main = "som_tail Boxplot")
outliers <- mydata_after_ex$chol_hdl_s0 > mean_chol_hdl_s0 + 4 * sd_chol_hdl_s0 | mydata_after_ex$chol_hdl_s0 < mean_chol_hdl_s0 - 4 * sd_chol_hdl_s0

#  
sum(outliers, na.rm = TRUE)

median(mydata_after_ex$chol_hdl_s0, na.rm = TRUE)
q1 <- quantile(mydata_after_ex$chol_hdl_s0, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_after_ex$chol_hdl_s0, 0.75, na.rm = TRUE)
q3




#ldl_s
mydata_after_ex$ldl_s<-as.numeric(mydata_after_ex$ldl_s)
mean(mydata_after_ex$ldl_s, na.rm = TRUE)
sd(mydata_after_ex$ldl_s, na.rm = TRUE)

mean_ldl_s<-mean(log(mydata_after_ex$ldl_s), na.rm = TRUE)
sd_ldl_s<- sd(log(mydata_after_ex$ldl_s), na.rm = TRUE)

boxplot(mydata_after_ex$ldl_s, main = "som_tail Boxplot")
outliers <- mydata_after_ex$ldl_s > mean_ldl_s + 4 * sd_ldl_s | mydata_after_ex$ldl_s < mean_ldl_s - 4 * sd_ldl_s

#  
sum(outliers, na.rm = TRUE)

median(mydata_after_ex$ldl_s, na.rm = TRUE)
q1 <- quantile(mydata_after_ex$ldl_s, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_after_ex$ldl_s, 0.75, na.rm = TRUE)
q3



#mydata_after_ex$tg_s

mydata_after_ex$tg_s<-as.numeric(mydata_after_ex$tg_s)
median(mydata_after_ex$tg_s, na.rm = TRUE)
q1 <- quantile(mydata_after_ex$tg_s, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_after_ex$tg_s, 0.75, na.rm = TRUE)
q3

mean_tg_s<-mean(log(mydata_after_ex$tg_s), na.rm = TRUE)
sd_tg_s<- sd(log(mydata_after_ex$tg_s), na.rm = TRUE)

boxplot(mydata_after_ex$tg_s, main = "som_tail Boxplot")
outliers <- mydata_after_ex$tg_s > mean_chol_hdl_s0 + 4 * sd_tg_s | mydata_after_ex$tg_s < mean_tg_s - 4 * sd_tg_s

#  
sum(outliers, na.rm = TRUE)



#hba1c
median(mydata_after_ex$hba1c, na.rm = TRUE)
mydata_after_ex$hba1c<-as.numeric(mydata_after_ex$hba1c)
q1 <- quantile(mydata_after_ex$hba1c, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_after_ex$hba1c, 0.75, na.rm = TRUE)
q3

mean(is.na(mydata_after_ex$hba1c)) * 100

mean_hba1c<-mean(log(mydata_after_ex$hba1c), na.rm = TRUE)
sd_hba1c<- sd(log(mydata_after_ex$hba1c), na.rm = TRUE)

boxplot(mydata_after_ex$hba1c, main = "som_tail Boxplot")
outliers <- mydata_after_ex$hba1c > mean_hba1c + 4 * sd_hba1c | mydata_after_ex$hba1c < mean_hba1c - 4 * sd_hba1c

#  
sum(outliers, na.rm = TRUE)


#eGFR

mean_gfr_mdrd_s0<-mean(log(mydata_after_ex$gfr_mdrd_s0), na.rm = TRUE)
sd_gfr_mdrd_s0<- sd(log(mydata_after_ex$gfr_mdrd_s0), na.rm = TRUE)

boxplot(mydata_after_ex$gfr_mdrd_s0, main = "som_tail Boxplot")
outliers <- mydata_after_ex$gfr_mdrd_s0> mean_gfr_mdrd_s0 + 4 * sd_gfr_mdrd_s0 | mydata_after_ex$gfr_mdrd_s0 < mean_gfr_mdrd_s0 - 4 * sd_gfr_mdrd_s0

#  
sum(outliers, na.rm = TRUE)



median(mydata_after_ex$gfr_mdrd_s0, na.rm = TRUE)
mydata_after_ex$gfr_mdrd_s0<-as.numeric(mydata_after_ex$gfr_mdrd_s0)
q1 <- quantile(mydata_after_ex$gfr_mdrd_s0, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_after_ex$gfr_mdrd_s0, 0.75, na.rm = TRUE)
q3





#diabetes_s2
num_yes<- sum(mydata_after_ex$diabetes_s0 == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_after_ex$diabetes_s0))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes



#mydata_after_ex$physact_s0
mean(is.na(mydata_after_ex$physact_s0)) * 100
num_yes<- sum(mydata_after_ex$physact_s0 == "0", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_after_ex$physact_s0))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes

#mydata_after_ex$edyrs_s0
median(mydata_after_ex$edyrs_s0, na.rm = TRUE)
q1 <- quantile(mydata_after_ex$edyrs_s0, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_after_ex$edyrs_s0, 0.75, na.rm = TRUE)
q3



#mydata_after_ex$dschlaf

mean(is.na(mydata_after_ex$dschlaf)) * 100

num_yes<- sum(mydata_after_ex$dschlaf == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_after_ex$dschlaf))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes

num_yes<- sum(mydata_after_ex$dschlaf == "2", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_after_ex$dschlaf))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes


num_yes<- sum(mydata_after_ex$dschlaf == "3", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_after_ex$dschlaf))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes


num_yes<- sum(mydata_after_ex$dschlaf == "9", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_after_ex$dschlaf))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes


#mydata_after_ex$wbc
mydata_after_ex$wbc<-as.numeric(mydata_after_ex$wbc)
median(mydata_after_ex$wbc, na.rm = TRUE)
mydata_after_ex$wbc<-as.numeric(mydata_after_ex$wbc)
q1 <- quantile(mydata_after_ex$wbc, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_after_ex$wbc, 0.75, na.rm = TRUE)
q3

mean(is.na(mydata_after_ex$wbc)) * 100


mean_wbc<-mean(log(mydata_after_ex$wbc), na.rm = TRUE)
sd_wbc<- sd(log(mydata_after_ex$wbc), na.rm = TRUE)

boxplot(mydata_after_ex$wbc, main = "som_tail Boxplot")
outliers <- mydata_after_ex$wbc > mean_wbc + 4 * sd_wbc | mydata_after_ex$wbc < mean_wbc - 4 * sd_wbc

#  
sum(outliers, na.rm = TRUE)



#rbc
mydata_after_ex$rbc<-as.numeric(mydata_after_ex$rbc)

median(mydata_after_ex$rbc, na.rm = TRUE)
mydata_after_ex$wbc<-as.numeric(mydata_after_ex$rbc)
q1 <- quantile(mydata_after_ex$rbc, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_after_ex$rbc, 0.75, na.rm = TRUE)
q3





mean_rbc<-mean(log(mydata_after_ex$rbc), na.rm = TRUE)
sd_rbc<- sd(log(mydata_after_ex$rbc), na.rm = TRUE)

boxplot(mydata_after_ex$rbc, main = "som_tail Boxplot")
outliers <- mydata_after_ex$rbc > mean_rbc + 4 * sd_rbc | mydata_after_ex$rbc < mean_rbc - 4 * sd_rbc

#  
sum(outliers, na.rm = TRUE)




#mydata_after_ex$crp_hs
mydata_after_ex$crp_hs<-as.numeric(mydata_after_ex$crp_hs)
mean(log(mydata_after_ex$crp_hs), na.rm = TRUE)
sd(log(mydata_after_ex$crp_hs), na.rm = TRUE)


mean_crp_hs<-mean(log(mydata_after_ex$crp_hs), na.rm = TRUE)
sd_crp_hs<- sd(log(mydata_after_ex$crp_hs), na.rm = TRUE)

boxplot(log(mydata_after_ex$crp_hs), main = "som_tail Boxplot")
outliers <- mydata_after_ex$crp_hs > mean_crp_hs + 4 * sd_crp_hs | mydata_after_ex$crp_hs < mean_crp_hs - 4 * sd_crp_hs

#  
sum(outliers, na.rm = TRUE)

median(mydata_after_ex$crp_hs, na.rm = TRUE)
q1 <- quantile(mydata_after_ex$crp_hs, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_after_ex$crp_hs, 0.75, na.rm = TRUE)
q3




#mydata_after_ex$lastmeal_s0
mydata_after_ex$lastmeal_s0<-as.numeric(mydata_after_ex$lastmeal_s0)
mean_som_tail<-mean(mydata_after_ex$lastmeal_s0, na.rm = TRUE)
sd_som_tail<- sd(mydata_after_ex$lastmeal_s0, na.rm = TRUE)

boxplot(mydata_after_ex$lastmeal_s0, main = "som_tail Boxplot")
outliers <- mydata_after_ex$lastmeal_s0 > mean_som_tail + 4 * sd_som_tail | mydata_after_ex$lastmeal_s0 < mean_som_tail - 4 * sd_som_tail

#  
sum(outliers, na.rm = TRUE)

median(mydata_after_ex$lastmeal_s0, na.rm = TRUE)
q1 <- quantile(mydata_after_ex$lastmeal_s0, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_after_ex$lastmeal_s0, 0.75, na.rm = TRUE)
q3


#log(ggt)

median(mydata_after_ex$ggt, na.rm = TRUE)
q1 <- quantile(mydata_after_ex$ggt, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_after_ex$ggt, 0.75, na.rm = TRUE)
q3


mean_ggt<-mean(log(mydata_after_ex$ggt), na.rm = TRUE)
sd_ggt<- sd(log(mydata_after_ex$ggt), na.rm = TRUE)

boxplot(mydata_after_ex$ggt, main = "som_tail Boxplot")
outliers <- mydata_after_ex$ggt > mean_ggt + 4 * sd_ggt | mydata_after_ex$ggt < mean_ggt - 4 * sd_ggt

#  
sum(outliers, na.rm = TRUE)





#mydata_after_ex$hdl_s
mydata_after_ex$hdl_s<-as.numeric(mydata_after_ex$hdl_s)
mean(mydata_after_ex$hdl_s, na.rm = TRUE)
sd(mydata_after_ex$hdl_s, na.rm = TRUE)


mean_hdl_s<-mean(log(mydata_after_ex$hdl_s), na.rm = TRUE)
sd_hdl_s<- sd(log(mydata_after_ex$hdl_s), na.rm = TRUE)

boxplot(log(mydata_after_ex$hdl_s), main = "som_tail Boxplot")
outliers <- mydata_after_ex$hdl_s > mean_hdl_s + 4 * sd_hdl_s | mydata_after_ex$hdl_s < mean_hdl_s - 4 * sd_hdl_s

#  
sum(outliers, na.rm = TRUE)

median(mydata_after_ex$hdl_s, na.rm = TRUE)
q1 <- quantile(mydata_after_ex$hdl_s, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_after_ex$hdl_s, 0.75, na.rm = TRUE)
q3


#metsyn_s0
num_yes<- sum(mydata_after_ex$metsyn_s0 == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_after_ex$metsyn_s0))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes

#mi
num_yes<- sum(mydata_after_ex$mi == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_after_ex$mi))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes


#gfr_mdrd_s0
mydata_after_ex$gfr_mdrd_s02 <- ifelse(mydata_after_ex$gfr_mdrd_s0 < 60, 1, 2)

num_yes<- sum(mydata_after_ex$gfr_mdrd_s02 == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_after_ex$gfr_mdrd_s02))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes
```


# Table S3: FFQ Table- SHIP-START-0
```{r}


mydata_after_ex$kaffee


mydata_after_ex[, 168:200][mydata_after_ex[, 168:200] == 9] <- NA
mydata_after_ex[, 168:200][mydata_after_ex[, 168:200] == 8] <- NA


result <- data.frame(food = character(),
                     percent_1 = numeric(),
                     percent_2 = numeric(),
                     percent_3 = numeric(),
                     percent_4 = numeric(),
                     percent_5 = numeric(),
                     percent_6 = numeric(),
                     percent_7 = numeric(),
                     stringsAsFactors = FALSE)

# Define food names
food_names <- c("meat (without sausages)", "sausages, ham", "fried sausage, hamburger, doner kebap, pizza",
                "poultry", "fish", "cooked potatoes", "fried potatoes, croquettes, French fries", "pasta",
                "rice", "salad or vegetable, raw", "cooked vegetable", "fresh fruit", "white bread, toast bread, gems",
                "white grain bread, black bread, crispbread", "brown bread", "flaked oats, muesli, cornflakes",
                "butter", "margarine", "olive oil", "other vegetable oils", "cream, creme fraiche",
                "curd or yoghurt with normal fat content", "low fat dairy products",
                "milk and buttermilk with normal fat content", "cheese", "eggs", "cakes, pastries, biscuits",
                "candies", "salty snacks", "fruit and vegetable juices", "soft drinks", "mineral water",
                "non-alcoholic or alcohol-reduced beer")

# Loop through each food variable and calculate the percentage of responses
for (i in 1:33) {
  
  # Determine the variable name for the current food variable
  if (i == 1) {
    food_var <- "food"
  } else {
    food_var <- paste0("food_", i)
  }
  
  # Calculate the frequencies for the current food variable
  freq <- table(mydata_after_ex[, food_var], useNA = "ifany")
  
  # Calculate the percentage of responses for each category
  percent <- round(prop.table(freq) * 100, 1)
  
  # Add the results to the data frame
  result <- rbind(result, c(food_names[i], percent))
  
}

# Rename the columns in the data frame
names(result) <- c("food items", "every day or almost every day", "several times a week", 
                   "about once a week", "several times a month",
                   "about once a month or fewer", "never or almost never","missing")

result

library(openxlsx)
#getwd()
write.xlsx(result, file = "C:/Users/KlierK/Documents/August/food_freq2.xlsx")



mydata_after_ex$tee[mydata_after_ex$tee %in% c(98, 99)] <- NA
mydata_after_ex$kaffee[mydata_after_ex$kaffee %in% c(98, 99)] <- NA
mydata_after_ex$decaf[mydata_after_ex$decaf %in% c(98, 99)] <- NA

table(mydata_after_ex$tee)
table(mydata_after_ex$kaffee)
table(mydata_after_ex$decaf)

get_freq_percent_table <- function(x) {
  freq <- table(x, useNA = "no")
  percent <- round(prop.table(freq) * 100, 1)
  df <- data.frame(
    value = as.numeric(names(freq)),
    frequency = as.numeric(freq),
    percent = as.numeric(percent)
  )
  return(df)
}

tee_df <- get_freq_percent_table(mydata_after_ex$tee)
kaffee_df <- get_freq_percent_table(mydata_after_ex$kaffee)
decaf_df <- get_freq_percent_table(mydata_after_ex$decaf)

write_xlsx(tee_df, "C:/Users/KlierK/Documents/August/tee_freq_percent.xlsx")
write_xlsx(kaffee_df, "C:/Users/KlierK/Documents/August/kaffee_freq_percent.xlsx")
write_xlsx(decaf_df, "C:/Users/KlierK/Documents/August/decaf_freq_percent.xlsx")

```



#D. Metabolic signatures of dietary intake 
#Identified metabolic signatures of dietary intake 
#D.1 linear regression: metabolites~ all food categories 
```{r}
view(mydata)
#na_count <- sum(is.na(mydata[,429]))

#na_count <- sum(is.na(mydata$food_30))


variable_names <- colnames(mydata)[405:447]

pvalglo<-c()
listmet <- vector(mode = "list", length = 447-404)
listfooditem <- vector(mode = "list", length = 200-167)
myListx5 <- c(listmet, listfooditem)
a <- c(listmet, listfooditem)
myListx6 <- c(listmet, listfooditem)
mydata$alcg7d_s0<-as.numeric(mydata$alcg7d_s0)
mydata$lastmeal_s0<-as.numeric(mydata$lastmeal_s0)
mydata$ph_u<-as.numeric(mydata$ph_u)
myListxSa <- c(listmet, listfooditem)

#library(olsrr)
#library(sandwich)

#168:200
for (i in 405:447){
  for (j in 168:200){
    Regression_Model_food<-lm(mydata[,i]~factor(mydata[,j])
                              +rcs(ln_PQN,4)
                              +rcs(AGE_SHIP0,4)*SEX
                              +rcs(som_tail,4)
                              +rcs(gfr_mdrd_s0,4)
                              +ph_u
                              +physact_s0
                              +log(ggt_s)
                              +hyp_s0
                              +edyrs_s0
                              +csmoking_s0
                              +alcg7d_s0*SEX
                              +factor(dschlaf)
                              +tg_s
                              +wbc
                              +rbc
                              +chol_hdl_s0
                              +lastmeal_s0
                              +diabetes_s0,na.action = na.exclude
                              ,
                              data=mydata)
    mydata[,429]
mydata$ln_meth_abso[,1]
mydata$food_30
    variables <- c(
  "food_30","ln_PQN", "AGE_SHIP0", "SEX", "som_tail", "gfr_mdrd_s0", "ph_u", 
  "physact_s0", "ggt_s", "hyp_s0", "edyrs_s0", "csmoking_s0", "alcg7d_s0", 
  "dschlaf", "tg_s", "wbc", "rbc", "chol_hdl_s0", "lastmeal_s0", "diabetes_s0", "ln_meth_abso"
)
    complete_cases <- complete.cases(mydata[, variables])
#spaltenname <- colnames(mydata)[429]
# Anzahl der vollständigen Fälle (Beobachtungen ohne NAs in den relevanten Variablen)
samplesize_calculated <- sum(complete_cases)

    
    
    summary(Regression_Model_food)
    #nobs(Regression_Model_food)
    print(Regression_Model_food)
  
    
    #print(Regression_Model_food)
    myListx5[[i-404]][[j-167]] <- Regression_Model_food
    
    #Wald-test: prüft, ob eine oder alle unabhängigen Variablen 
    #           einen signifikanten Beitrag zu einem generalisierten 
    #           linearen Regressionsmodell liefern
    vartest <- c("factor(mydata[, j])2","factor(mydata[, j])3","factor(mydata[, j])4","factor(mydata[, j])5","factor(mydata[, j])6")
    waldtest <- car::linearHypothesis(Regression_Model_food, vartest, vcov = vcovHC(Regression_Model_food, type="HC1"))
   
    
    myListx6[[i-404]][[j-167]] <- waldtest
    pvalglo2 <- (myListx6[[i-404]][[j-167]]$"Pr(>F)"[2])
    myListx6[[i-404]][[j-167]]<-pvalglo2
    
samplesize<-length(Regression_Model_food$residuals)
    
myListxSa[[i-404]][[j-167]] <- samplesize
    
  }
}




#summary(print(Regression_Model_food))

myListx6[sapply(myListx6, is.null)] <- NULL

#ln_#42
metabolites.labeled <- c(
  "2-Hydroxyisobutyrate",
  "3-Aminoisobutyrate",
  "3-Hydroxyisovalerate",
  "3-Indoxylsulfate",
  "4-Hydroxyphenylacetate",
  "Acetate",
  "Alanine",
  "Betaine",
  "Carnitine",
  "Choline",
  "Citrate",
  "Creatine",
  "Dimethylamine",
  "Ethanol",
  "Ethanolamine",
  "Formate",
  "Glucose",
  "Glycine",
  "Glycolate",
  "Hippurate",
  "Histidine",
  "Hypoxanthine",
  "Isopropanol",
  "Lactate",
  "Methanol",
  "Methylamine",
  "N-N-Dimethylglycine",
  "O-Acetylcarnitine",
  "O-Phosphocholine",
  "Pyroglutamate",
  "Succinate",
  "Taurine",
  "Threonine",
  "Trigonelline",
  "Trimethylamine-N-Oxide",
  "Tyrosine",
  "Urea",
  "Valine",
  "Cis-Aconitate",
  "Trans-Aconitate",
  "pi-Methyl-Histidine",
  "Tau-Methyl-Histidine",
  "Creatinine") 


myListx6[sapply(myListx6, is.null)] <- NULL

names(myListx6)<-metabolites.labeled

names(myListxSa)<-metabolites.labeled

my_names <- c("meat (without sausages)","sausages, ham","fried sausage, hamburger, doner kebap, pizza",
              "poultry", "fish","cooked potatoes","fried potatoes, croquettes, french fries","pasta",
              "rice", "salad or vegetable, raw",
              "cooked vegetable","fresh fruit", "white bread, toast bread, gems",
              "white grain bread, black bread, crispbread",
              "brown bread","flaked oats, muesli, cornflakes",
              "butter",  "margarine", "olive oil", "other vegetable oils",
              "cream, creme fraiche", "curd or yoghurt with normal fat content",
              "low fat dairy products", "milk and buttermilk with normal fat content",
              "cheese", "eggs", "cakes, pastries, biscuits", "candies","salty snacks", 
              "fruit and vegetable juices","soft drinks", "mineral water",
              "non-alcoholic or alcohol-reduced beer")


myListx6[sapply(myListx6, is.null)] <- NULL
metabolites.fooditems <- lapply(myListx6, FUN = function(x){
  names(x) <- my_names
  return(x)
})


myListxSa[sapply(myListxSa, is.null)] <- NULL
metabolites.fooditems2 <- lapply(myListxSa, FUN = function(x){
  names(x) <- my_names
  return(x)
})


library(dplyr)

my_list_data_cbind2 <- as.data.frame(do.call(cbind,           
                                            metabolites.fooditems2))
d1222 <- data.frame(pvalue=unlist(my_list_data_cbind2, use.names = TRUE))

d1222$metabolites <- rownames(d1222)
d1222$food_items<-unlist(lapply(strsplit(d1222$metabolites, '.', fixed = TRUE), '[', 2))
d1222$metabolites<-unlist(lapply(strsplit(d1222$metabolites, '.', fixed = TRUE), '[', 1))

rownames(d1222) <- NULL


# Convert nested list to data frame by column
my_list_data_cbind <- as.data.frame(do.call(cbind,           
                                            metabolites.fooditems))
d1 <- data.frame(pvalue=unlist(my_list_data_cbind, use.names = TRUE))

d1$metabolites <- rownames(d1)



d1$FDR <- p.adjust(d1$pvalue, method = "fdr", n = length(d1$pvalue))
p_adjusted <- d1$pvalue[d1$FDR < 0.05]
cat(sprintf("%d significant results at FDR < 0.05 (threshold: %.2e)\n", length(p_adjusted), max(d1$FDR[d1$FDR < 0.05])))


d3<-group_by(d1,FDR<0.05)
d4<-d3
d4$"FDR < 0.05" <- NULL
d4$metabolite<-sub("\\..*", "", d4$metabolites)
d4$food_items<-unlist(lapply(strsplit(d4$metabolites, '.', fixed = TRUE), '[', 2))

d4 <- d4[-2]


d4<-data.frame(metabolites = d4$metabolite,
               food_items= d4$food_items,
               pvalue_glo= d4$pvalue,
               FDR_glo=d4$FDR)

d4$FDR_glo<-as.numeric(d4$FDR_glo)
d5<-d4[order(d4$metabolites, d4$FDR_glo),]

write.xlsx(d5, file="Food_Metabolites14.xlsx", overwrite=TRUE, 
           sheetNAME="Metafood")





# Convert nested list to data frame by column
my_list_data_cbind <- as.data.frame(do.call(cbind,           
                                            metabolites.fooditems))
d1 <- data.frame(pvalue=unlist(my_list_data_cbind, use.names = TRUE))

d1$metabolites <- rownames(d1)



d1$FDR <- p.adjust(d1$pvalue, method = "fdr")
p_adjusted <- d1$pvalue[d1$FDR < 0.05]
cat(sprintf("%d significant results at FDR < 0.05 (threshold: %.2e)\n", length(p_adjusted), max(d1$FDR[d1$FDR < 0.05])))



d3<-group_by(d1,FDR<0.05)
d4<-d3
d4$"FDR < 0.05" <- NULL
d4$metabolite<-sub("\\..*", "", d4$metabolites)
d4$food_items<-unlist(lapply(strsplit(d4$metabolites, '.', fixed = TRUE), '[', 2))

d4 <- d4[-2]


d4<-data.frame(metabolites = d4$metabolite,
               food_items= d4$food_items,
               pvalue_glo= d4$pvalue,
               FDR_glo=d4$FDR)

d4$FDR_glo<-as.numeric(d4$FDR_glo)
d5<-d4[order(d4$metabolites, d4$FDR_glo),]




write.xlsx(d5, file="Food_Metabolites15.xlsx", overwrite=TRUE, 
           sheetNAME="Metafood")




#Beverage:
which(colnames(mydata)=="kaffee")
which(colnames(mydata)=="decaf")
which(colnames(mydata)=="tee")

temp <- mydata[, 203]
mydata[, 203] <- mydata[, 204]
mydata[, 204] <- temp


which(colnames(mydata)=="kaffee")
which(colnames(mydata)=="decaf")
which(colnames(mydata)=="tee")

variable_names <- colnames(mydata)[405:447]

pvalglo<-c()
listmet <- vector(mode = "list", length = 447-404)
listfooditem <- vector(mode = "list", length = 200-167)
myListx5 <- c(listmet, listfooditem)
a <- c(listmet, listfooditem)
myListx6 <- c(listmet, listfooditem)
mydata$alcg7d_s0<-as.numeric(mydata$alcg7d_s0)
mydata$lastmeal_s0<-as.numeric(mydata$lastmeal_s0)
mydata$ph_u<-as.numeric(mydata$ph_u)
myListxSa <- c(listmet, listfooditem)

#library(olsrr)
#library(sandwich)

#168:200
for (i in 405:447){
  for (j in 168:200){
    Regression_Model_food<-lm(mydata[,i]~factor(mydata[,j])
                              +rcs(ln_PQN,4)
                              +rcs(AGE_SHIP0,4)*SEX
                              +rcs(som_tail,4)
                              +rcs(gfr_mdrd_s0,4)
                              +ph_u
                              +physact_s0
                              +log(ggt_s)
                              +hyp_s0
                              +edyrs_s0
                              +csmoking_s0
                              +alcg7d_s0*SEX
                              +factor(dschlaf)
                              +tg_s
                              +wbc
                              +rbc
                              +chol_hdl_s0
                              +lastmeal_s0
                              +diabetes_s0,na.action = na.exclude
                              ,
                              data=mydata)
    mydata[,429]
mydata$ln_meth_abso[,1]
mydata$food_30
    variables <- c(
  "food_30","ln_PQN", "AGE_SHIP0", "SEX", "som_tail", "gfr_mdrd_s0", "ph_u", 
  "physact_s0", "ggt_s", "hyp_s0", "edyrs_s0", "csmoking_s0", "alcg7d_s0", 
  "dschlaf", "tg_s", "wbc", "rbc", "chol_hdl_s0", "lastmeal_s0", "diabetes_s0", "ln_meth_abso"
)
    complete_cases <- complete.cases(mydata[, variables])
#spaltenname <- colnames(mydata)[429]
# Anzahl der vollständigen Fälle (Beobachtungen ohne NAs in den relevanten Variablen)
samplesize_calculated <- sum(complete_cases)

    
    
    summary(Regression_Model_food)
    #nobs(Regression_Model_food)
    print(Regression_Model_food)
  
    
    #print(Regression_Model_food)
    myListx5[[i-404]][[j-167]] <- Regression_Model_food
    
    #Wald-test: prüft, ob eine oder alle unabhängigen Variablen 
    #           einen signifikanten Beitrag zu einem generalisierten 
    #           linearen Regressionsmodell liefern
    vartest <- c("factor(mydata[, j])2","factor(mydata[, j])3","factor(mydata[, j])4","factor(mydata[, j])5","factor(mydata[, j])6")
    waldtest <- car::linearHypothesis(Regression_Model_food, vartest, vcov = vcovHC(Regression_Model_food, type="HC1"))
   
    
    myListx6[[i-404]][[j-167]] <- waldtest
    pvalglo2 <- (myListx6[[i-404]][[j-167]]$"Pr(>F)"[2])
    myListx6[[i-404]][[j-167]]<-pvalglo2
    
samplesize<-length(Regression_Model_food$residuals)
    
myListxSa[[i-404]][[j-167]] <- samplesize
    
  }
}




#summary(print(Regression_Model_food))

myListx6[sapply(myListx6, is.null)] <- NULL

#ln_#42
metabolites.labeled <- c(
  "2-Hydroxyisobutyrate",
  "3-Aminoisobutyrate",
  "3-Hydroxyisovalerate",
  "3-Indoxylsulfate",
  "4-Hydroxyphenylacetate",
  "Acetate",
  "Alanine",
  "Betaine",
  "Carnitine",
  "Choline",
  "Citrate",
  "Creatine",
  "Dimethylamine",
  "Ethanol",
  "Ethanolamine",
  "Formate",
  "Glucose",
  "Glycine",
  "Glycolate",
  "Hippurate",
  "Histidine",
  "Hypoxanthine",
  "Isopropanol",
  "Lactate",
  "Methanol",
  "Methylamine",
  "N-N-Dimethylglycine",
  "O-Acetylcarnitine",
  "O-Phosphocholine",
  "Pyroglutamate",
  "Succinate",
  "Taurine",
  "Threonine",
  "Trigonelline",
  "Trimethylamine-N-Oxide",
  "Tyrosine",
  "Urea",
  "Valine",
  "Cis-Aconitate",
  "Trans-Aconitate",
  "pi-Methyl-Histidine",
  "Tau-Methyl-Histidine",
  "Creatinine") 


myListx6[sapply(myListx6, is.null)] <- NULL

names(myListx6)<-metabolites.labeled

names(myListxSa)<-metabolites.labeled

my_names <- c("meat (without sausages)","sausages, ham","fried sausage, hamburger, doner kebap, pizza",
              "poultry", "fish","cooked potatoes","fried potatoes, croquettes, french fries","pasta",
              "rice", "salad or vegetable, raw",
              "cooked vegetable","fresh fruit", "white bread, toast bread, gems",
              "white grain bread, black bread, crispbread",
              "brown bread","flaked oats, muesli, cornflakes",
              "butter",  "margarine", "olive oil", "other vegetable oils",
              "cream, creme fraiche", "curd or yoghurt with normal fat content",
              "low fat dairy products", "milk and buttermilk with normal fat content",
              "cheese", "eggs", "cakes, pastries, biscuits", "candies","salty snacks", 
              "fruit and vegetable juices","soft drinks", "mineral water",
              "non-alcoholic or alcohol-reduced beer")


myListx6[sapply(myListx6, is.null)] <- NULL
metabolites.fooditems <- lapply(myListx6, FUN = function(x){
  names(x) <- my_names
  return(x)
})


myListxSa[sapply(myListxSa, is.null)] <- NULL
metabolites.fooditems2 <- lapply(myListxSa, FUN = function(x){
  names(x) <- my_names
  return(x)
})


library(dplyr)

my_list_data_cbind2 <- as.data.frame(do.call(cbind,           
                                            metabolites.fooditems2))
d1222 <- data.frame(pvalue=unlist(my_list_data_cbind2, use.names = TRUE))

d1222$metabolites <- rownames(d1222)
d1222$food_items<-unlist(lapply(strsplit(d1222$metabolites, '.', fixed = TRUE), '[', 2))
d1222$metabolites<-unlist(lapply(strsplit(d1222$metabolites, '.', fixed = TRUE), '[', 1))

rownames(d1222) <- NULL


# Convert nested list to data frame by column
my_list_data_cbind <- as.data.frame(do.call(cbind,           
                                            metabolites.fooditems))
d1 <- data.frame(pvalue=unlist(my_list_data_cbind, use.names = TRUE))

d1$metabolites <- rownames(d1)



d1$FDR <- p.adjust(d1$pvalue, method = "fdr", n = length(d1$pvalue))
p_adjusted <- d1$pvalue[d1$FDR < 0.05]
cat(sprintf("%d significant results at FDR < 0.05 (threshold: %.2e)\n", length(p_adjusted), max(d1$FDR[d1$FDR < 0.05])))


d3<-group_by(d1,FDR<0.05)
d4<-d3
d4$"FDR < 0.05" <- NULL
d4$metabolite<-sub("\\..*", "", d4$metabolites)
d4$food_items<-unlist(lapply(strsplit(d4$metabolites, '.', fixed = TRUE), '[', 2))

d4 <- d4[-2]


d4<-data.frame(metabolites = d4$metabolite,
               food_items= d4$food_items,
               pvalue_glo= d4$pvalue,
               FDR_glo=d4$FDR)

d4$FDR_glo<-as.numeric(d4$FDR_glo)
d5<-d4[order(d4$metabolites, d4$FDR_glo),]

write.xlsx(d5, file="Food_Metabolites14.xlsx", overwrite=TRUE, 
           sheetNAME="Metafood")





# Convert nested list to data frame by column
my_list_data_cbind <- as.data.frame(do.call(cbind,           
                                            metabolites.fooditems))
d1 <- data.frame(pvalue=unlist(my_list_data_cbind, use.names = TRUE))

d1$metabolites <- rownames(d1)



d1$FDR <- p.adjust(d1$pvalue, method = "fdr")
p_adjusted <- d1$pvalue[d1$FDR < 0.05]
cat(sprintf("%d significant results at FDR < 0.05 (threshold: %.2e)\n", length(p_adjusted), max(d1$FDR[d1$FDR < 0.05])))



d3<-group_by(d1,FDR<0.05)
d4<-d3
d4$"FDR < 0.05" <- NULL
d4$metabolite<-sub("\\..*", "", d4$metabolites)
d4$food_items<-unlist(lapply(strsplit(d4$metabolites, '.', fixed = TRUE), '[', 2))

d4 <- d4[-2]


d4<-data.frame(metabolites = d4$metabolite,
               food_items= d4$food_items,
               pvalue_glo= d4$pvalue,
               FDR_glo=d4$FDR)

d4$FDR_glo<-as.numeric(d4$FDR_glo)
d5<-d4[order(d4$metabolites, d4$FDR_glo),]




write.xlsx(d5, file="Food_Metabolites15.xlsx", overwrite=TRUE, 
           sheetNAME="Metafood")



```




#E.2 linear regressiion: metabolites~ food items rare vs. frquent (1&2 and 5&6, 3&4=NA)
```{r}
for (i in 168:200){
  food.cat3<-NULL
  food.cat3[which(mydata[,i]=='1')]<-1
  food.cat3[which(mydata[,i]=='2')]<-1
  food.cat3[which(mydata[,i]=='3')]<-9
  food.cat3[which(mydata[,i]=='4')]<-9
  food.cat3[which(mydata[,i]=='5')]<-0
  food.cat3[which(mydata[,i]=='6')]<-0
  mydata$food.cat3<-food.cat3
  mydata[, paste("cat2.", colnames(mydata)[i], sep="")]<-food.cat3
}


#200-1806
#1741-1773
#linear regression
pvalglo<-c()
coefficients<-c()

listmet <- vector(mode = "list", length = 447-405)
listfooditem <- vector(mode = "list", length = 485-453)
myListx5 <- c(listmet, listfooditem)
a <- c(listmet, listfooditem)
myListx6 <- c(listmet, listfooditem)
myListx7 <- c(listmet, listfooditem)
myListx8 <- c(listmet, listfooditem)

myListx9 <- listfooditem
myListx10 <- listfooditem
coefficients<-c()


#Calculating frequencies

#(451:483)
#1775:1807
for (j in 453:485){
  frequent<-length(which(mydata[,j]==1))/(length(which(mydata[,j]==1))+length(which(mydata[,j]==0)))
  rare<-(length(which(mydata[,j]==0)))/(length(which(mydata[,j]==1))+length(which(mydata[,j]==0)))
  myListx9[[j-200]] <- c(rare,frequent)
}


# Convert nested list to data frame by column
my_list_data_cbind200 <- as.data.frame(do.call(cbind,           
                                               myListx9))

transpose <- data.frame(rare=unlist(my_list_data_cbind200, use.names = TRUE))
transpose <- as.data.frame(matrix(transpose$rare, ncol = 2, byrow = TRUE))


transpose$food_items <- my_names
transpose<-rename(transpose, precentage_rare=V1)
transpose<-rename(transpose, precentage_frequent=V2)

#library(tidyverse)
#library(splines)
##library(rms)
#library(sandwich)
#install.packages("olsrr")
#library(olsrr)



for (i in 405:447){
  for (j in 453:485){
    
    Regression_Model_food<-lm(mydata[,i]~factor(mydata[,j])
                              +rcs(ln_PQN,4)
                              +rcs(AGE_SHIP0,4)*SEX
                              +rcs(som_tail,4)
                              +rcs(gfr_mdrd_s0,4)
                              +ph_u
                              +physact_s0
                              +log(ggt_s)
                              +hyp_s0
                              +edyrs_s0
                              +csmoking_s0
                              +alcg7d_s0*SEX
                              +factor(dschlaf)
                              +tg_s
                              +wbc
                              +rbc
                              +chol_hdl_s0
                              +lastmeal_s0
                              +diabetes_s0
                              ,na.action = na.exclude,
                              data=mydata)

    
    myListx5[[i-404]][[j-452]] <- Regression_Model_food
    
    coefficient<-summary(Regression_Model_food)$coefficients[2]
    
    conf.intervall<-confint(Regression_Model_food, 'factor(mydata[, j])1', level=0.95)
    myListx8[[i-404]][[j-452]]<-c(coefficient,conf.intervall)
    
    
    #Wald-test
    vartest <- c("factor(mydata[, j])1")
    waldtest <- car::linearHypothesis(Regression_Model_food, vartest, vcov = vcovHC(Regression_Model_food, type="HC1"))
    #waldtest<- wald.test(Sigma = vcov(Regression_Model_food), b = coef(Regression_Model_food), Terms = 3:4)
    
    
    myListx6[[i-404]][[j-452]] <- waldtest
    pvalglo2 <- (myListx6[[i-404]][[j-452]]$"Pr(>F)"[2])
    myListx6[[i-404]][[j-452]]<-pvalglo2
    
    
    
    
  }
}


#beta-values(CI)
myListx8[sapply(myListx8, is.null)] <- NULL

names(myListx8)<-metabolites.labeled


metabolites.fooditems8 <- lapply(myListx8, FUN = function(x){
  names(x) <- my_names
  return(x)
})





my_list_data_cbind8 <- as.data.frame(do.call(cbind,           
                                             metabolites.fooditems8))
my_list_data_cbind8 <- lapply(my_list_data_cbind8, gsub, pattern='c', replacement='')



d1_8 <- data.frame(beta_CI=unlist(my_list_data_cbind8, use.names = TRUE))
d1_8$metabolites <- rownames(d1)


d1_8<-group_by(d1_8,metabolites)
d1_8$food_items<-unlist(lapply(strsplit(d1_8$metabolites, '.', fixed = TRUE), '[', 2))

d1_8$metabolites<-sub("\\..*", "", d1_8$metabolites)




#p-value not global
myListx6[sapply(myListx6, is.null)] <- NULL

names(myListx6)<-metabolites.labeled

metabolites.fooditems <- lapply(myListx6, FUN = function(x){
  names(x) <- my_names
  return(x)
})
#Convert nested list to data frame by column
my_list_data_cbind <- as.data.frame(do.call(cbind,           
                                            metabolites.fooditems))
d1 <- data.frame(pvalue=unlist(my_list_data_cbind, use.names = TRUE))

d1$metabolites <- rownames(d1)


#FDR
d1$FDR <- p.adjust(d1$pvalue, method = "fdr")
p_adjusted <- d1$pvalue[d1$FDR < 0.05]
cat(sprintf("%d significant results at FDR < 0.05 (threshold: %.2e)\n", length(p_adjusted), max(d1$FDR[d1$FDR < 0.05])))



d3<-group_by(d1,FDR<0.05)
d4<-d3
d4$"FDR < 0.05" <- NULL
d4$metabolite<-sub("\\..*", "", d4$metabolites)
d4$food_items<-unlist(lapply(strsplit(d4$metabolites, '.', fixed = TRUE), '[', 2))

d4 <- d4[-2]


d4<-data.frame(metabolites = d4$metabolite,
               food_items= d4$food_items,
               pvalue= d4$pvalue,
               FDR=d4$FDR)

d4$FDR<-as.numeric(d4$FDR)

d5_2<-d4[order(d4$metabolites, d4$FDR),]
#4.989920e-26
#6.916030e-23

write.xlsx(d5_2, file="2beta1_2versusbeta5_12.xlsx", overwrite=TRUE, 
           sheetNAME="Metafood")



#### Combine the two datasets ####
each.category_onlyonecat<- merge(x=d5_2,y=d5, all.x=TRUE)

withfreq<- merge(each.category_onlyonecat,transpose, by=c("food_items"))

withfreq2<-withfreq[c(2,1,8,7,5,3,6,4)] 

finaldataset<- merge(withfreq2,d1_8, by=c("metabolites","food_items"))


finaldataset<-finaldataset[order(finaldataset$FDR_glo),]

finaldataset2<-finaldataset[c(1,2,3,4,9,5,6,7,8)]



colnames(d1222)[colnames(d1222) == "pvalue"] <- "sample size"


finaldataset_sampleSize<- merge(d1222,finaldataset2, by=c("food_items","metabolites"))






finaldataset3 <- subset(finaldataset_sampleSize, metabolites == "Methanol")


write.xlsx(finaldataset2, file="C:/Users/klierk/Documents/August/Metabolites_diet2.xlsx", overwrite=TRUE, 
           sheetNAME="Metafood")

write.xlsx(finaldataset3, file="C:/Users/klierk/Documents/August/Methanol4.xlsx", overwrite=TRUE, 
           sheetNAME="Metafood")
#4017
```



# Table S8:Significant urinary methanol associations across food categories in the SHIP-START-0 cohort
```{r}
#Methanol
finaldataset3$FDR <- format(finaldataset3$FDR, scientific = TRUE, digits = 2)
finaldataset3$FDR_glo <- format(finaldataset3$FDR_glo, scientific = TRUE, digits = 2)
finaldataset3$pvalue_glo <- format(finaldataset3$pvalue_glo, scientific = TRUE, digits = 2)
finaldataset3$pvalue <- format(finaldataset3$pvalue, scientific = TRUE, digits = 2)

finaldataset3$precentage_frequent <- format(finaldataset3$precentage_frequent, digits = 1)
finaldataset3$precentage_rare <- format(finaldataset3$precentage_rare, digits = 1)



format_and_round <- function(text) {
  values <- gsub("\\(|\\)", "", text)  # Klammern entfernen
  values <- unlist(strsplit(values, ", "))  # Aufteilen der Werte
  rounded_values <- round(as.numeric(values), digits = 2)  # Runden auf 2 Nachkommastellen
  
  formatted_text <- paste0(rounded_values[1], " (", paste(rounded_values[-1], collapse = ", "), ")")
  return(formatted_text)
}

# Anwenden der Funktion auf alle Werte in beta_CI
finaldataset3$formatted_beta_CI <- sapply(finaldataset3$beta_CI, format_and_round)
finaldataset4 <- subset(finaldataset3, select = -c(beta_CI))


finaldataset44 <- finaldataset4[, c(1, 2, 4,5,6,7,8,9,10,3)]

finaldataset5 <- finaldataset44[, c(1, 2, 3, 4, 9, 5, 6, 7, 8,10)]


write.xlsx(finaldataset5, file="Methanol_s.xlsx", overwrite=TRUE, 
           sheetNAME="Metafood")

getwd()

```



# Table S7:Metabolites associations across food categories in the SHIP-START-0 cohort
```{r}
#all

view(finaldataset_sampleSize)
finaldataset_sampleSize$FDR <- format(finaldataset_sampleSize$FDR, scientific = TRUE, digits = 2)
finaldataset_sampleSize$FDR_glo <- format(finaldataset_sampleSize$FDR_glo, scientific = TRUE, digits = 2)
finaldataset_sampleSize$pvalue_glo <- format(finaldataset_sampleSize$pvalue_glo, scientific = TRUE, digits = 2)
finaldataset_sampleSize$pvalue <- format(finaldataset_sampleSize$pvalue, scientific = TRUE, digits = 2)

finaldataset_sampleSize$precentage_frequent <- format(finaldataset_sampleSize$precentage_frequent, digits = 1)
finaldataset_sampleSize$precentage_rare <- format(finaldataset_sampleSize$precentage_rare, digits = 1)



format_and_round <- function(text) {
  values <- gsub("\\(|\\)", "", text)  # Klammern entfernen
  values <- unlist(strsplit(values, ", "))  # Aufteilen der Werte
  rounded_values <- round(as.numeric(values), digits = 2)  # Runden auf 2 Nachkommastellen
  
  formatted_text <- paste0(rounded_values[1], " (", paste(rounded_values[-1], collapse = ", "), ")")
  return(formatted_text)
}

# Anwenden der Funktion auf alle Werte in beta_CI
finaldataset_sampleSize$formatted_beta_CI <- sapply(finaldataset_sampleSize$beta_CI, format_and_round)
finaldataset10 <- subset(finaldataset_sampleSize, select = -c(beta_CI))

new_order <- order(finaldataset10$metabolites)
finaldataset19 <- finaldataset10[new_order, ]


finaldataset1911 <- finaldataset19[, c(2,1,4,5,10,6,7,8,9,3)]

write.xlsx(finaldataset1911, file="All_mainresults4.xlsx", overwrite=TRUE, 
           sheetNAME="Metafood")

```





# Fig. 1 a
```{r}
finaldataset2$FDR_glo<-as.numeric(finaldataset2$FDR_glo)
subset_df <- finaldataset2[finaldataset2$FDR_glo < 0.05, ]

finaldataset2_subset <- subset_df[, c(1, 2, 8)]



#Overview of the significance of metabolites

# Group by metabolites and food items, and calculate the mean p-value for each group
df_grouped <- finaldataset2_subset %>% 
  group_by(metabolites, food_items) %>% 
  summarise(mean_p_values = mean(FDR_glo)) 

finaldataset2_subset$food_items <- factor(finaldataset2_subset$food_items)

finaldataset2_subset <- finaldataset2_subset %>% group_by(FDR_glo)


# Definiere die gewünschte Reihenfolge der Metaboliten
metabolites_order <- c("Ethanol","Betaine", "N-N-Dimethylglycine","Tyrosine","Alanine",
                       "Trigonelline","Carnitine","Cis-Aconitate","Tau-Methyl-Histidine",
                       "Formate","Hippurate","Glycolate",
                       "Trimethylamine-N-Oxide","Taurine","Glycine","Citrate","Creatinine", "Ethanolamine",
                       "pi-Methyl-Histidine", "Creatine",
                       "Methanol")



# Konvertiere die y-Achse in einen Faktor mit der gewünschten Reihenfolge
finaldataset2_subset$metabolites <- factor(finaldataset2_subset$metabolites, levels = metabolites_order)
#-log10(4.010286e-02)
#-log10(2.509596e-22)
#-log10(7.260948e-05)
#-log10(4.010286e-02)
#-log10(4.010286e-02)


c17<-c("#EF6921",
  "#E69C2E",
       "#EFCB57",
 "#ECF123",
 "#F3F67A",
 "#AFED77",
  "#75E62E",
  "#5DCE18",
  "#2EE6A1",
  "#2EE6DF",
  "#2EAEE6",
 "#2E70E6",
"#4836CE",
"#672EE6",
"#A52EE6",
"#E32EE6",
"#E62EAA",
"#E62E2E")



#install.packages("dplyr")
library(dplyr)
library(ggplot2)

finaldataset2_subset$FDR_glo
finaldataset2_subset$test234<- (-log10(finaldataset2_subset$FDR_glo))

# Calculate the maximum -log10(FDR_glo) value for each food item
#max_pvalues <- finaldataset2_subset %>%
#  group_by(food_items) %>%
#  summarize(max_pvalue = max(-log10(FDR_glo))) %>%
#  arrange(desc(max_pvalue))



library(data.table)
max_pvalues <-setDT(finaldataset2_subset)[, list(max_pvalue = max(-log10(FDR_glo))), by = food_items][order(max_pvalue)]


finaldataset2_subset$food_items
# Order the factor levels of the "food_items" variable based on max p-value
ordered_food_items <- finaldataset2_subset %>%
  left_join(max_pvalues, by = "food_items") %>%
  arrange(desc(max_pvalue)) %>%
  mutate(food_items = factor(food_items, levels = unique(food_items)))

# Use the ordered factor levels to fill the bars with the corresponding colors
significant_values <- ggplot(ordered_food_items, aes(x = (-log10(FDR_glo)), y = metabolites, fill = factor(food_items))) + 
  geom_bar(stat = "identity", position = "stack", color = "black", width = 0.8) +
  scale_fill_manual(values = c17)+
  scale_x_continuous(breaks = seq(0, 40, by = 10), 
                     labels = paste0("", seq(0, 40, by = 10))) +
  labs(title = "",
       x="-log10(FDR)",
       y = "",
       fill = "") +
  theme(axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 21),
        axis.title.x= element_text(size=20),
        legend.text = element_text(size = 18),
        #legend.position = c(0.2, 0.5), # Position der Legende nach links verschieben
        #legend.margin = margin(l = -30),# change the size to 8
        #axis.title.x = element_text(size = 12, margin = margin(t = 10)),
        #axis.title.y = element_text(size = 12, margin = margin(r = 10)),
        legend.position = c(0.6, 0.5),
        plot.background = element_rect(fill = "#DEE3EA"), # Hintergrund der Grafik ändern
        legend.background = element_rect(fill = "#DEE3EA"),
        panel.background = element_rect(fill = "#DEE3EA")) +
  guides(fill = guide_legend(ncol = 2, position = "bottom", title.position = "top", title.hjust = 0.5))

significant_values




#Not stacked
# Use the ordered factor levels to fill the bars with the corresponding colors
significant_values <- ggplot(ordered_food_items, aes(x = (-log10(FDR_glo)), y = metabolites, fill = factor(food_items))) + 
  geom_bar(stat = "identity", position = "stack", color = "black", width = 0.8) +
  scale_fill_manual(values = c17)+
  scale_x_continuous(breaks = seq(0, 40, by = 10), 
                     labels = paste0("", seq(0, 40, by = 10))) +
  labs(title = "",
       x="-log10(FDR)",
       y = "",
       fill = "") +
  theme(axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 21),
        axis.title.x= element_text(size=20),
        legend.text = element_text(size = 18),
        #legend.position = c(0.2, 0.5), # Position der Legende nach links verschieben
        #legend.margin = margin(l = -30),# change the size to 8
        #axis.title.x = element_text(size = 12, margin = margin(t = 10)),
        #axis.title.y = element_text(size = 12, margin = margin(r = 10)),
        legend.position = c(0.6, 0.5),
        plot.background = element_rect(fill = "#DEE3EA"), # Hintergrund der Grafik ändern
        legend.background = element_rect(fill = "#DEE3EA"),
        panel.background = element_rect(fill = "#DEE3EA")) +
  guides(fill = guide_legend(ncol = 2, position = "bottom", title.position = "top", title.hjust = 0.5))

significant_values





ggsave("B:/Methanol_project/Official data/graph1try3.png", plot = 
         significant_values, width = 14, height = 8, units = "in", dpi = 600)
```



# Fig. 1 b
```{r}

#3.METHANOL- focus
library(dplyr)
finaldatasetmethanol_sig<-group_by(finaldataset,FDR_glo<0.05)
finaldatasetmethanol_sig2<-finaldatasetmethanol_sig[!(finaldatasetmethanol_sig$"FDR_glo < 0.05"=="FALSE"),]
finaldatasetmethanol_sig2$"FDR < 0.05" <- NULL


finaldatasetmethanol_sig3<-finaldatasetmethanol_sig2[(finaldatasetmethanol_sig2$metabolites=="meth_abso"),]

finaldatasetmethanol_sig3<-finaldatasetmethanol_sig3[-c(10)]

methanol_pval<-finaldatasetmethanol_sig3[c(1,2,8)]
methanol_pval_glo<-finaldatasetmethanol_sig3[c(1,2,7)]


#3. Splines
my_comparisons <- list( c("1", "2"), c("1", "3"), c("1", "4"),c("1", "5"),c("1", "6") )



empty_list <- vector(mode = "list", length = 60-2)
pval <- c()
probandid <- c()


mydata$gfr_mdrd_s0[mydata$gfr_mdrd_s0==".n"] <- NA

library(rms)
for (i in 429){
  Regression_Model<-lm(mydata[,i]~rcs(mydata$ln_PQN,4)
                       +rcs(mydata$AGE_SHIP0,4)*mydata$SEX
                       +rcs(mydata$gfr_mdrd_s0,4)
                       +mydata$ph_u
                       +rcs(mydata$som_tail,4)
                       +mydata$physact_s0
                       +log(mydata$ggt_s)
                       +mydata$hyp_s0
                       +mydata$edyrs_s0
                       +mydata$csmoking_s0
                       +mydata$alcg7d_s0*mydata$SEX
                       +factor(mydata$dschlaf)
                       +mydata$tg_s
                       +mydata$wbc
                       +mydata$rbc
                       +mydata$chol_hdl_s0
                       +mydata$lastmeal_s0
                       +mydata$diabetes_s0
                       
                       ,
                       na.action = na.exclude)
  summary(Regression_Model)
  empty_list[[i-428]] <- Regression_Model
  
  pval <- c(pval,summary(Regression_Model)$coefficients[4,4])
  
  probandid <- c(probandid, mydata$proband[i])
  Residuals<-(-1)*(fitted(Regression_Model)-mydata[, i])
  mydata[, paste("res_", colnames(mydata)[i], sep="")] <- Residuals
  
  # print(qplot(fitted.values(Regression_Model),residuals(Regression_Model))+geom_smooth(formula = y ~ x,method="lm",se=F))
}


# Violinplot 

#food_30:fruit and vegetable juices	
#install.packages("olsrr")
library(olsrr)
library(rms)
#168:200
for (i in 429){
  for (j in 197){
    Regression_Model_food<-lm(mydata[,i]~factor(mydata[,j])
                              +rcs(ln_PQN,4)
                              +rcs(AGE_SHIP0,4)*SEX
                              +rcs(som_tail,4)
                              +rcs(gfr_mdrd_s0,4)
                              +ph_u
                              +physact_s0
                              +log(ggt_s)
                              +hyp_s0
                              +edyrs_s0
                              +csmoking_s0
                              +alcg7d_s0*SEX
                              +factor(dschlaf)
                              +tg_s
                              +wbc
                              +rbc
                              +chol_hdl_s0
                              +lastmeal_s0
                              +diabetes_s0,na.action = na.exclude
                              ,
                              data=mydata)
    
    
    summary(Regression_Model_food)
    print(Regression_Model_food)
    
    
  }
}

startdata8<-subset(mydata, !is.na(food_30))
startdata8<-startdata8[!(startdata8$food_30==9),]

b<-ggplot(startdata8, 
          aes(x = factor(food_30), 
              y = res_ln_meth_abso)) +
  geom_violin(aes(fill = factor(food_30)), trim = FALSE) +
  geom_boxplot(width = .2, 
               fill = "gray81",
               outlier.color = "gray81",
               outlier.size = 2) + 
  labs(title = "Fruit and vegetable juices",x="1=daily/almost daily        6=never or almost never",y="Methanol [res.]")+
  theme_bw() +
  geom_hline(yintercept = 0, linetype = "dashed", size=0.8) +
  theme(panel.background = element_rect(fill = "white"),
        plot.background = element_rect(fill = "white"),
        plot.title = element_text(size = 30),
        axis.text.x = element_text(size = 30),
        axis.text.y = element_text(size = 30),
        axis.title.y= element_text (size=30),
        axis.title.x= element_text (size=26),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_rect(color = "black"))+ 
  scale_fill_manual(values = c("#005293","#095899","#125F9F","#1C66A6","#256DAC","#2F74B3"))+ 
  guides(fill = FALSE)


library(ggpubr)
a1 <- b + 
  geom_bracket(xmin = 1, xmax = 2, y.position = 3.5, label = "5.09e-06", 
               tip.length = c(0.02, 0.02), vjust = 1.5, label.size = 7) +
  geom_bracket(xmin = 1, xmax = 3, y.position = 4, label = "5.38e-03", 
               tip.length = c(0.02, 0.02), vjust = 1.5, label.size = 7) +
  geom_bracket(xmin = 1, xmax = 4, y.position = 4.5, label = "1.04e-10", 
               tip.length = c(0.02, 0.02), vjust = 1.5, label.size = 7)+
  geom_bracket(xmin = 1, xmax = 5, y.position = 5, label = "7.12e-11", 
               tip.length = c(0.02, 0.02), vjust = 1.5, label.size = 7)+
  geom_bracket(xmin = 1, xmax = 6, y.position = 5.5, label = "< 2.22e-16", 
               tip.length = c(0.02, 0.02), vjust = 1.5, label.size = 7)



ggsave("C:/Users/klierk/Documents/November/juice.png", plot = a1, width = 23, height = 20, units = "cm", dpi = 300, bg="transparent")



#Ridgeline plot

library(ggplot2)
#install.packages("ggridges")
library(ggridges)

library(ggridges)
library(ggplot2)
#install.packages("viridis")
library(viridis)

a1.2<- ggplot(startdata8, 
              aes(x = res_ln_meth_abso, 
                  y = factor(food_30),
                  fill = factor(food_30)
              )) +
  geom_density_ridges(aes(fill = factor(food_30)))+
  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
  theme_ridges() + 
  labs(title = expression("Fruit and vegetable juices"),x="Methanol [res.]",y="")+
  theme(panel.border = element_rect(color = "black"),
    axis.line = element_line(color = "black", size = 0.25),
        panel.background = element_rect(fill = "white"),
        plot.background = element_rect(fill = "white"),
        plot.title = element_text(size = 17),
        axis.text.x = element_text(size = 17),
        axis.title.x = element_text(size = 15,hjust = 0.5),
        axis.text.y = element_text(size = 17),
    legend.position = "none")+
  geom_vline(data = subset(startdata8), # filter data source
             aes(xintercept = 0),
             linewidth = 1, colour = "black")+

  geom_vline(data = subset(startdata8), # filter data source
             aes(xintercept = 0),
             size = 1, colour = "black") +
  geom_hline(yintercept = 0, 
             size = 1, colour = "black")+
annotate("text", x = 1.26, y = Inf, label = "FDR (global):
   3.5e-22", hjust = 0.3, vjust = 1, size = 5)+
  scale_fill_manual(values = c("#005293","#095899","#125F9F","#1C66A6","#256DAC","#2F74B3"))




ggsave("C:/Users/KlierK/Documents/November/graph2.png",plot=a1.2, width = 5.5, height = 4.8, units = "in", dpi = 300)

ggsave("C:/Users/KlierK/Documents/Oktober/graph3.png",plot=a1, width = 6, height = 5, units = "in", dpi = 300)

a1
a1.2


```



# Fig.2 a
```{r}
#food_30:fruit and vegetable juices	

mydata30 <- subset(mydata, !is.na(cat2.food_30))
startdata8 <- mydata30[!(mydata30$cat2.food_30 == 9),]


startdata8$cat2.food_30new <- ifelse(startdata8$cat2.food_30 == 0, "rare", "frequent")


b <- ggplot(startdata8, 
            aes(x = factor(cat2.food_30new), 
                y = res_ln_meth_abso)) +
  geom_violin(aes(fill = factor(cat2.food_30new)),
              trim = FALSE, width = 0.6, size = 0.8, draw_quantiles = TRUE) +
  scale_fill_manual(values = c("#005293", "#2F74B3")) + # manually set colors
  geom_boxplot(width = .2, 
               fill = "gray81",
               outlier.color = "gray81",
               outlier.size = 2, size = 0.8) +
  labs(title = "Fruit and vegetable juices", x = "", y = "Methanol [res.]") +
  theme_bw() +
  theme(plot.title = element_text(size = 15),
        axis.text.x = element_text(size = 15),
        axis.text.y = element_text(size = 15),
        axis.title.y= element_text(size=15))+
  guides(fill = "none") # add this line to remove the fill legend


library(ggplot2)
library(ggforce)
update.packages("ggplot2")
#install.packages("ggplot2")
library(ggplot2)
#install.packages("ggpubr")
library(ggpubr)
a1 <- b + geom_bracket(
  xmin = "frequent", xmax = "rare", y.position =3.5,
  label = "FDR: 8.0e-17", 
  tip.length = c(0.02, 0.02), vjust = 2,
  label.size = 4
)+
  geom_hline(yintercept = 0, linetype = "dashed", size=0.8) +
  theme_bw() +
  theme(panel.background = element_rect(fill = NA), # remove panel background fill
        plot.background = element_rect(fill = NA), # remove plot background fill
        plot.title = element_text(size = 20),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 20),
        axis.title.y= element_text (size=25),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.line = element_line(),
        panel.border = element_blank())

a1



#food_9: rice

mydata9<-subset(mydata, !is.na(cat2.food_9))
startdata8<-mydata9[!(mydata9$cat2.food_9==9),]


startdata8$cat2.food_9new <- ifelse(startdata8$cat2.food_9 == 0, "rare", "frequent")


b<-ggplot(startdata8, 
          aes(x = factor(cat2.food_9new), 
              y = res_ln_meth_abso)) +
  geom_violin(aes(fill = factor(cat2.food_9new)),
              trim = FALSE, width=0.6, size = 0.8) +
  scale_fill_manual(values = c("#005293", "#2F74B3")) + # manually set colors
  geom_boxplot(width = .2, 
               fill = "gray81",
               outlier.color = "gray81",
               outlier.size = 2, size = 0.8) + 
  labs(title = "Rice",x="",y="Methanol [res.]")+
  theme_bw() +
  theme(plot.title = element_text(size = 15),
        axis.text.x = element_text(size = 15),
        axis.text.y = element_text(size = 15))+
  guides(fill = "none") # add this line to remove the fill legend

b2<-b+
  geom_bracket(
    xmin = "rare", xmax = "frequent", y.position =3.5,
    label = "FDR: 9.9e-03", 
    tip.length = c(0.02, 0.02), vjust = 2,
    label.size = 4
  )+
  geom_hline(yintercept = 0, linetype = "dashed", size=0.8) +
  theme_bw()+
theme(panel.background = element_rect(fill = NA), # remove panel background fill
      plot.background = element_rect(fill = NA), # remove plot background fill
      plot.title = element_text(size = 20),
      axis.text.x = element_text(size = 20),
      axis.text.y = element_text(size = 20),
      axis.title.y= element_text (size=25),
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      axis.line = element_line(),
      panel.border = element_blank())



#food_23:low fat dairy products
library(ggplot2)
mydata23<-mydata[!(mydata$cat2.food_23==9),]
startdata8<-subset(mydata23, !is.na(cat2.food_23))


startdata8$cat2.food_23new <- ifelse(startdata8$cat2.food_23 == 0, "rare", "frequent")


b<-ggplot(startdata8, 
          aes(x = factor(cat2.food_23new), 
              y = res_ln_meth_abso)) +
  geom_violin(aes(fill = factor(cat2.food_23new)),
              trim = FALSE, width=0.6, size = 0.8) +
  scale_fill_manual(values = c("#005293", "#2F74B3")) + # manually set colors
  geom_boxplot(width = .2, 
               fill = "gray81",
               outlier.color = "gray81",
               outlier.size = 2, size = 0.8)+
  labs(title = "Low fat dairy products",x="",y="Methanol [res.]")+
  theme_bw() +
  theme(plot.title = element_text(size = 15),
        axis.text.x = element_text(size = 15),
        axis.text.y = element_text(size = 15))+
  guides(fill = "none") # add this line to remove the fill legend


  
  c3<- b+geom_bracket(
  xmin = "rare", xmax = "frequent", y.position =3.5,
  label = "FDR:3.6e-02", 
  tip.length = c(0.02, 0.02), vjust = 2,
  label.size = 4
   )+
    geom_hline(yintercept = 0, linetype = "dashed", size=0.8) +
  theme_bw() +
    theme(panel.background = element_rect(fill = NA), # remove panel background fill
          plot.background = element_rect(fill = NA), # remove plot background fill
          plot.title = element_text(size = 20),
          axis.text.x = element_text(size = 20),
          axis.text.y = element_text(size = 20),
          axis.title.y= element_text (size=25),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          axis.line = element_line(),
          panel.border = element_blank())




#food_7:fried potatoes, croquettes, French fries	

mydata7<-subset(mydata, !is.na(cat2.food_7))
startdata8<-mydata7[!(mydata7$cat2.food_7==9),]


startdata8$cat2.food_7new <- ifelse(startdata8$cat2.food_7 == 0, "rare", "frequent")


b<-ggplot(startdata8, 
          aes(x = factor(cat2.food_7new), 
              y = res_ln_meth_abso)) +
  geom_violin(aes(fill = factor(cat2.food_7new)),
              trim = FALSE, width=0.6, size = 0.8) +
  scale_fill_manual(values = c("#005293", "#2F74B3")) + # manually set colors
  geom_boxplot(width = .2, 
               fill = "gray81",
               outlier.color = "gray81",
               outlier.size = 2, size = 0.8) + 
  labs(title = "Fried potatoes etc.",x="",y="Methanol [res.]")+
  theme_bw() +
  theme(plot.title = element_text(size = 15),
        axis.text.x = element_text(size = 15),
        axis.text.y = element_text(size = 15))+
  guides(fill = "none") # add this line to remove the fill legend

d4<- b+
  geom_bracket(
  xmin = "rare", xmax = "frequent", y.position =3.5,
  label = "FDR:6.6e-03", 
  tip.length = c(0.02, 0.02), vjust = 2,
  label.size = 4
)+
  geom_hline(yintercept = 0, linetype = "dashed", size=0.8) +
  theme(panel.background = element_rect(fill = NA), # remove panel background fill
        plot.background = element_rect(fill = NA), # remove plot background fill
        plot.title = element_text(size = 20),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 20),
        axis.title.y= element_text (size=25),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.line = element_line(),
        panel.border = element_blank())




#food_19:flaked oats	

mydata16<-subset(mydata, !is.na(cat2.food_16))
startdata8<-mydata16[!(mydata16$cat2.food_16==9),]


startdata8$cat2.food_16new <- ifelse(startdata8$cat2.food_16 == 0, "rare", "frequent")


b<-ggplot(startdata8, 
          aes(x = factor(cat2.food_16new), 
              y = res_ln_meth_abso)) +
  geom_violin(aes(fill = factor(cat2.food_16new)),
              trim = FALSE, width=0.6, size = 0.8) +
  scale_fill_manual(values = c("#005293", "#2F74B3")) + # manually set colors
  geom_boxplot(width = .2, 
               fill = "gray81",
               outlier.color = "gray81",
               outlier.size = 2, size = 0.8) + 
  labs(title = "Flaked oats, muesli, etc.",x="",y="Methanol [res.]")+
  theme_bw() +
  theme(plot.title = element_text(size = 15),
        axis.text.x = element_text(size = 15),
        axis.text.y = element_text(size = 15))+
  guides(fill = "none") # add this line to remove the fill legend

e5<- b+
  geom_bracket(
  xmin = "rare", xmax = "frequent", y.position =3.5,
  label = "FDR: 1.0e-02", 
  tip.length = c(0.02, 0.02), vjust = 2,
  label.size = 4
  )+
  geom_hline(yintercept = 0, linetype = "dashed", size=0.8) +
  theme(panel.background = element_rect(fill = NA), # remove panel background fill
        plot.background = element_rect(fill = NA), # remove plot background fill
        plot.title = element_text(size = 20),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 20),
        axis.title.y= element_text (size=25),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.line = element_line(),
        panel.border = element_blank())
  




#food_19: olive oil

startdata8<-subset(mydata, !is.na(cat2.food_19))
startdata8<-startdata8[!(startdata8$cat2.food_19==9),]


startdata8$cat2.food_19new <- ifelse(startdata8$cat2.food_19 == 0, "rare", "frequent")


b<-ggplot(startdata8, 
          aes(x = factor(cat2.food_19new), 
              y = res_ln_meth_abso)) +
  geom_violin(aes(fill = factor(cat2.food_19new)),
              trim = FALSE, width=0.6, size = 0.8) +
  scale_fill_manual(values = c("#005293", "#2F74B3")) + # manually set colors
  geom_boxplot(width = .2, 
               fill = "gray81",
               outlier.color = "gray81",
               outlier.size = 2, size = 0.8) + 
  labs(title = "Olive oil",x="",y="Methanol [res.]")+
  theme_bw() +
  geom_hline(yintercept = 0, linetype = "dashed", size=0.8) +
  theme(plot.title = element_text(size = 15),
        axis.text.x = element_text(size = 15),
        axis.text.y = element_text(size = 15))+
  guides(fill = "none") # add this line to remove the fill legend

f6<- b+
  geom_bracket(
  xmin = "rare", xmax = "frequent", y.position =3.5,
  label = "FDR: 6.6e-03", 
  tip.length = c(0.02, 0.02), vjust = 2,
  label.size = 4
)+
  geom_hline(yintercept = 0, linetype = "dashed", size=0.8) +
  theme(panel.background = element_rect(fill = NA), # remove panel background fill
        plot.background = element_rect(fill = NA), # remove plot background fill
        plot.title = element_text(size = 20),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 20),
        axis.title.y= element_text (size=25),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.line = element_line(),
        panel.border = element_blank())




#food_31: soft drink

startdata8<-subset(mydata, !is.na(cat2.food_31))
startdata8<-startdata8[!(startdata8$cat2.food_31==9),]


startdata8$cat2.food_31new <- ifelse(startdata8$cat2.food_31 == 0, "rare", "frequent")


b<-ggplot(startdata8, 
          aes(x = factor(cat2.food_31new), 
              y = res_ln_meth_abso)) +
  geom_violin(aes(fill = factor(cat2.food_31new)),
              trim = FALSE, width=0.6, size = 0.8) +
  scale_fill_manual(values = c("#005293", "#2F74B3")) + # manually set colors
  geom_boxplot(width = .2, 
               fill = "gray81",
               outlier.color = "gray81",
               outlier.size = 2, size = 0.8) + 
  labs(title = "Soft drinks",x="",y="Methanol [res.]")+
  theme_bw() +
  geom_hline(yintercept = 0, linetype = "dashed", size=0.8) +
  theme(plot.title = element_text(size = 20),
        axis.text.x = element_text(size = 15),
        axis.text.y = element_text(size = 15))+
  guides(fill = "none") # add this line to remove the fill legend


g7<- b+
  geom_bracket(
  xmin = "rare", xmax = "frequent", y.position =3.5,
  label = "FDR: 4.9e-03", 
  tip.length = c(0.02, 0.02), vjust = 2,
  label.size = 4
)+
  theme(panel.background = element_rect(fill = NA), # remove panel background fill
        plot.background = element_rect(fill = NA), # remove plot background fill
        plot.title = element_text(size = 20),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 20),
        axis.title.y= element_text (size=25),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.line = element_line(),
        panel.border = element_blank())


#food_11: cooked vegetable	

startdata8<-subset(mydata, !is.na(cat2.food_11))
startdata8<-startdata8[!(startdata8$cat2.food_11==9),]


startdata8$cat2.food_11new <- ifelse(startdata8$cat2.food_11 == 0, "rare", "frequent")


b<-ggplot(startdata8, 
          aes(x = factor(cat2.food_11new), 
              y = res_ln_meth_abso)) +
  geom_violin(aes(fill = factor(cat2.food_11new)),
              trim = FALSE, width=0.6, size = 0.8) +
  scale_fill_manual(values = c("#005293", "#2F74B3")) + # manually set colors
  geom_boxplot(width = .2, 
               fill = "gray81",
               outlier.color = "gray81",
               outlier.size = 2, size = 0.8) + 
  labs(title = "Cooked vegetable",x="",y="Methanol [res.]")+
  theme_bw() +
  theme(plot.title = element_text(size = 25),
        axis.text.x = element_text(size = 25),
        axis.text.y = element_text(size = 25))+
  guides(fill = "none") # add this line to remove the fill legend


h8<- b+
  geom_bracket(
  xmin = "rare", xmax = "frequent", y.position =3.5,
  label = "FDR: 3.2e-02", 
  tip.length = c(0.02, 0.02), vjust = 2,
  label.size = 4
)+
  geom_hline(yintercept = 0, linetype = "dashed", size=0.8) +
  theme( # remove panel background fill
        plot.background = element_rect(fill = NA), # remove plot background fill
        panel.background = element_rect(fill = NA),  # remove plot background fill
        plot.title = element_text(size = 20),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 20),
        axis.title.y= element_text (size=25),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.line = element_line(),
        panel.border = element_blank())

library(gridExtra)


graph1<- grid.arrange(a1,b2,c3,d4,e5,f6,g7,h8, nrow = 2, ncol = 4, padding = unit(2, "cm"))


ggsave("C:/Users/klierk/Documents/November/graph346i456.png", plot = graph1, width = 35, height = 20, units = "cm", dpi = 300, bg="transparent")
```





# Fig. 2 b 
```{r}
extract_beta <- function(x) {
  as.numeric(substr(x, 2, regexpr(",", x)-1))
}


# Neue Spalte "beta" erstellen
finaldataset2$beta <- sapply(finaldataset2$beta_CI, extract_beta)


finaldataset2_methanol <- subset(finaldataset2, metabolites == "Methanol")


finaldataset2_methanol<-finaldataset2_methanol[order(finaldataset2_methanol$beta, finaldataset2_methanol$pvalue),]


finaldataset2_methanol$pvalue<-as.numeric(finaldataset2_methanol$pvalue)
finaldataset2_methanol$FDR<-as.numeric(finaldataset2_methanol$FDR)
library(ggplot2)
betas <- finaldataset2_methanol$beta
pvals <- -log10(finaldataset2_methanol$pvalue)



food_category <- c("1", "",
                   "2", "3",
                   "", "4",
                   "", "5", "",
                   "", "",
                   "", "",
                   "", "", "",
                   "", "",
                   "", "",
                   "", "",
                   "", "", "6", "7",
                   "8", "9",
                   "10", "11", "12", "13", "14")


log10(8.783546e-05)

#install.packages("scales")
library(ggplot2)
library(scales)
#library(cowplot)
#install.packages("patchwork")
library(patchwork)
#install.packages("plotrix") # Install the 'plotrix' package
#install.packages("ggbreak")
#library(plotrix)
library(ggplot2)
library(ggbreak)
#install.packages("cowplot")
library(cowplot)

vulcano_plot2 <- ggplot(data = finaldataset2_methanol, aes(x = betas, y = pvals)) + 
  geom_point(aes(color = ifelse(FDR < 0.05, "FDR < 0.05", ifelse(pvals >= 1.30103, "pvalue < 0.05", "Not significant"))), size = 5) + 
  scale_color_manual(values = c("pvalue < 0.05" = "black", "FDR < 0.05" = "red", "Not significant" = "grey")) + 
  geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "grey", linewidth=2) +
  labs(x = "ß-estimates", y = "-log10(p-value)",
       title = list("Urinary methanol
                    ", size = 200)) +
  theme_classic() +
  theme(plot.margin = unit(c(1, 1, 1, 1), "cm"), 
        axis.title.x = element_text(size = 45), 
        axis.title.y = element_text(size = 45), 
        axis.text.x = element_text(size = 55), 
        axis.text.y = element_text(size = 55),
        legend.text = element_text(size = 40),
        plot.title = element_text(size = 45), 
        panel.border = element_rect(color = "black", fill = NA, size = 2)) +
  geom_text(data = finaldataset2_methanol, aes(x = betas, y = pvals, label = food_category), 
            size = 13, vjust = 1.5, hjust = 0)+
  guides(color = guide_legend(title = NULL, 
                              override.aes = list(shape = 16), 
                              nrow = 1))+
  geom_text(aes(x = 0.16, y = 1.1, label = "p-value = 0.05", hjust = -0.1), size = 9, color = "grey") +
  ylim(c(0,19.5)) # add this line to expand the y-axis to 20


vulcano_plot2
vulcano <- vulcano_plot2 + guides(color = guide_legend(title = NULL, 
                                                       override.aes = list(shape = 20), 
                                                       labels = c("pvalue", "FDR"),
                                                       ncol = 1)) +scale_y_break(breaks = c(5, 18.9))+
  scale_y_continuous(limits = c(0, 20), breaks = c(0, 1, 2, 3, 4, 5, 19, 20)) +
  
   geom_vline(xintercept = 0, linetype = "dashed", color = "gray", linewidth=2)
vulcano


ggsave("C:/Users/klierk/Documents/November/vulcano3.png",plot=vulcano, width = 20, height = 15, units = "in", dpi = 300)
```





# F. Urinary methanol and lifestyle factors


#F.1 Methanol~Basic covariates:
#(globaler p value bei Variablen mit mehr als 2 Ausprägungen oder rcs Anwendung)
```{r}
#F.1.1 sex  (adj. for PQN, ph_u, SEX)
library(magrittr)
library(rms)
library(car)
#dd = datadist(mydata)
#options(datadist = "dd")


Regression_Model<-lm(ln_meth_abso~ 
                       SEX*rcs(AGE_SHIP0,4)
                     +rcs(ln_PQN,4)
                     +ph_u, 
                     na.action = na.exclude,
                     data=mydata)

summary(Regression_Model)

print(Regression_Model)


length(Regression_Model$residuals)

waldtestw <- car::linearHypothesis(Regression_Model, c("SEX:rcs(AGE_SHIP0, 4)AGE_SHIP0", "SEX:rcs(AGE_SHIP0, 4)AGE_SHIP0'", "SEX:rcs(AGE_SHIP0, 4)AGE_SHIP0''"),
                                   type="HC1")

summary(waldtestw)
print(waldtestw)


pglo_w<-waldtestw$"Pr(>F)"[2]
pglo_w


#F.1.2 age  (adj. for PQN, ph_u, SEX)
library(rms)
library(car)
library(sandwich)
Regression_Model_age<-lm(ln_meth_abso~ 
                         rcs(AGE_SHIP0,4)*SEX
                         +rcs(ln_PQN,4)
                         +ph_u
                         ,
                         na.action = na.exclude,
                         data=mydata)

summary(Regression_Model_age)
print(Regression_Model_age)


vartest <- c("rcs(AGE_SHIP0, 4)AGE_SHIP0:SEX", "rcs(AGE_SHIP0, 4)AGE_SHIP0':SEX", "rcs(AGE_SHIP0, 4)AGE_SHIP0'':SEX")

waldtestw <- car::linearHypothesis(Regression_Model_age, vartest, vcov = vcovHC(Regression_Model_age, type="HC1"))
summary(waldtestw)
print(waldtestw)

pglo_w<-waldtestw$"Pr(>F)"[2]
pglo_w

length(Regression_Model_age$residuals)






#F.1.3 waist circumference  (adj. for age, PQN, ph_u, SEX)
library(rms)
Regression_Model_waist<-lm(ln_meth_abso~ 
                              rcs(som_tail,4)
                            + rcs(AGE_SHIP0,4)*SEX
                            +rcs(ln_PQN,4)
                            +ph_u,
                            na.action = na.exclude
                            , data=mydata)

summary(Regression_Model_waist)


#Wald-test
vartest <- c("rcs(som_tail, 4)som_tail","rcs(som_tail, 4)som_tail'","rcs(som_tail, 4)som_tail''")
waldtestw <- car::linearHypothesis(Regression_Model_waist, vartest, vcov = vcovHC(Regression_Model_waist, type="HC1"))
#waldtest<- wald.test(Sigma = vcov(Regression_Model_food), b = coef(Regression_Model_food), Terms = 3:4)
summary(waldtestw)
print(waldtestw)

pglo_w<-waldtestw$"Pr(>F)"[2]
pglo_w
length(Regression_Model_waist$residuals)






#F.1.4 gfr  (waist circumference, adj. for age, PQN, ph_u, SEX)
library(rms)

Regression_Model_gfr<-lm(ln_meth_abso~ 
                        rcs(gfr_mdrd_s0,4)
                      + rcs(AGE_SHIP0,4)*SEX
                      +rcs(ln_PQN,4)
                      +ph_u,
                      na.action = na.exclude
                      , data=mydata)

summary(Regression_Model_gfr)




#Wald-test
vartest <- c("rcs(gfr_mdrd_s0, 4)gfr_mdrd_s0''","rcs(gfr_mdrd_s0, 4)gfr_mdrd_s0'","rcs(gfr_mdrd_s0, 4)gfr_mdrd_s0")

waldtestw <- car::linearHypothesis(Regression_Model_gfr, vartest, vcov = vcovHC(Regression_Model_gfr, type="HC1"))
summary(waldtestw)
print(waldtestw)

pglo_w<-waldtestw$"Pr(>F)"[2]
pglo_w
length(Regression_Model$residuals)
#0.01369 *
```



#F.2 Methanol~Behaviour covariates:
#F.2.1 smoking (adj. for waist circumference,age, PQN, ph_u, SEX)

```{r}
library(rms)
Regression_Model_smo<-lm(ln_meth_abso~ 
                     +csmoking_s0
                     +alcg7d_s0*SEX
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +edyrs_s0
                     +physact_s0
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model_smo)
length(Regression_Model_smo$residuals)

intervals <- confint(Regression_Model_smo)

lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]

results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model_smo)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model_smo)$coefficients[2,4], 20), nsmall = 20)
)

results 

p_value_intercept <- summary(Regression_Model_smo)$coefficients[2,4]
p_value_intercept




a<-coeftest(Regression_Model_smo, vcov = vcovHC(Regression_Model_smo, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model_smo)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model_smo)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```


#Extended Data Fig. S3: Graph smoking

```{r}

#2.1.1 smoking (adj. for waist circumference,age, PQN, ph_u, SEX)

library(rms)
for (i in 429){
  Regression_Model_smo<-lm(mydata[,i]~ +alcg7d_s0*SEX
                       +rcs(gfr_mdrd_s0,4)
                       +rcs(som_tail,4)
                       +rcs(ln_PQN,4)
                       +edyrs_s0
                       +physact_s0
                       +ph_u
                       +rcs(AGE_SHIP0,4)*SEX,
                       na.action = na.exclude, data=mydata)
  summary(Regression_Model_smo)
  empty_list[[i-428]] <- Regression_Model_smo
  
  Residuals<-(-1)*(fitted(Regression_Model_smo)-mydata[, i])
  mydata[, paste("ressm_", colnames(mydata)[i], sep="")] <- Residuals
  
  # print(qplot(fitted.values(Regression_Model),residuals(Regression_Model))+geom_smooth(formula = y ~ x,method="lm",se=F))
}

  
  
  
  # print(qplot(fitted.values(Regression_Model),residuals(Regression_Model))+geom_smooth(formula = y ~ x,method="lm",se=F))


mydata$ressm_ln_crea_abso
# print(qplot(fitted.values(Regression_Model),residuals(Regression_Model))+geom_smooth(formula = y ~ x,method="lm",se=F))

#install.packages("ggforce")
#install.packages("ggforce", version = "0.3.1")
library(ggplot2)
library(ggforce)
#install.packages("ggbracket")
#library(ggbracket)

library(ggplot2)
library(ggforce)
library(ggplot2)
#install.packages("ggalt")
#library(ggalt)

update.packages("ggplot2")
library("ggplot2")

#smoking

mydata30 <- subset(mydata, !is.na(csmoking_s0))

startdata8 <- mydata30[!(mydata30$csmoking_s0 == 9),]


startdata8$csmoking_s0 <- ifelse(startdata8$csmoking_s0 == 0, "no smoker", "smoker")

update.packages("ggplot2")
library(ggplot2)
startdata8$ressm_ln_meth_abso




b <- ggplot(startdata8, 
            aes(x = factor(csmoking_s0), 
                y = ressm_ln_meth_abso)) +
  geom_violin(aes(fill = factor(csmoking_s0)),
              trim = FALSE, width = 0.6, size = 0.8, draw_quantiles = TRUE) +
  scale_fill_manual(values = c("#005293", "#2F74B3")) + # manually set colors
  geom_boxplot(width = .2, 
               fill = "gray81",
               outlier.color = "gray81",
               outlier.size = 2, size = 0.8) +
  labs(title = "SHIP Study", x = "", y = "Methanol [res.]") +
  theme_bw() +
  theme(plot.title = element_text(size = 15),
        axis.text.x = element_text(size = 15),
        axis.text.y = element_text(size = 15))+
  guides(fill = "none") # add this line to remove the fill legend


#update.packages("ggalt")
#library(ggalt)
#install.packages("ggplot2")
library(ggplot2)
library(ggforce)
update.packages("ggplot2")
#install.packages("ggplot2")
library(ggplot2)
library(ggpubr)
smoking1 <- b + geom_bracket(
  xmin = "no smoker", xmax = "smoker", y.position =4,
  label = "FDR: 1.71e-23", 
  tip.length = c(0.02, 0.02), vjust = 2,
  label.size = 4
)+
  geom_hline(yintercept = 0, linetype = "dashed", size=0.8) +
  theme_bw() +
  theme(panel.background = element_rect(fill = NA), # remove panel background fill
        plot.background = element_rect(fill = NA), # remove plot background fill
        plot.title = element_text(size = 20),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 20),
        axis.title.y= element_text (size=25),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.line = element_line(),
        panel.border = element_blank())

smoking1


# Rename the x-axis labels
ggsave("B:/Methanol_project/smoking_ship.png", plot = smoking1, width = 9, height = 10, units = "cm", dpi = 300)
```





#F.2.2 alcohol (adj. for waist circumference,age, PQN, ph_u, SEX)
```{r}
library(rms)
mydata$alcg7d_s0<-as.numeric(mydata$alcg7d_s0)
is.numeric(mydata$gfr_mdrd_s0)
is.numeric(mydata$som_tail)
is.numeric(mydata$ln_PQN)
is.numeric(mydata$AGE_SHIP0)
mydata$ph_u<-as.numeric(mydata$ph_u)


Regression_Model<-lm(ln_meth_abso~ 
                       alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +edyrs_s0
                     +physact_s0
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)
length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]

p_value_intercept




a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```


#F.2.3 education (adj., waist circumference,age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +physact_s0
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)

length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept






a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```


#F.2.4 physical inactivity (adj., waist circumference,age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)


length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept



a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 

```




#F.3 Methanol- pyhsiologische parameter
#F.3.1 tg(adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       log(tg_s)
                     +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)

length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept


a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 

```



#F.3.2 log(crp) (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
mydata$crp_hs<-as.numeric(mydata$crp_hs)
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       log(crp_hs)
                     +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)


length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept




a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```




#F.3.3 log(ggt) (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
mydata$crp_hs<-as.numeric(mydata$crp_hs)
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       log(ggt_s)+
                       +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)

length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept



a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```



#F.3.4 wbc (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       wbc+
                       +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)

length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)

results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept







a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```




#F.3.5 rbc (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       rbc+
                       +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)

length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept



a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```



#F.3.6 hdl_s (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}

mydata$hdl_s<-as.numeric(mydata$hdl_s)

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       hdl_s+
                       +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)


length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept



a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```




#F.3.7 ldl_s (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
mydata$ldl_s<-as.numeric(mydata$ldl_s)

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       ldl_s+
                       +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)

length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept






a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```



#F.3.8 hba1c (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
mydata$hba1c<-as.numeric(mydata$hba1c)

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       hba1c+
                       +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)



length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept







a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 

```







#F.4 Methanol~ clinical phenotypes
#F.4.1 diabetes_s0 (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       factor(diabetes_s0)+
                       +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)


length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept






a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```




#F.4.2 hypertension (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       hyp_s0 +
                       +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)


length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept






a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```




#F.4.3 metabolisches syndrom (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       metsyn_s0 +
                       +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)


length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept



  


a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```



#F.4.4 MI (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)
````{r}
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       mi +
                       +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)


length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept




a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```



#F.4.4 CKD (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
mydata$gfr_mdrd_s02<-mydata$gfr_mdrd_s0


mydata$gfr_mdrd_s02[mydata$gfr_mdrd_s02<61 ] <- 1
mydata$gfr_mdrd_s02[mydata$gfr_mdrd_s02>60 ] <- 2

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       gfr_mdrd_s02 #Jetzt formatierte Variable CKD
                       +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     #  +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)

length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept





a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```


#F.4.5 Calculating FDR
```{r}

test=c(5.78e-04,
       8.03e-04,
       1.62e-02,
       1.39e-02,
       
       8.13e-25,
       4.27e-08,
       7.67e-05,   
       2.57e-10,
       
       0.256921,
       0.881832,
       0.815578,
       0.097901,
       0.029723,
       0.803475,
       0.237385,
       0.024992,
       
       0.6453210,
       0.0784536,
       0.2217300,
       0.73100350,
       0.41363602
)



rounden<-p.adjust(test, method = "fdr")
rounden

```





#G.  Incremental R²
```{r}
r_squared_results <- list()

calculate_r_squared <- function(model) {
  adjusted_r_squared <- summary(model)$adj.r.squared
  r_squared_results[[length(r_squared_results) + 1]] <- adjusted_r_squared
}



Regression_Model<-lm(ln_meth_abso~ 
                       +rcs(ln_PQN,4)
                     +ph_u, 
                     na.action = na.exclude,
                     data=mydata)

summary(Regression_Model)

PQN<-calculate_r_squared(Regression_Model)
PQN
0.4752127431



# sex and age (adj. for PQN, ph_u)
library(magrittr)
library(rms)
library(car)
#dd = datadist(mydata)
#options(datadist = "dd")
Regression_Model<-lm(ln_meth_abso~ 
                       SEX*rcs(AGE_SHIP0,4)
                     +rcs(ln_PQN,4)
                     +ph_u, 
                     na.action = na.exclude,
                     data=mydata)

summary(Regression_Model)


intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)


sex<-calculate_r_squared(Regression_Model)
sex



sex_age<-sex-PQN
sex_age
#sex and age - PQN ph



# waist circumference  (adj. for age, PQN, ph_u, SEX)
library(rms)
Regression_Model_waist<-lm(ln_meth_abso~ 
                             rcs(som_tail,4)
                           + rcs(AGE_SHIP0,4)*SEX
                           +rcs(ln_PQN,4)
                           +ph_u,
                           na.action = na.exclude
                           , data=mydata)

summary(Regression_Model_waist)


waist<-calculate_r_squared(Regression_Model_waist)
waist-sex

#waist- PQN ph age sex
0.4958094244-0.4945675022 
#0.001442582196563013674506



# gfr  (waist circumference, adj. for age, PQN, ph_u, SEX)
library(rms)
Regression_Model_gfr<-lm(ln_meth_abso~ 
                           rcs(gfr_mdrd_s0,4)
                         + rcs(AGE_SHIP0,4)*SEX
                         +rcs(ln_PQN,4)
                         +ph_u,
                         na.action = na.exclude
                         , data=mydata)

summary(Regression_Model_gfr)

gfr<-calculate_r_squared(Regression_Model_gfr)
gfr

gfr-waist

0.4958094244
#eGFR- PQN ph age sex
0.4955070999-0.4958094244 #PQN age sex






####All Basic covariates

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                         +rcs(gfr_mdrd_s0,4)
                         +rcs(som_tail,4)
                         +rcs(ln_PQN,4)
                         +ph_u
                         +rcs(AGE_SHIP0,4)*SEX,
                         na.action = na.exclude, data=mydata)

All_b<-calculate_r_squared(Regression_Model)
All_b
#old0.4982118489878328837506
0.4965924435




#Methanol~Behaviour covariates:
# smoking (adj. for waist circumference,age, PQN, ph_u, SEX)
library(rms)
Regression_Model_smo<-lm(ln_meth_abso~ 
                           csmoking_s0
                         +rcs(gfr_mdrd_s0,4)
                         +rcs(som_tail,4)
                         +rcs(ln_PQN,4)
                         +ph_u
                         +rcs(AGE_SHIP0,4)*SEX,
                         na.action = na.exclude, data=mydata)

summary(Regression_Model_smo)
smo<-calculate_r_squared(Regression_Model_smo)
smo
smo-All_b
#smoking- PQN ph age sex eGFR waistc
0.512796116-0.4965924435



#alcohol (adj. for waist circumference,age, PQN, ph_u, SEX)
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                           alcg7d_s0*SEX
                         +rcs(gfr_mdrd_s0,4)
                         +rcs(som_tail,4)
                         +rcs(ln_PQN,4)
                         +ph_u
                         +rcs(AGE_SHIP0,4)*SEX,
                         na.action = na.exclude, data=mydata)

summary(Regression_Model)
alc<-calculate_r_squared(Regression_Model)
alc

alc-All_b
#smoking- PQN ph age sex eGFR waistc
0.5023410891-0.4965924435




#education (adj., waist circumference,age, PQN, ph_u, SEX)
Regression_Model<-lm(ln_meth_abso~ 
                       edyrs_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)
edu<-calculate_r_squared(Regression_Model)
edu

edu-All_b
#education- PQN ph age sex eGFR waistc
0.5068872174-0.4965924435




#physical activity (adj., waist circumference,age, PQN, ph_u, SEX)

Regression_Model<-lm(ln_meth_abso~ 
                       physact_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)
pa<-calculate_r_squared(Regression_Model)
pa

pa-All_b
#education- PQN ph age sex eGFR waistc
0.5017508985-0.4965924435
#0.004565901140238137756455





#Methanol- pyhsiologische parameter


####All Basic covariates

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX
                     +physact_s0
                     +edyrs_s0
                     +csmoking_s0
                     +alcg7d_s0*SEX
                     ,
                     na.action = na.exclude, data=mydata)

All_phy<-calculate_r_squared(Regression_Model)
All_phy
0.5272364935



#tg(adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       log(tg_s)
                     +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)

tg<-calculate_r_squared(Regression_Model)
tg

tg-All_phy

#tg- PQN ph age sex eGFR waistc smoking alcohol PA education
0.52742327-0.5272364935




#log(crp) (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)


mydata$crp_hs<-as.numeric(mydata$crp_hs)
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       log(crp_hs)
                     +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)

crp<-calculate_r_squared(Regression_Model)
crp
crp-All_phy

#crp- PQN ph age sex eGFR waistc smoking alcohol PA education
0.526788736-0.5272364935





# log(ggt) (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)

mydata$crp_hs<-as.numeric(mydata$crp_hs)
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       log(ggt_s)+
                       +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)
ggt<-calculate_r_squared(Regression_Model)
ggt

ggt-All_phy
#ggt- PQN ph age sex eGFR waistc smoking alcohol PA education
0.5278098044-0.5272364935





#wbc (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       wbc+
                       +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)

wbc_2<-calculate_r_squared(Regression_Model)
wbc_2

wbc_2-All_phy
#wbc- PQN ph age sex eGFR waistc smoking alcohol PA education
0.5272488642-0.5272364935






#rbc (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       rbc+
                       +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)

rbc<-calculate_r_squared(Regression_Model)
rbc

rbc-All_phy
#rbc- PQN ph age sex eGFR waistc smoking alcohol PA education
0.5274287335-0.5272364935






#hdl_s (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)

mydata$hdl_s<-as.numeric(mydata$hdl_s)

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       hdl_s+
                       +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)

hdl<-calculate_r_squared(Regression_Model)
hdl
hdl-All_phy


#hdl- PQN ph age sex eGFR waistc smoking alcohol PA education
0.5265700414-0.5272364935



#ldl_s (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)

mydata$ldl_s<-as.numeric(mydata$ldl_s)

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       ldl_s+
                       +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)

ldl<-calculate_r_squared(Regression_Model)
ldl

ldl-All_phy
#ldl- PQN ph age sex eGFR waistc smoking alcohol PA education
0.5267051814-0.5272364935




#hba1c (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)

mydata$hba1c<-as.numeric(mydata$hba1c)

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       hba1c+
                       +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)

hba1c<-calculate_r_squared(Regression_Model)
hba1c

hba1c-All_phy

#hba1c- PQN ph age sex eGFR waistc smoking alcohol PA education
0.5273695439-0.5272364935




#Methanol~ clinical phenotypes
# diabetes_s0 (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       factor(diabetes_s0)+
                       +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)

diab<-calculate_r_squared(Regression_Model)
diab

diab-All_phy
#dia- PQN ph age sex eGFR waistc smoking alcohol PA education
0.5271462031-0.5272364935





# Methanol~ clinical phenotypes
# hypertension (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       hyp_s0 +
                       +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)

hyp<-calculate_r_squared(Regression_Model)
hyp

hyp-All_phy
#hyp- PQN ph age sex eGFR waistc smoking alcohol PA education
0.5277704382-0.5272364935



# metabolisches syndrom (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)


library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       metsyn_s0 +
                       +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)

MetS<-calculate_r_squared(Regression_Model)
MetS

MetS-All_phy

#MetS- PQN ph age sex eGFR waistc smoking alcohol PA education
0.5269722836-0.5272364935



# MI (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       mi +
                       factor(diabetes_s0)+
                       +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)

MI<-calculate_r_squared(Regression_Model)
MI

MI-All_phy
#MetS- PQN ph age sex eGFR waistc smoking alcohol PA education
0.5270412379-0.5272364935





# CKD (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                     rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX
                     +physact_s0
                     +edyrs_s0
                     +csmoking_s0
                     +alcg7d_s0*SEX
                     ,
                     na.action = na.exclude, data=mydata)

All_phy_noGFR<-calculate_r_squared(Regression_Model)
All_phy_noGFR

0.5282149168644478809398
0.5282149


mydata$gfr_mdrd_s02<-mydata$gfr_mdrd_s0
mydata$gfr_mdrd_s02[mydata$gfr_mdrd_s02<61 ] <- 1
mydata$gfr_mdrd_s02[mydata$gfr_mdrd_s02>60 ] <- 2

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       gfr_mdrd_s02 #Jetzt formatierte Variable CKD
                     +
                       +physact_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     #  +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP0,4)*SEX,
                     na.action = na.exclude, data=mydata)

summary(Regression_Model)
CKD<-calculate_r_squared(Regression_Model)
CKD


CKD-All_phy_noGFR
#CKD- PQN ph age sex waistc smoking alcohol PA education
0.5271440076- 0.5272364935

```







#H.Urinary methanol and mortality rates

#H.1 Residuals for methanol (PQN)
```{r}

update.packages("dplyr")
#install.packages("rms")

empty_list <- vector(mode = "list", length = 60-2)
pval <- c()
probandid <- c()

mydata$gfr_mdrd_s0[mydata$gfr_mdrd_s0==".n"] <- NA

library(rms)
for (i in 429){
  Regression_Model<-lm(mydata[,i]~rcs(mydata$ln_PQN,4),
                       na.action = na.exclude)
  summary(Regression_Model)
  empty_list[[i-428]] <- Regression_Model
  pval <- c(pval,summary(Regression_Model)$coefficients[4,4])
  
  probandid <- c(probandid, mydata$proband[i])
  Residuals<-(-1)*(fitted(Regression_Model)-mydata[, i])
  mydata[, paste("res_cox_", colnames(mydata)[i], sep="")] <- Residuals
  
  # print(qplot(fitted.values(Regression_Model),residuals(Regression_Model))+geom_smooth(formula = y ~ x,method="lm",se=F))
}

  mydata$tg_s<-as.numeric(mydata$tg_s)
  getwd()
#  write.xlsx(mydata, "mydata.xlsx")
 # write.csv(mydata, "mydata.csv")
  
```

####
#H.2 FIRST MODEL
#H.2.1 Mortality all
```{r}

  library(survival)
  library(rms)

  #p-value (linearity)
  mydata$ph_u<-as.numeric(mydata$ph_u)
  
  cox_model <- coxph(Surv(mort_time, mort_all) ~ ln_meth_abso
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(AGE_SHIP0,4)*SEX
                     +som_tail
                     +mi
                     +hyp_s0
                     +diabetes_s0
                     +chol_hdl_s0
                     +tg_s
                     +wbc
                     +rbc
                     ,na.action = na.exclude
                     ,data = mydata)
  cox_model
  summary(cox_model)
  
  quantile(mydata$AGE_SHIP0)
  
  ### Testing proportion assumption ### 
  cox.zph(cox_model)
  
  #options(show.signif.stars = FALSE) # display statistical intelligence
  vfit <- cox.zph(cox_model)
  vfit
  
  
  plot(vfit)
  age<-plot(vfit[5])
  sex<-plot(vfit[6])
  age_sex<-plot(vfit[14])
  
  for (j in 1:14) {
    plot(cox.zph(cox_model)[j])
    abline(h = 0, col = 2)
  }
  
  
  #NON-Linearity
  # Conducting the Cox proportional hazards model with RCS terms
  cox_model <- coxph(Surv(mort_time, mort_all) ~ rcs(ln_meth_abso, 4)
                     +rcs(ln_PQN, 4)
                     +ph_u
                     +rcs(gfr_mdrd_s0, 4)
                     +rcs(AGE_SHIP0, 4)*SEX
                     +som_tail
                     +mi
                     +hyp_s0
                     +diabetes_s0
                     +chol_hdl_s0
                     +tg_s
                     +wbc
                     +rbc,
                     na.action = na.exclude,
                     data = mydata)
  
  cox_model
  summary(cox_model)
  
  # Testing non-linearity using the Wald test
  library(car)
  vartest <- c("rcs(ln_meth_abso, 4)ln_meth_abso","rcs(ln_meth_abso, 4)ln_meth_abso'")
  waldtest_nonl <- linearHypothesis(cox_model, vartest,  test="Chisq")
  pval_nonl <- waldtest_nonl$Pr[2]
  pval_nonl
  
  
  
  
  ####GLOBAL
  cox_model <- coxph(Surv(mort_time, mort_all) ~ rcs(ln_meth_abso, 4)
                     +rcs(ln_PQN, 4)
                     +ph_u
                     +rcs(gfr_mdrd_s0, 4)
                     +rcs(AGE_SHIP0, 4)*SEX
                     +som_tail
                     +mi
                     +hyp_s0
                     +diabetes_s0
                     +chol_hdl_s0
                     +tg_s
                     +wbc
                     +rbc,
                     na.action = na.exclude,
                     data = mydata)
  
  # Testing non-linearity using the Wald test
  library(car)
  vartest <- c("rcs(ln_meth_abso, 4)ln_meth_abso","rcs(ln_meth_abso, 4)ln_meth_abso'","rcs(ln_meth_abso, 4)ln_meth_abso''")
  waldtest_nonl <- linearHypothesis(cox_model, vartest, test="Chisq")
  pval_nonl <- waldtest_nonl$Pr[2]
  pval_nonl
  car::Anova(cox_model, test.statistic = "Wald")
```
  
#H.2.2 Mortality CVD
```{r}
  library(rms)
  #adj. Model I
  #p-value (linearity)
  cox_model <- coxph(Surv(mort_time, mort_cvd) ~ ln_meth_abso
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(AGE_SHIP0,4)*SEX
                     +som_tail
                     +mi
                     +hyp_s0
                     +diabetes_s0
                     +chol_hdl_s0
                     +tg_s
                     +wbc
                     +rbc
                     ,na.action = na.exclude
                     ,data = mydata)
  
  cox_model
  summary(cox_model)
  
  
  #Testing proportion assumption
  cox.zph(cox_model)
  for (j in 1:14) {
    plot(cox.zph(cox_model)[j])
    abline(h = 0, col = 2)
  }
  
  
  #NON-Linearity
  # Conducting the Cox proportional hazards model with RCS terms
  cox_model <- coxph(Surv(mort_time, mort_cvd) ~ rcs(ln_meth_abso, 4)
                     +rcs(ln_PQN, 4)
                     +ph_u
                     +rcs(gfr_mdrd_s0, 4)
                     +rcs(AGE_SHIP0, 4)*SEX
                     +som_tail
                     +mi
                     +hyp_s0
                     +diabetes_s0
                     +chol_hdl_s0
                     +tg_s
                     +wbc
                     +rbc,
                     na.action = na.exclude,
                     data = mydata)
  
  # Testing non-linearity using the Wald test
  library(car)
  vartest <- c("rcs(ln_meth_abso, 4)ln_meth_abso","rcs(ln_meth_abso, 4)ln_meth_abso'")
  waldtest_nonl <- linearHypothesis(cox_model, vartest,  test="Chisq")
  pval_nonl <- waldtest_nonl$Pr[2]
  pval_nonl
  
  
  
  
  ####GLOBAL
  cox_model <- coxph(Surv(mort_time, mort_cvd) ~ rcs(ln_meth_abso, 4)
                     +rcs(ln_PQN, 4)
                     +ph_u
                     +rcs(gfr_mdrd_s0, 4)
                     +rcs(AGE_SHIP0, 4)*SEX
                     +som_tail
                     +mi
                     +hyp_s0
                     +diabetes_s0
                     +chol_hdl_s0
                     +tg_s
                     +wbc
                     +rbc,
                     na.action = na.exclude,
                     data = mydata)
  
  # Testing non-linearity using the Wald test
  library(car)
  vartest <- c("rcs(ln_meth_abso, 4)ln_meth_abso","rcs(ln_meth_abso, 4)ln_meth_abso'","rcs(ln_meth_abso, 4)ln_meth_abso''")
  waldtest_nonl <- linearHypothesis(cox_model, vartest, test="Chisq")
  pval_nonl <- waldtest_nonl$Pr[2]
  pval_nonl
  
  car::Anova(cox_model, test.statistic = "Wald")
```  
  
  
  
  
#H.2.3 Mortality Cancer
```{r}  
  library(rms)
  #adj. Model I
  #p-value (linearity)
  cox_model <- coxph(Surv(mort_time, mort_ca) ~ ln_meth_abso
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(AGE_SHIP0,4)*SEX
                     +som_tail
                     +mi
                     +hyp_s0
                     +diabetes_s0
                     +chol_hdl_s0
                     +tg_s
                     +wbc
                     +rbc
                     ,na.action = na.exclude
                     ,data = mydata)
  
  cox_model
  summary(cox_model)
  
  
  #Testing proportion assumption
  cox.zph(cox_model)
  for (j in 1:14) {
    plot(cox.zph(cox_model)[j])
    abline(h = 0, col = 2)
  }
  
  
  #NON-Linearity
  # Conducting the Cox proportional hazards model with RCS terms
  cox_model <- coxph(Surv(mort_time, mort_ca) ~ rcs(ln_meth_abso, 4)
                     +rcs(ln_PQN, 4)
                     +ph_u
                     +rcs(gfr_mdrd_s0, 4)
                     +rcs(AGE_SHIP0, 4)*SEX
                     +som_tail
                     +mi
                     +hyp_s0
                     +diabetes_s0
                     +chol_hdl_s0
                     +tg_s
                     +wbc
                     +rbc,
                     na.action = na.exclude,
                     data = mydata)
  
  # Testing non-linearity using the Wald test
  library(car)
  vartest <- c("rcs(ln_meth_abso, 4)ln_meth_abso","rcs(ln_meth_abso, 4)ln_meth_abso'")
  waldtest_nonl <- linearHypothesis(cox_model, vartest,  test="Chisq")
  pval_nonl <- waldtest_nonl$Pr[2]
  pval_nonl
  
  
  
  
  ####GLOBAL
  cox_model <- coxph(Surv(mort_time, mort_ca) ~ rcs(ln_meth_abso, 4)
                     +rcs(ln_PQN, 4)
                     +ph_u
                     +rcs(gfr_mdrd_s0, 4)
                     +rcs(AGE_SHIP0, 4)*SEX
                     +som_tail
                     +mi
                     +hyp_s0
                     +diabetes_s0
                     +chol_hdl_s0
                     +tg_s
                     +wbc
                     +rbc,
                     na.action = na.exclude,
                     data = mydata)
  
  # Testing non-linearity using the Wald test
  library(car)
  vartest <- c("rcs(ln_meth_abso, 4)ln_meth_abso","rcs(ln_meth_abso, 4)ln_meth_abso'","rcs(ln_meth_abso, 4)ln_meth_abso''")
  waldtest_nonl <- linearHypothesis(cox_model, vartest, test="Chisq")
  pval_nonl <- waldtest_nonl$Pr[2]
  pval_nonl
  car::Anova(cox_model, test.statistic = "Wald")

``` 
  
  
  
#H.3. SECOND MODEL
#H.3.1 Mortality all
```{r}
  #install.packages("survival")
  library(survival)
  library(rms)
  #adj. Model I
  #p-value (linearity)
mydata$alcg7d_s0<-as.numeric(mydata$alcg7d_s0)
  cox_model <- coxph(Surv(mort_time, mort_all) ~ ln_meth_abso
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(AGE_SHIP0,4)*SEX
                     +som_tail
                     +mi
                     +hyp_s0
                     +diabetes_s0
                     +chol_hdl_s0
                     +tg_s
                     +wbc
                     +rbc
                     +physact_s0
                     #+log(ggt_s)
                     +edyrs_s0
                     +csmoking_s0
                     +alcg7d_s0*SEX
                     +factor(dschlaf)
                     ,na.action = na.exclude
                     ,data = mydata)
  
  cox_model
  summary(cox_model)
  
  library(survival)
  library(rms)
  #Testing proportion assumption
  cox.zph(cox_model)
  for (j in 1:14) {
    plot(cox.zph(cox_model)[j])
    abline(h = 0, col = 2)
  }
  
  
  #NON-Linearity
  # Conducting the Cox proportional hazards model with RCS terms
  cox_model <- coxph(Surv(mort_time, mort_all) ~ rcs(ln_meth_abso, 4)
                     +rcs(ln_PQN, 4)
                     +ph_u
                     +rcs(gfr_mdrd_s0, 4)
                     +rcs(AGE_SHIP0, 4)*SEX
                     +som_tail
                     +mi
                     +hyp_s0
                     +diabetes_s0
                     +chol_hdl_s0
                     +tg_s
                     +physact_s0
                     #+log(ggt_s)
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +factor(dschlaf)
                     +csmoking_s0
                     +wbc
                     +rbc,
                     na.action = na.exclude,
                     data = mydata)
  
  # Testing non-linearity using the Wald test
  library(car)
  vartest <- c("rcs(ln_meth_abso, 4)ln_meth_abso","rcs(ln_meth_abso, 4)ln_meth_abso'")
  waldtest_nonl <- linearHypothesis(cox_model, vartest,  test="Chisq")
  pval_nonl <- waldtest_nonl$Pr[2]
  pval_nonl
  
  
  
  ####GLOBAL
  cox_model <- coxph(Surv(mort_time, mort_all) ~ rcs(ln_meth_abso, 4)
                     +rcs(ln_PQN, 4)
                     +ph_u
                     +rcs(gfr_mdrd_s0, 4)
                     +rcs(AGE_SHIP0, 4)*SEX
                     +som_tail
                     +mi
                     +hyp_s0
                     +diabetes_s0
                     +chol_hdl_s0
                     +tg_s
                     +physact_s0
                     #+log(ggt_s)
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +factor(dschlaf)
                     +csmoking_s0
                     +wbc
                     +rbc,
                     na.action = na.exclude,
                     data = mydata)
  
  # Testing non-linearity using the Wald test
  library(car)
  vartest <- c("rcs(ln_meth_abso, 4)ln_meth_abso","rcs(ln_meth_abso, 4)ln_meth_abso'","rcs(ln_meth_abso, 4)ln_meth_abso''")
  waldtest_nonl <- linearHypothesis(cox_model, vartest, test="Chisq")
  pval_nonl <- waldtest_nonl$Pr[2]
  pval_nonl
  car::Anova(cox_model, test.statistic = "Wald")
```  
  
  
#H.3.2 Mortality CVD
```{r}
  library(rms)
  #adj. Model I
  #p-value (linearity)
  cox_model <- coxph(Surv(mort_time, mort_cvd) ~ ln_meth_abso
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(AGE_SHIP0,4)*SEX
                     +som_tail
                     +mi
                     +hyp_s0
                     +diabetes_s0
                     +chol_hdl_s0
                     +tg_s
                     +physact_s0
                    # +log(ggt_s)
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +dschlaf
                     +csmoking_s0
                     +wbc
                     +rbc
                     ,na.action = na.exclude
                     ,data = mydata)
  
  cox_model
  summary(cox_model)
  
  
  
  
  #Testing proportion assumption
  cox.zph(cox_model)
  for (j in 1:14) {
    plot(cox.zph(cox_model)[j])
    abline(h = 0, col = 2)
  }
  
  
  #NON-Linearity
  # Conducting the Cox proportional hazards model with RCS terms
  cox_model <- coxph(Surv(mort_time, mort_cvd) ~ rcs(ln_meth_abso, 4)
                     +rcs(ln_PQN, 4)
                     +ph_u
                     +rcs(gfr_mdrd_s0, 4)
                     +rcs(AGE_SHIP0, 4)*SEX
                     +som_tail
                     +mi
                     +hyp_s0
                     +diabetes_s0
                     +chol_hdl_s0
                     +tg_s
                     +physact_s0
                     #+log(ggt_s)
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +dschlaf
                     +wbc
                     +rbc
                     +csmoking_s0
                     ,na.action = na.exclude,
                     data = mydata)
  
  # Testing non-linearity using the Wald test
  library(car)
  vartest <- c("rcs(ln_meth_abso, 4)ln_meth_abso","rcs(ln_meth_abso, 4)ln_meth_abso'")
  waldtest_nonl <- linearHypothesis(cox_model, vartest,  test="Chisq")
  pval_nonl <- waldtest_nonl$Pr[2]
  pval_nonl
  
  
  
  ####GLOBAL
  cox_model <- coxph(Surv(mort_time, mort_cvd) ~ rcs(ln_meth_abso, 4)
                     +rcs(ln_PQN, 4)
                     +ph_u
                     +rcs(gfr_mdrd_s0, 4)
                     +rcs(AGE_SHIP0, 4)*SEX
                     +som_tail
                     +mi
                     +hyp_s0
                     +diabetes_s0
                     +chol_hdl_s0
                     +tg_s
                     +physact_s0
                     #+log(ggt_s)
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +dschlaf
                     +csmoking_s0
                     +wbc
                     +rbc,
                     na.action = na.exclude,
                     data = mydata)
  
  # Testing non-linearity using the Wald test
  library(car)
  vartest <- c("rcs(ln_meth_abso, 4)ln_meth_abso","rcs(ln_meth_abso, 4)ln_meth_abso'","rcs(ln_meth_abso, 4)ln_meth_abso''")
  waldtest_nonl <- linearHypothesis(cox_model, vartest, test="Chisq")
  pval_nonl <- waldtest_nonl$Pr[2]
  pval_nonl
  
  car::Anova(cox_model, test.statistic = "Wald")
  
```
  
  
  
  
  
#H.3.3 Mortality Cancer
```{r}
  library(rms)
  #adj. Model I
  #p-value (linearity)
  cox_model <- coxph(Surv(mort_time, mort_ca) ~ ln_meth_abso
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(gfr_mdrd_s0,4)
                     +rcs(AGE_SHIP0,4)*SEX
                     +som_tail
                     +mi
                     +hyp_s0
                     +diabetes_s0
                     +chol_hdl_s0
                     +tg_s
                     +wbc
                     +rbc
                     +physact_s0
                    # +log(ggt_s)
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +factor(dschlaf)
                     +csmoking_s0
                     ,na.action = na.exclude
                     ,data = mydata)
  
  cox_model
  summary(cox_model)
  
  
  
  #Testing proportion assumption
  cox.zph(cox_model)
  for (j in 1:14) {
    plot(cox.zph(cox_model)[j])
    abline(h = 0, col = 2)
  }
  
  
  #NON-Linearity
  # Conducting the Cox proportional hazards model with RCS terms
  cox_model <- coxph(Surv(mort_time, mort_ca) ~ rcs(ln_meth_abso, 4)
                     +rcs(ln_PQN, 4)
                     +ph_u
                     +rcs(gfr_mdrd_s0, 4)
                     +rcs(AGE_SHIP0, 4)*SEX
                     +som_tail
                     +mi
                     +hyp_s0
                     +diabetes_s0
                     +chol_hdl_s0
                     +tg_s
                     +physact_s0
                     #+log(ggt_s)
                     +csmoking_s0
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +factor(dschlaf)
                     +wbc
                     +rbc,
                     na.action = na.exclude,
                     data = mydata)
  
  # Testing non-linearity using the Wald test
  library(car)
  vartest <- c("rcs(ln_meth_abso, 4)ln_meth_abso","rcs(ln_meth_abso, 4)ln_meth_abso'")
  waldtest_nonl <- linearHypothesis(cox_model, vartest,  test="Chisq")
  pval_nonl <- waldtest_nonl$Pr[2]
  pval_nonl
  
  
  
  
  ####GLOBAL
  cox_model <- coxph(Surv(mort_time, mort_ca) ~ rcs(ln_meth_abso, 4)
                     +rcs(ln_PQN, 4)
                     +ph_u
                     +rcs(gfr_mdrd_s0, 4)
                     +rcs(AGE_SHIP0, 4)*SEX
                     +som_tail
                     +mi
                     +hyp_s0
                     +diabetes_s0
                     +chol_hdl_s0
                     +tg_s
                     +physact_s0
                     #+log(ggt_s)
                     +edyrs_s0
                     +alcg7d_s0*SEX
                     +csmoking_s0
                     +factor(dschlaf)
                     +wbc
                     +rbc,
                     na.action = na.exclude,
                     data = mydata)
  
  # Testing non-linearity using the Wald test
  library(car)
  vartest <- c("rcs(ln_meth_abso, 4)ln_meth_abso","rcs(ln_meth_abso, 4)ln_meth_abso'","rcs(ln_meth_abso, 4)ln_meth_abso''")
  waldtest_nonl <- linearHypothesis(cox_model, vartest, test="Chisq")
  pval_nonl <- waldtest_nonl$Pr[2]
  pval_nonl
  
  car::Anova(cox_model, test.statistic = "Wald")
  
  #in case not numerical unusal but possible in this step 
  mydata$res_cox_ln_meth_abso<- as.numeric(mydata$res_cox_ln_meth_abso)
```
  
  
  
#H.4 KAPLAN_Meier_Curve
#H.4.1 Mortality all
```{r}
  mydata$mort_time_year<-mydata$mort_time/365

  mydata$mort_time_year <- round(mydata$mort_time_year, 2)
  is.numeric(mydata$res_cox_ln_meth_abso)
  mydata$res_cox_ln_meth_abso<-as.numeric(mydata$res_cox_ln_meth_abso)
  
  
  library(survival)
  library(survminer)
  library(ggpubr)
  
  #unloadNamespace("survminer")

#install.packages("survminer")
  library(survminer)
  
  
  #install.packages("survminer")

  library(ggplot2)
  library(ggpubr)
  library(survival)
library(survminer)
  
  
  
  # alle Pakete neu installieren
  #install.packages(c("survival", "ggplot2", "survminer", "ggpubr"))
  is.numeric(mydata$res_cox_ln_meth_abso)
  library(dplyr)
  
  
  #The ntile function is then being used to calculate the percentile 
  #rank of each observation in the res_cox_ln_meth_abso column, divided into three groups.
  mydata <- mydata %>%
    mutate(res_cox_ln_meth_cat = ntile(res_cox_ln_meth_abso, 3))
  
  labels <- c("<33rd percentile (1.tertile)", "34th-66th percentile (2.tertile)", ">67th percentile (3.tertile)")
    
    
  km_plot_all <- ggsurvplot(survfit(Surv(na.omit(mydata$mort_time_year), na.omit(mort_all)) ~ res_cox_ln_meth_cat, data = mydata), 
                            data = mydata, 
                            pval = TRUE,
                            pval.coord = c(2, 0.67),
                            pval.size = 9,  
                            title = "All-cause mortality
                            ",
                            xlab = "Time (years)",
                            ylab = "Survival Probability",
                            break.time.by = 5, 
                            conf.int = FALSE,
                            palette=c("#224b7a","#feae49","#44a5c2"), 
                            ylim = c(0.5, 1),
                            xlim= c(0,22),size=0.6,
  ggtheme = theme(
    panel.background = element_rect(fill='transparent'), #transparent panel bg
    plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
    panel.grid.major = element_blank(),
    plot.title = element_text(size=20),
    #remove major gridlines
   # panel.grid.minor = element_blank(), #remove minor gridlines
   axis.text.x = element_text(size = 30), # Größe der x-Achsentexte
   axis.title.x = element_text(size = 27), # Größe des x-Achsentitels
   axis.text.y = element_text(size = 30), # Größe der y-Achsentexte
   axis.title.y = element_text(size = 27)
  ))  +
    guides(color = FALSE)
  
  
  km_plot_all 
  
  
  
  #install.packages("ggplot2")
  library(ggplot2)
  
  ggsave("Allm.tiff", width = 5, height = 5, units = "in", dpi = 300)  # Save the plot as an image
  
    #install.packages("ggplot2")
  library(ggplot2)
    
    ggsave("C:/Users/KlierK/Documents/November/Mort_all_300.tiff", width = 5, height = 5, units = "in", dpi = 300)  # Save the plot as an image
```   
    
    
    
#H.4.2 mortality_cvd
```{r}
    library(survival)
    library(survminer)
    labels <- c("<33rd percentile (1.tertile)", "34th-66th percentile (2.tertile)", ">67th percentile (3.tertile)")
    km_plot_cvd <- ggsurvplot(survfit(Surv(mort_time_year, mort_cvd) ~ res_cox_ln_meth_cat, data = mydata), 
                              data = mydata, 
                              pval = TRUE,
                              pval.coord = c(3, 0.87),
                              pval.size = 9,  
                              title = "CVD mortality
                              ",
                              xlab = "Time (years)",
                              ylab = "Survival Probability",
                              break.time.by = 5, 
                              conf.int = FALSE,
                              legend.labs = labels,
                              palette=c("#224b7a","#feae49","#44a5c2"), 
                              ylim = c(0.8, 1),
                              xlim= c(0,22),
                              size=0.6,
                              ggtheme = theme(
                                panel.background = element_rect(fill='transparent'), #transparent panel bg
                                plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
                                panel.grid.major = element_blank(),
                                plot.title=element_text(size=20),#remove major gridlines
                                # panel.grid.minor = element_blank(), #remove minor gridlines
                                axis.text.x = element_text(size = 30), # Größe der x-Achsentexte
                                axis.title.x = element_text(size = 27), # Größe des x-Achsentitels
                                axis.text.y = element_text(size = 30), # Größe der y-Achsentexte
                                axis.title.y = element_text(size = 27)
                              ))+guides(color = FALSE)
    
    km_plot_cvd
    ggsave("Mort_cvd_300.tiff", width = 5, height = 5, units = "in", dpi = 300)  # Save the plot as an image
    
    
```
    
    
    
    
  
#H.4.2 mortality cancer
```{r}
km_plot_ca <- ggsurvplot(survfit(Surv(mort_time_year, mort_ca) ~ res_cox_ln_meth_cat, data = mydata), 
                          data = mydata, 
                          pval = TRUE,
                         pval.coord = c(3, 0.87),
                         pval.size = 9,  
                          title = "Cancer mortality
                         ",
                          xlab = "Time (years)",
                          ylab = "Survival Probability",
                          break.time.by = 5, 
                          conf.int = FALSE,
                          legend.labs = labels,
                         palette=c("#224b7a","#feae49","#44a5c2"), 
                         ylim = c(0.8, 1), 
                         xlim= c(0,22),
                         size=0.000001,
                         ggtheme = theme(
                           panel.background = element_rect(fill='transparent'), #transparent panel bg
                           plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
                           panel.grid.major = element_blank(),
                           plot.title=element_text(size=20),#remove major gridlines
                           # panel.grid.minor = element_blank(), #remove minor gridlines
                           legend.background = element_rect(fill='transparent'), #transparent legend bg
                           legend.box.background = element_rect(fill='transparent'),
                           axis.text.x = element_text(size = 30), # Größe der x-Achsentexte
                           axis.title.x = element_text(size = 27), # Größe des x-Achsentitels
                           axis.text.y = element_text(size = 30), # Größe der y-Achsentexte
                           axis.title.y = element_text(size = 27),
                           legend.position = "bottom",  # Legende unten platzieren
                           legend.direction = "horizontal",  # Legende horizontal anzeigen
                           legend.box = "horizontal"  # Legende horizontal anzeigen
                         ))+ guides(color = FALSE)
                        
km_plot_ca


lot_list <- list(km_plot_ca, km_plot_ca, km_plot_ca)

ggsave("Mort_ca_300.tiff", width = 5, height = 5, units = "in", dpi = 300)  # Save the plot as an image

```



#H.4.4 mortality cancer, cvd, all-cause together
```{r}
splots <- list()
splots[[1]] <- km_plot_cvd
splots[[2]] <- km_plot_ca
splots[[3]] <- km_plot_all

# Arrange multiple ggsurvplots and print the output
combined_legend <- arrange_ggsurvplots(splots, print = TRUE,
                                       ncol = 3, nrow = 1, risk.table.height = 0.4)


# Print the combined plot with a single legend

ggsave("C:/Users/KlierK/Documents/November/alltogether.tiff", combined_legend, width = 15, height = 5)

```




#I.5 Cummulative incidence Curve 
#I.5.1 Cummulative incidence Curve CVD
```{r}
    library(survival)
    km_plot_all2 <-survfit(Surv(mort_time_year, mort_cvd) ~ res_cox_ln_meth_cat, data = mydata)  # the standard survival curve
    
    
    cum2<-ggsurvplot(km_plot_all2, fun = "event",data = mydata, 
                    pval = TRUE,
                    pval.coord = c(1, 0.85),
                    pval.size = 7,  
                    title = "Methanol concentration and mortality risk in CVD",
                    xlab = "Time (years)",
                    ylab = "Survival Probability",
                    break.time.by = 1, 
                    conf.int = FALSE,
                    legend.labs = labels,
                    palette=c("#224b7a","#feae49","#44a5c2"), 
                    ylim = c(0.0, 0.13),
                    xlim=c(0,23),
                    ggtheme = theme(
                      panel.background = element_rect(fill='transparent'), #transparent panel bg
                      plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
                      panel.grid.major = element_blank(), #remove major gridlines
                      # panel.grid.minor = element_blank(), #remove minor gridlines
                      legend.background = element_rect(fill='transparent'), #transparent legend bg
                      legend.box.background = element_rect(fill='transparent'),
                      axis.text.x = element_text(size = 16), # Größe der x-Achsentexte
                      axis.title.x = element_text(size = 18), # Größe des x-Achsentitels
                      axis.text.y = element_text(size = 16), # Größe der y-Achsentexte
                      axis.title.y = element_text(size = 18)
                    ))+guides(colour = guide_legend(nrow = 1, ncol = 3))
    cum2
                      
    ggsave("C:/Users/KlierK/Documents/November/cum2.tiff", width = 8, height = 5, units = "in", dpi = 600)  # Save the plot as an image
```

#I.5.2 Cummulative incidence Curve Cancer
```{r}
library(survival)
km_plot_all2 <-survfit(Surv(mort_time, mort_ca) ~ res_cox_ln_meth_cat, data = mydata)  # the standard survival curve


cum<-ggsurvplot(km_plot_all2, fun = "event",data = mydata, 
           pval = TRUE,
           pval.coord = c(1000, 0.85),
           pval.size = 5,  
           title = "Methanol Metabolites Concentration and 
           Mortality Risk in Cancer",
           xlab = "Time (days)",
           ylab = "Survival Probability",
           break.time.by = 1000, 
           conf.int = FALSE,
           legend.labs = labels,
           palette=c("#224b7a","#feae49","#44a5c2"), 
           ylim = c(0.0, 0.17),
           ggtheme = theme(
             panel.background = element_rect(fill='transparent'), #transparent panel bg
             plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
             panel.grid.major = element_blank(), #remove major gridlines
             # panel.grid.minor = element_blank(), #remove minor gridlines
             legend.background = element_rect(fill='transparent'), #transparent legend bg
             legend.box.background = element_rect(fill='transparent') #transparent legend panel
           ))+guides(colour = guide_legend(nrow = 3, ncol = 12))

cum
ggsave("C:/Users/KlierK/Documents/August/cum.png", width = 5, height = 5, units = "in", dpi = 600)  # Save the plot as an image

```



#J.6 Competing Risk analysis

#J.6.1 Data preparation
```{r}
install.packages("cmprsk")
library(cmprsk)
library(rms)
library(Hmisc)

table(mydata$mort_cvd,mydata$mort_ca)

#install.packages("cmprsk")
library(cmprsk)
library(rms)

#install.packages("rms")
library(rms)
library(splines)
```



#Extended Data Fig. S4
```{r}
#plot(xx, main="Cumulative Incidence of CVD (competing risk considered)", ylim=c(0.0, 0.14), wh=2,
#     xlab="Years", ylab="Probability", lty=1:length(xx), color=1:6, lwd=par('lwd'))

library(survminer)

renamed_values <- ifelse(fstatus == 1, "CVD", ifelse(fstatus == 2, "Cancer", fstatus))


mydata$res_cox_ln_meth_cat2 <- ifelse(mydata$res_cox_ln_meth_cat == 1, "1.low",
                                             ifelse(mydata$res_cox_ln_meth_cat == 2, "2.middle",
                                                    ifelse(mydata$res_cox_ln_meth_cat == 3, "3.high", "else")))

#labels <- c("<33rd percentile (1.tertile)", "34th-66th percentile (2.tertile)", ">67th percentile (3.tertile)")
# In manuscript included
# Define the colors


xx <- cuminc(mydata$mort_time, renamed_values, mydata$res_cox_ln_meth_cat2)

ggcompetingrisks(
  xx,
  gnames = NULL,
  gsep = " ",
  title = "Methanol Concentration and Mortality Risk (CICR)",
  multiple_panels = TRUE,
  ggtheme = theme_survminer(),
  coef = 1.96,
  conf.int = FALSE,
)+geom_step(linewidth = 1.0)+scale_color_manual(values = c("#224b7a", "#feae49"))



xxall <-cmprsk::cuminc(mydata$mort_time, renamed_values, mydata$res_cox_ln_meth_cat2)

g<-ggcompetingrisks(
  xxall,
  gnames = NULL,
  gsep = " ", 
  title = "Methanol Concentration and Mortality Risk (CICR)",
  multiple_panels = F,
  ggtheme = theme_survminer(),
  coef = 1.96,
  conf.int = FALSE,
  legend.title = "event"
)+geom_step(linewidth = 0.6)+scale_color_manual(values = c("#224b7a","#feae49","#44a5c2"))


g$mapping$colour<-quo_set_expr(g$mapping$colour, quote(group))
g$mapping$linetype<-quo_set_expr(g$mapping$linetype, quote(event))
# Nachträglich die Legendenbeschriftungen ändern
g <- g + labs(group = "group", color = "group")
g



ggsave("C:/Users/KlierK/Documents/August/2CummulativeIncidence.png", width = 8, height = 6, units = "in", dpi = 600)  
```





#J.6.2 Competing Risk regression for mortality cancer
```{r}
fstatus <- numeric(length(mydata$mort_ca))
fstatus[mydata$mort_ca == 0 & mydata$mort_cvd == 0] <- 0
fstatus[mydata$mort_ca == 1 & mydata$mort_cvd == 0] <- 1
fstatus[mydata$mort_ca == 0 & mydata$mort_cvd == 1] <- 2


###### adj. Model I ######
####### p-value (linearity) #######

#attach(mydata)
# Store the covariates as separate variables
cov1 <- mydata$ln_meth_abso
cov2 <- rcs(mydata$ln_PQN, 4)
cov3 <- mydata$ph_u
cov4 <- rcs(mydata$gfr_mdrd_s0, 4)
cov5 <- rcs(mydata$AGE_SHIP0, 4) * mydata$SEX
cov6 <- mydata$som_tail
cov7 <- mydata$mi
cov8 <- mydata$hyp_s0
cov9 <- mydata$diabetes_s0
cov10 <- mydata$chol_hdl_s0
cov11 <- mydata$tg_s
cov12 <- mydata$physact_s0
cov13 <- mydata$edyrs_s0
cov14 <- mydata$alcg7d_s0 * mydata$SEX
cov15 <- mydata$dschlaf
cov16 <- mydata$csmoking_s0
cov17 <- mydata$wbc
cov18<-mydata$rbc
cov1_res<-rcs(ln_meth_abso,4)



#linear p-value
# Combine the covariates into a matrix
cov_matrix <- cbind(cov1, cov2, cov3, cov4, cov5, cov6, cov7, cov8, cov9, cov10, cov11, cov17,cov18)
a<-crr(mydata$mort_time, fstatus, cov_matrix)
summary(a)
options(digits = 10)
print(summary(a))



###### adj. Model II ######
####### p-value (linearity) #######

attach(mydata)
# Store the covariates as separate variables
cov1 <- mydata$ln_meth_abso
cov2 <- rcs(mydata$ln_PQN, 4)
cov3 <- mydata$ph_u
cov4 <- rcs(mydata$gfr_mdrd_s0, 4)
cov5 <- rcs(mydata$AGE_SHIP0, 4) * mydata$SEX
cov6 <- mydata$som_tail
cov7 <- mydata$mi
cov8 <- mydata$hyp_s0
cov9 <- mydata$diabetes_s0
cov10 <- mydata$chol_hdl_s0
cov11 <- mydata$tg_s
cov12 <- mydata$physact_s0
cov13 <- mydata$edyrs_s0
cov14 <- mydata$alcg7d_s0 * mydata$SEX
cov15 <- mydata$dschlaf
cov16 <- mydata$csmoking_s0
cov17 <- mydata$wbc
cov18 <- mydata$rbc
cov1_res<-rcs(ln_meth_abso,4)

#linear p-value
# Combine the covariates into a matrix
cov_matrix <- cbind(cov1, cov2, cov3, cov4, cov5, cov6, cov7, cov8, cov9, cov10, cov11, cov12, cov13, cov14, cov15, cov16, cov17,cov18)
a<-crr(mydata$mort_time, fstatus, cov_matrix)
summary(a)

library(dplyr)
library(survival)
library(car) 

```



#J.6.3 Competing Risk regression for mortality CVD 
```{r}
fstatus <- numeric(length(mydata$mort_ca))
fstatus[mydata$mort_ca == 0 & mydata$mort_cvd == 0] <- 0
fstatus[mydata$mort_cvd == 1 & mydata$mort_ca == 0] <- 1
fstatus[mydata$mort_cvd == 0 & mydata$mort_ca == 1] <- 2

###### adj. Model I ######
#p-value (linearity)

attach(mydata)

# Store the covariates as separate variables
cov1 <- mydata$ln_meth_abso
cov2 <- rcs(mydata$ln_PQN, 4)
cov3 <- mydata$ph_u
cov4 <- rcs(mydata$gfr_mdrd_s0, 4)
cov5 <- rcs(mydata$AGE_SHIP0, 4) * mydata$SEX
cov6 <- mydata$som_tail
cov7 <- mydata$mi
cov8 <- mydata$hyp_s0
cov9 <- mydata$diabetes_s0
cov10 <- mydata$chol_hdl_s0
cov11 <- mydata$tg_s
#cov12 <- mydata$physact_s0
#cov13 <- mydata$edyrs_s0
#cov14 <- mydata$alcg7d_s0 * mydata$SEX
#cov15 <- mydata$dschlaf
#cov16 <- mydata$csmoking_s0
cov17 <- mydata$wbc
cov18 <- mydata$rbc
cov1_res<-rcs(ln_meth_abso,4)



#linear p-value
# Combine the covariates into a matrix
cov_matrix <- cbind(cov1, cov2, cov3, cov4, cov5, cov6, cov7, cov8, cov9, cov10, cov11, cov17,cov18)
a<-crr(mydata$mort_time, fstatus, cov_matrix)
summary(a)
options(digits = 10)
print(summary(a))
#s<-cuminc(mydata$mort_time, fstatus, group=fstatus)
#plot(s, main=" ")

library(survival)
library(rms)

###### adj. Model II ######
#p-value (linearity)

attach(mydata)
# Store the covariates as separate variables
cov1 <- mydata$ln_meth_abso
cov2 <- rcs(mydata$ln_PQN, 4)
cov3 <- mydata$ph_u
cov4 <- rcs(mydata$gfr_mdrd_s0, 4)
cov5 <- rcs(mydata$AGE_SHIP0, 4) * mydata$SEX
cov6 <- mydata$som_tail
cov7 <- mydata$mi
cov8 <- mydata$hyp_s0
cov9 <- mydata$diabetes_s0
cov10 <- mydata$chol_hdl_s0
cov11 <- mydata$tg_s
cov12 <- mydata$physact_s0
cov13 <- mydata$edyrs_s0
cov14 <- mydata$alcg7d_s0 * mydata$SEX
cov15 <- mydata$dschlaf
cov16 <- mydata$csmoking_s0
cov17 <- mydata$wbc
cov18 <- mydata$rbc
cov1_res<-rcs(ln_meth_abso,4)



#linear p-value
# Combine the covariates into a matrix
cov_matrix <- cbind(cov1, cov2, cov3, cov4, cov5, cov6, cov7, cov8, cov9, cov10, cov11, cov12, cov13, cov14, cov15, cov16, cov17,cov18)
a<-crr(mydata$mort_time, fstatus, cov_matrix)
summary(a)
```




#J.6.4 Mortality and food
#everything
```{r}

#food_30, food_9, food_12(fresh fruits), food_7 (fried potato), food_16 (flaked oats), food_19 (olive oil), food_32 (soft drinks)

food_tophit<-c("food_30","food_9","food_12","food_7","food_16", "food_19", "food_32")
library(survival)
library(car)

mydata$ph_u <- as.numeric(mydata$ph_u)




library(survival)
library(car)

mydata$ph_u <- as.numeric(mydata$ph_u)

food_tophit <- c("food_30", "food_9", "food_12", "food_7", "food_16", "food_19", "food_32")
mort <- c("mort_all", "mort_cvd", "mort_ca")

results <- list()




#With Methanol
for (mort_variable in mort) {
  for (food_variable in food_tophit) {
    formula_str <- paste("Surv(mort_time, ", mort_variable, ") ~ factor(", food_variable, ") + ",
                         "rcs(ln_PQN, 4) + ph_u + ",
                         "rcs(gfr_mdrd_s0, 4) + ",
                         "rcs(AGE_SHIP0, 4) * SEX + ",
                         "som_tail + mi + hyp_s0 + diabetes_s0 + chol_hdl_s0 + ",
                         "tg_s + wbc + rbc + ",
                         "rcs(ln_meth_abso, 4)")
    
    cox_model <- coxph(as.formula(formula_str), data = mydata, na.action = na.exclude)
    
    vartest <- c(paste0("factor(", food_variable, ")2"),
                 paste0("factor(", food_variable, ")3"),
                 paste0("factor(", food_variable, ")4"),
                 paste0("factor(", food_variable, ")5"),
                 paste0("factor(", food_variable, ")6"))
    
    waldtest_nonl <- linearHypothesis(cox_model, vartest, test = "Chisq")
    
    key <- paste(mort_variable, food_variable, sep = "_")
    results[[key]] <- list(model = cox_model, p_value = waldtest_nonl$Pr[2])
  }
}

results

specific_results <- list()

for (mort_variable in mort) {
  for (food_variable in food_tophit) {
    key <- paste(mort_variable, food_variable, sep = "_")
    specific_results[[key]] <- results[[key]]$p_value
  }
}

specific_results

  
  
  #Without methanol
for (mort_variable in mort) {
  for (food_variable in food_tophit) {
    
    formula_str <- paste("Surv(mort_time, ", mort_variable, ") ~ factor(", food_variable, ") + ",
                         "rcs(ln_PQN, 4) + ph_u + ",
                         "rcs(gfr_mdrd_s0, 4) + ",
                         "rcs(AGE_SHIP0, 4) * SEX + ",
                         "som_tail + mi + hyp_s0 + diabetes_s0 + chol_hdl_s0 + ",
                         "tg_s + wbc + rbc  ")
    
    # Cox-Modell adapting
    cox_model <- coxph(as.formula(formula_str), data = mydata, na.action = na.exclude)
    
    # Wald-Test for non-linearity
    vartest <- c(paste0("factor(", food_variable, ")2"),
                 paste0("factor(", food_variable, ")3"),
                 paste0("factor(", food_variable, ")4"),
                 paste0("factor(", food_variable, ")5"),
                 paste0("factor(", food_variable, ")6"))
    
    waldtest_nonl <- linearHypothesis(cox_model, vartest, test = "Chisq")
    
    key <- paste(mort_variable, food_variable, sep = "_")
    results[[key]] <- list(model = cox_model, p_value = waldtest_nonl$Pr[2])
  }
}

results


specific_results <- list()

for (mort_variable in mort) {
  for (food_variable in food_tophit) {
    key <- paste(mort_variable, food_variable, sep = "_")
    specific_results[[key]] <- results[[key]]$p_value
  }
}

specific_results










#Adjusted II

#With Methanol
for (mort_variable in mort) {
  for (food_variable in food_tophit) {
    formula_str <- paste("Surv(mort_time, ", mort_variable, ") ~ factor(", food_variable, ") + ",
                         "rcs(ln_PQN, 4) + ph_u + ",
                         "rcs(gfr_mdrd_s0, 4) + ",
                         "rcs(AGE_SHIP0, 4) * SEX + ",
                         "som_tail + mi + hyp_s0 + diabetes_s0 + chol_hdl_s0 + ",
                         "tg_s + wbc + rbc + ",
                         "rcs(ln_meth_abso, 4)+",
                         "physact_s0 +edyrs_s0+ alcg7d_s0*SEX +dschlaf +csmoking_s0")
    
    cox_model <- coxph(as.formula(formula_str), data = mydata, na.action = na.exclude)
    
    vartest <- c(paste0("factor(", food_variable, ")2"),
                 paste0("factor(", food_variable, ")3"),
                 paste0("factor(", food_variable, ")4"),
                 paste0("factor(", food_variable, ")5"),
                 paste0("factor(", food_variable, ")6"))
    
    waldtest_nonl <- linearHypothesis(cox_model, vartest, test = "Chisq")
    
    # Ergebnisse speichern, mit Kombination aus mort und food als Schlüssel
    key <- paste(mort_variable, food_variable, sep = "_")
    results[[key]] <- list(model = cox_model, p_value = waldtest_nonl$Pr[2])
  }
}

results

specific_results <- list()

for (mort_variable in mort) {
  for (food_variable in food_tophit) {
    key <- paste(mort_variable, food_variable, sep = "_")
    specific_results[[key]] <- results[[key]]$p_value
  }
}

specific_results

  
  
  





#Without methanol

# Schleife über alle Variablen in food_tophit und mort
for (mort_variable in mort) {
  for (food_variable in food_tophit) {
    # Dynamisches Modell erstellen
    formula_str <- paste("Surv(mort_time, ", mort_variable, ") ~ factor(", food_variable, ") + ",
                         "rcs(ln_PQN, 4) + ph_u + ",
                         "rcs(gfr_mdrd_s0, 4) + ",
                         "rcs(AGE_SHIP0, 4) * SEX + ",
                         "som_tail + mi + hyp_s0 + diabetes_s0 + chol_hdl_s0 + ",
                         "tg_s + wbc + rbc + ",
                         "physact_s0 +edyrs_s0+ alcg7d_s0*SEX +dschlaf +csmoking_s0")
    
    # Cox-Modell anpassen
    cox_model <- coxph(as.formula(formula_str), data = mydata, na.action = na.exclude)
    
    # Wald-Test für Nichtlinearität durchführen
    vartest <- c(paste0("factor(", food_variable, ")2"),
                 paste0("factor(", food_variable, ")3"),
                 paste0("factor(", food_variable, ")4"),
                 paste0("factor(", food_variable, ")5"),
                 paste0("factor(", food_variable, ")6"))
    
    waldtest_nonl <- linearHypothesis(cox_model, vartest, test = "Chisq")
    
    # Ergebnisse speichern, mit Kombination aus mort und food als Schlüssel
    key <- paste(mort_variable, food_variable, sep = "_")
    results[[key]] <- list(model = cox_model, p_value = waldtest_nonl$Pr[2])
  }
}

results


specific_results <- list()

for (mort_variable in mort) {
  for (food_variable in food_tophit) {
    key <- paste(mort_variable, food_variable, sep = "_")
    specific_results[[key]] <- results[[key]]$p_value
  }
}

specific_results




  
  #Kaplan Meier Curves
   mydata$mort_time_year<-mydata$mort_time/365

  mydata$mort_time_year <- round(mydata$mort_time_year, 2)
  is.numeric(mydata$res_cox_ln_meth_abso)
  mydata$res_cox_ln_meth_abso<-as.numeric(mydata$res_cox_ln_meth_abso)
  
  
  library(survival)
  library(survminer)
  library(ggpubr)
  
  #unloadNamespace("survminer")

#install.packages("survminer")
  library(survminer)
  
  
  #install.packages("survminer")

  library(ggplot2)
  library(ggpubr)
  library(survival)
library(survminer)
  
  
  
  #install.packages(c("survival", "ggplot2", "survminer", "ggpubr"))
  is.numeric(mydata$res_cox_ln_meth_abso)
  library(dplyr)
  
  
  #The ntile function is then being used to calculate the percentile 
  #rank of each observation in the res_cox_ln_meth_abso column, divided into three groups.
  mydata <- mydata %>%
    mutate(res_cox_ln_meth_cat = ntile(res_cox_ln_meth_abso, 3))
  

   
    
library(survival)
library(survminer)
library(ggplot2)

food_tophit <- c("food_30", "food_9", "food_12", "food_7", "food_16", "food_19", "food_32")
mort <- c("mort_all", "mort_cvd", "mort_ca")

km_plots <- list()

for (mort_variable in mort) {
  for (food_variable in food_tophit) {
    surv_formula <- paste("Surv(mort_time_year, ", mort_variable, ") ~ ", food_variable, sep="")
    
    labels <- c("1- daily or almost daily", 
                "2- several times a week", 
                "3- about once a week",
                "4- several times a month",
                "5- once a month or less often",
                "6- never or almost never")
    
    plot_title <- ifelse(mort_variable == "mort_all", "All cause mortality",
                         ifelse(mort_variable == "mort_cvd", "CVD mortality",
                                ifelse(mort_variable == "mort_ca", "Cancer mortality", 
                                       paste("Survival for", mort_variable, "and", food_variable))))
    
    
    # Plot erstellen
    km_plot <- ggsurvplot(
      survfit(as.formula(surv_formula), data = mydata),
      data = mydata,
      pval = TRUE,
      pval.coord = c(2, 0.67),
      pval.size = 9,
      title = plot_title, 
      xlab = "Time (years)",
      ylab = "Survival Probability",
      break.time.by = 5,
      conf.int = FALSE,
      legend.labs = labels,
      palette = c("#224b7a", "#feae49", "#44a5c2", "green", "yellow", "red"),
      ylim = c(0.5, 1),
      xlim = c(0, 22), 
      size = 0.6,
      ggtheme = theme(
        panel.background = element_rect(fill = 'transparent'),
        plot.background = element_rect(fill = 'transparent', color = NA),
        panel.grid.major = element_blank(),
        plot.title = element_text(size = 20),
        axis.text.x = element_text(size = 30),
        axis.title.x = element_text(size = 27),
        axis.text.y = element_text(size = 30),
        axis.title.y = element_text(size = 27),
        legend.text = element_text(size = 10)
      )
    ) + labs(color = NULL)
    
    # Den Plot in der Liste speichern
    key <- paste(mort_variable, food_variable, sep = "_")
    km_plots[[key]] <- km_plot
    
    # Plot speichern (optional)
    file_name <- paste("KM_Plot3_", mort_variable, "_", food_variable, ".tiff", sep = "")
    ggsave(file_name, plot = km_plot$plot, width = 5, height = 5, units = "in", dpi = 300)
  }
}

km_plots

getwd()
    
    
    






    
  
```


#everything rare vs. frequent

```{r}

mydatatf<-mydata
for (i in 168:200){
  food.cat3<-NULL
  food.cat3[which(mydatatf[,i]=='1')]<-1
  food.cat3[which(mydatatf[,i]=='2')]<-1
  food.cat3[which(mydatatf[,i]=='3')]<-9
  food.cat3[which(mydatatf[,i]=='4')]<-9
  food.cat3[which(mydatatf[,i]=='5')]<-0
  food.cat3[which(mydatatf[,i]=='6')]<-0
  mydatatf$food.cat3<-food.cat3
  mydatatf[, paste("catf.", colnames(mydatatf)[i], sep="")]<-food.cat3
}



#food_30, food_31 (soft drink), food_7 (fried potato), food_19 (olive oil), food_9 (rice), food_16 (flaked oats), food_11 (cooked vegetables), food_23 (low fat diary products)


food_tophit<-c("catf.food_30","catf.food_31","catf.food_7","catf.food_19","catf.food_9", "catf.food_16", "catf.food_11", "catf.food_23")
# Erforderliche Pakete laden
library(survival)
library(car)

# Daten vorbereiten
mydata$ph_u <- as.numeric(mydata$ph_u)




# Erforderliche Pakete laden
library(survival)
library(car)

# Daten vorbereiten
mydata$ph_u <- as.numeric(mydata$ph_u)


mort <- c("mort_all", "mort_cvd", "mort_ca")

# Ergebnisse für jedes Modell speichern
results <- list()




#With Methanol
# Schleife über alle Variablen in food_tophit und mort
for (mort_variable in mort) {
  for (food_variable in food_tophit) {
    # Dynamisches Modell erstellen
    formula_str <- paste("Surv(mort_time, ", mort_variable, ") ~ factor(", food_variable, ") + ",
                         "rcs(ln_PQN, 4) + ph_u + ",
                         "rcs(gfr_mdrd_s0, 4) + ",
                         "rcs(AGE_SHIP0, 4) * SEX + ",
                         "som_tail + mi + hyp_s0 + diabetes_s0 + chol_hdl_s0 + ",
                         "tg_s + wbc + rbc + ",
                         "rcs(ln_meth_abso, 4)")
    
    # Cox-Modell anpassen
    cox_model <- coxph(as.formula(formula_str), data = mydatatf, na.action = na.exclude)
    
    model_summary <- broom::tidy(cox_model, conf.int = TRUE, exponentiate = TRUE)

    # Extract information of the first variable
    first_var <- model_summary[1, ]  # Select the first row
    
    # Extract exp(coef), lower .95, upper .95, and p-value
    beta <- first_var$estimate
    lower_95 <- first_var$conf.low
    upper_95 <- first_var$conf.high
    p_value <- first_var$p.value
    
    # Format the output
    formatted_result <- sprintf("b (95%% CI) = %.2f (%.2f, %.2f), p = %.3f", beta, lower_95, upper_95, p_value)
    
    # Store the result in a list for later use
    results[[paste(mort_variable, food_variable, sep = "_")]] <- formatted_result
    
  }
}

results




  
  #Without methanol

# Schleife über alle Variablen in food_tophit und mort
for (mort_variable in mort) {
  for (food_variable in food_tophit) {
    # Dynamisches Modell erstellen
    formula_str <- paste("Surv(mort_time, ", mort_variable, ") ~ factor(", food_variable, ") + ",
                         "rcs(ln_PQN, 4) + ph_u + ",
                         "rcs(gfr_mdrd_s0, 4) + ",
                         "rcs(AGE_SHIP0, 4) * SEX + ",
                         "som_tail + mi + hyp_s0 + diabetes_s0 + chol_hdl_s0 + ",
                         "tg_s + wbc + rbc  ")
    
    # Cox-Modell anpassen
    cox_model <- coxph(as.formula(formula_str), data = mydatatf, na.action = na.exclude)
       
    model_summary <- broom::tidy(cox_model, conf.int = TRUE, exponentiate = TRUE)
    
    # Extract information of the first variable
    first_var <- model_summary[1, ]  # Select the first row
    
    # Extract exp(coef), lower .95, upper .95, and p-value
    beta <- first_var$estimate
    lower_95 <- first_var$conf.low
    upper_95 <- first_var$conf.high
    p_value <- first_var$p.value
    
    # Format the output
    formatted_result <- sprintf("b (95%% CI) = %.2f (%.2f, %.2f), p = %.3f", beta, lower_95, upper_95, p_value)
    
    # Store the result in a list for later use
    results[[paste(mort_variable, food_variable, sep = "_")]] <- formatted_result
    
  }
}

results
    









#Adjusted II


#With Methanol
# Schleife über alle Variablen in food_tophit und mort
for (mort_variable in mort) {
  for (food_variable in food_tophit) {
    # Dynamisches Modell erstellen
    formula_str <- paste("Surv(mort_time, ", mort_variable, ") ~ factor(", food_variable, ") + ",
                         "rcs(ln_PQN, 4) + ph_u + ",
                         "rcs(gfr_mdrd_s0, 4) + ",
                         "rcs(AGE_SHIP0, 4) * SEX + ",
                         "som_tail + mi + hyp_s0 + diabetes_s0 + chol_hdl_s0 + ",
                         "tg_s + wbc + rbc + ",
                         "rcs(ln_meth_abso, 4)+",
                         "physact_s0 +edyrs_s0+ alcg7d_s0*SEX +dschlaf +csmoking_s0")
    
    # Cox-Modell anpassen
    cox_model <- coxph(as.formula(formula_str), data = mydatatf, na.action = na.exclude)
    
    model_summary <- broom::tidy(cox_model, conf.int = TRUE, exponentiate = TRUE)
    
    # Extract information of the first variable
    first_var <- model_summary[1, ]  # Select the first row
    
    # Extract exp(coef), lower .95, upper .95, and p-value
    beta <- first_var$estimate
    lower_95 <- first_var$conf.low
    upper_95 <- first_var$conf.high
    p_value <- first_var$p.value
    
    # Format the output
    formatted_result <- sprintf("b (95%% CI) = %.2f (%.2f, %.2f), p = %.3f", beta, lower_95, upper_95, p_value)
    
    # Store the result in a list for later use
    results[[paste(mort_variable, food_variable, sep = "_")]] <- formatted_result
    
  }
}

results


  




  
  




#Without methanol
for (mort_variable in mort) {
  for (food_variable in food_tophit) {
    formula_str <- paste("Surv(mort_time, ", mort_variable, ") ~ factor(", food_variable, ") + ",
                         "rcs(ln_PQN, 4) + ph_u + ",
                         "rcs(gfr_mdrd_s0, 4) + ",
                         "rcs(AGE_SHIP0, 4) * SEX + ",
                         "som_tail + mi + hyp_s0 + diabetes_s0 + chol_hdl_s0 + ",
                         "tg_s + wbc + rbc + ",
                         "physact_s0 +edyrs_s0+ alcg7d_s0*SEX +dschlaf +csmoking_s0")
    
    # Cox-Modell 
    cox_model <- coxph(as.formula(formula_str), data = mydatatf, na.action = na.exclude)
    
    model_summary <- broom::tidy(cox_model, conf.int = TRUE, exponentiate = TRUE)
    
    # Extract information of the first variable
    first_var <- model_summary[1, ]  # Select the first row
    
    # Extract exp(coef), lower .95, upper .95, and p-value
    beta <- first_var$estimate
    lower_95 <- first_var$conf.low
    upper_95 <- first_var$conf.high
    p_value <- first_var$p.value
    
    # Format the output
    formatted_result <- sprintf("b (95%% CI) = %.2f (%.2f, %.2f), p = %.3f", beta, lower_95, upper_95, p_value)
    
    # Store the result in a list for later use
    results[[paste(mort_variable, food_variable, sep = "_")]] <- formatted_result
    
  }
}

results








#Methanol as independent variable and food vairables as covariates. 


#Adjusted II
#With Methanol
results <- data.frame(
  mort_variable = character(),
  food_variable = character(),
  pval_nonl = numeric(),
  stringsAsFactors = FALSE
)


for (mort_variable in mort) {
  for (food_variable in food_tophit) {
    formula_str <- paste("Surv(mort_time, ", mort_variable, ") ~ factor(", food_variable, ") + ",
                         "rcs(ln_PQN, 4) + ph_u + ",
                         "rcs(gfr_mdrd_s0, 4) + ",
                         "rcs(AGE_SHIP0, 4) * SEX + ",
                         "som_tail + mi + hyp_s0 + diabetes_s0 + chol_hdl_s0 + ",
                         "tg_s + wbc + rbc + ",
                         "rcs(ln_meth_abso, 4)+",
                         "physact_s0 +edyrs_s0+ alcg7d_s0*SEX +dschlaf +csmoking_s0")
    
    # Cox-Modell adapting
    cox_model <- coxph(as.formula(formula_str), data = mydatatf, na.action = na.exclude)
    
    
    vartest <- c("rcs(ln_meth_abso, 4)ln_meth_abso","rcs(ln_meth_abso, 4)ln_meth_abso'","rcs(ln_meth_abso, 4)ln_meth_abso''")
  waldtest_nonl <- linearHypothesis(cox_model, vartest, test="Chisq")
  pval_nonl <- round(waldtest_nonl$Pr[2], 3)
  pval_nonl
  
  
   results <- rbind(
      results,
      data.frame(
        mort_variable = mort_variable,
        food_variable = food_variable,
        pval_nonl = pval_nonl,
        stringsAsFactors = FALSE
      )
    )
  
  }
}
  






#Unadjusted II
#With Methanol
results <- data.frame(
  mort_variable = character(),
  food_variable = character(),
  pval_nonl = numeric(),
  stringsAsFactors = FALSE
)


for (mort_variable in mort) {
  for (food_variable in food_tophit) {
    formula_str <- paste("Surv(mort_time, ", mort_variable, ") ~ factor(", food_variable, ") + ",
                         "rcs(ln_PQN, 4) + ph_u + ",
                         "rcs(gfr_mdrd_s0, 4) + ",
                         "rcs(AGE_SHIP0, 4) * SEX + ",
                         "som_tail + mi + hyp_s0 + diabetes_s0 + chol_hdl_s0 + ",
                         "tg_s + wbc + rbc + ",
                         "rcs(ln_meth_abso, 4)")
    
    # Cox-Modell 
    cox_model <- coxph(as.formula(formula_str), data = mydatatf, na.action = na.exclude)
    
    
    vartest <- c("rcs(ln_meth_abso, 4)ln_meth_abso","rcs(ln_meth_abso, 4)ln_meth_abso'","rcs(ln_meth_abso, 4)ln_meth_abso''")
  waldtest_nonl <- linearHypothesis(cox_model, vartest, test="Chisq")
  pval_nonl <- round(waldtest_nonl$Pr[2], 6)
  pval_nonl
  
  
   results <- rbind(
      results,
      data.frame(
        mort_variable = mort_variable,
        food_variable = food_variable,
        pval_nonl = pval_nonl,
        stringsAsFactors = FALSE
      )
    )
  
  }
}


  
  #Kaplan Meier Curves
   mydatatf$mort_time_year<-mydatatf$mort_time/365

  mydatatf$mort_time_year <- round(mydatatf$mort_time_year, 2)
  
  library(survival)
  library(survminer)
  library(ggpubr)
  
  #unloadNamespace("survminer")

#install.packages("survminer")
  library(survminer)
  
  
  #install.packages("survminer")

  library(ggplot2)
  library(ggpubr)
  library(survival)
library(survminer)
  
  
  
  #install.packages(c("survival", "ggplot2", "survminer", "ggpubr"))
  is.numeric(mydatatf$res_cox_ln_meth_abso)
  library(dplyr)
  
  
library(survival)
library(survminer)
library(ggplot2)

km_plots <- list()

for (mort_variable in mort) {
  for (food_variable in food_tophit) {
    surv_formula <- paste("Surv(mort_time_year, ", mort_variable, ") ~ ", food_variable, sep="")
    
    
    plot_title <- ifelse(mort_variable == "mort_all", "All cause mortality",
                         ifelse(mort_variable == "mort_cvd", "CVD mortality",
                                ifelse(mort_variable == "mort_ca", "Cancer mortality", 
                                       paste("Survival for", mort_variable, "and", food_variable))))
    
    
    # Plot
    km_plot <- ggsurvplot(
      survfit(as.formula(surv_formula), data = mydatatf),
      data = mydatatf,
      pval = TRUE,
      pval.coord = c(2, 0.67),
      pval.size = 9,
      title = plot_title, 
      xlab = "Time (years)",
      ylab = "Survival Probability",
      break.time.by = 5,
      conf.int = FALSE,
      palette = c("#224b7a", "#feae49", "#44a5c2"),
      ylim = c(0.5, 1),
      xlim = c(0, 22), 
      size = 0.6,
      ggtheme = theme(
        panel.background = element_rect(fill = 'transparent'),
        plot.background = element_rect(fill = 'transparent', color = NA),
        panel.grid.major = element_blank(),
        plot.title = element_text(size = 20),
        axis.text.x = element_text(size = 30),
        axis.title.x = element_text(size = 27),
        axis.text.y = element_text(size = 30),
        axis.title.y = element_text(size = 27),
        legend.text = element_text(size = 10)
      )
    ) + labs(color = NULL)
    
    key <- paste(mort_variable, food_variable, sep = "_")
    km_plots[[key]] <- km_plot
    
    file_name <- paste("KM_Plot5_", mort_variable, "_", food_variable, ".tiff", sep = "")
    ggsave(file_name, plot = km_plot$plot, width = 5, height = 5, units = "in", dpi = 300)
  }
}

km_plots

getwd()


```











#One for the labels:
#Kapla MEier Kurves food_Mortality
```{r}
  mydata$mort_time_year<-mydata$mort_time/365

  mydata$mort_time_year <- round(mydata$mort_time_year, 2)
  is.numeric(mydata$res_cox_ln_meth_abso)
  mydata$res_cox_ln_meth_abso<-as.numeric(mydata$res_cox_ln_meth_abso)
  
  
  library(survival)
  library(survminer)
  library(ggpubr)
  
  #unloadNamespace("survminer")

#install.packages("survminer")
  library(survminer)
  
  
  #install.packages("survminer")

  library(ggplot2)
  library(ggpubr)
  library(survival)
library(survminer)
  
  
  
  # alle Pakete neu installieren
  #install.packages(c("survival", "ggplot2", "survminer", "ggpubr"))
  is.numeric(mydata$res_cox_ln_meth_abso)
  library(dplyr)
  
  
  #The ntile function is then being used to calculate the percentile 
  #rank of each observation in the res_cox_ln_meth_abso column, divided into three groups.
  mydata <- mydata %>%
    mutate(res_cox_ln_meth_cat = ntile(res_cox_ln_meth_abso, 3))
  

    labels <- c("1- daily or almost daily", "2- several times a week", "3- about once a week","4- several times a month","5- once a month or less often","6- never or almost never")
    
    
  km_plot_all <- ggsurvplot(survfit(Surv(na.omit(mydata$mort_time_year), na.omit(mort_all)) ~ food_30, data = mydata), 
                            data = mydata, 
                            pval = TRUE,
                            pval.coord = c(2, 0.67),
                            pval.size = 9,  
                            title = "All-cause mortality
                            ",
                            xlab = "Time (years)",
                            ylab = "Survival Probability",
                            break.time.by = 5, 
                            conf.int = FALSE,
                              legend.labs = labels,
                            palette=c("#224b7a","#feae49","#44a5c2","green","yellow","red"), 
                            ylim = c(0.5, 1),
                            xlim= c(0,22),size=0.6,
  ggtheme = theme(
    panel.background = element_rect(fill='transparent'), #transparent panel bg
    plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
    panel.grid.major = element_blank(),
    plot.title = element_text(size=20),
    #remove major gridlines
   # panel.grid.minor = element_blank(), #remove minor gridlines
   axis.text.x = element_text(size = 30), # Größe der x-Achsentexte
   axis.title.x = element_text(size = 27), # Größe des x-Achsentitels
   axis.text.y = element_text(size = 30), # Größe der y-Achsentexte
   axis.title.y = element_text(size = 27)
  ))  +
  labs(color = NULL)
  
  
  km_plot_all 
  
  
  
  #install.packages("ggplot2")
  library(ggplot2)
  getwd()
  ggsave("Allmfood.tiff", width = 7, height = 5, units = "in", dpi = 300)  # Save the plot as an image
```
  















##############################################################################################################################################
# TREND
setwd("B:/Methanol_project/Official data")
getwd()

startdataT<-read.csv2("SHIP_2022_101_D_T0_20221116.csv", head=TRUE, sep=",")


library(readxl)
#ID
setwd("B:/Methanol_project/Official data")
ID<-read_excel("zz_nr.xlsx")



setwd("B:/Methanol_project/Official data")


#Metabolites
List.with.metabolitesT<-read.csv2("export_analyses_dataset_t0_food2.csv", head=TRUE, sep=",")
MetabolitenUndID2<-List.with.metabolitesT

Metabolites_ID<- merge(MetabolitenUndID2,ID, by=c("proband"))

#Metaboliten merge with ID mergen
for (i in 2:53){
  Metabolites_ID[, i]<-as.numeric(Metabolites_ID[, i])
  print(Metabolites_ID)[i]
}

dataT <- read_dta('ship_t0_pha.dta')
data2T<-dataT[c(1,8)]

# Metabolite_ID data merge with remaining Variables
startdata2T<- merge(startdataT,Metabolites_ID, by=c("zz_nr"))


## A. Data preprocessing
gfr_zz_nrT<-List.with.metabolitesT
mydataT<- merge(gfr_zz_nrT,startdata2T, by=c("proband"))
mydataT$PQN<-as.numeric(mydataT$PQN)
mydataT$ln_PQN<-log(mydataT$PQN)
mydataT$gfr_mdrd_t0<-as.numeric(mydataT$gfr_mdrd_t0)
mydataT$som_tail<-as.numeric(mydataT$som_tail)
mydataT$ggt_s<-as.numeric(mydataT$ggt_s)

Trend_before_Ex_onlyNMR <- mydataT[rowSums(!is.na(mydataT[,346:396])) > 0, ]

#B. Description before Exclusion ####
```{r}
startdataT$thro
#AGE

mean_age <- mean(Trend_before_Ex_onlyNMR$AGE_SHIP_T0)
range_age <- range(Trend_before_Ex_onlyNMR$AGE_SHIP_T0)
mean_age
range_age

which(colnames(startdataT) == "mort_all")
startdataT$mort_all


#Gender
num_female <- sum(Trend_before_Ex_onlyNMR$SEX_SHIP_T0 == "2", na.rm = TRUE)
num_non_missing <- sum(!is.na(Trend_before_Ex_onlyNMR$SEX_SHIP_T0))
percent_female <- num_female / num_non_missing * 100
percent_female
num_female

#som_tail
mean_som_tail<-mean(Trend_before_Ex_onlyNMR$som_tail, na.rm = TRUE)
sd_som_tail<- sd(Trend_before_Ex_onlyNMR$som_tail, na.rm = TRUE)
mean_som_tail
sd_som_tail
boxplot(Trend_before_Ex_onlyNMR$som_tail, main = "som_tail Boxplot")
outliers <- Trend_before_Ex_onlyNMR$som_tail > mean_som_tail + 4 * sd_som_tail | Trend_before_Ex_onlyNMR$som_tail < mean_som_tail - 4 * sd_som_tail

#  
sum(outliers, na.rm = TRUE)


#mydata$physact_s0
mean(is.na(Trend_before_Ex_onlyNMR$physact_t0)) * 100
num_yes<- sum(Trend_before_Ex_onlyNMR$physact_t0 == "0 - 0 - Nein", na.rm = TRUE)
num_non_missing <- sum(!is.na(Trend_before_Ex_onlyNMR$physact_t0))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes



#csmoking_s0

mean(is.na(Trend_before_Ex_onlyNMR$csmoking_t0)) * 100
num_yes<- sum(Trend_before_Ex_onlyNMR$csmoking_t0 == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(Trend_before_Ex_onlyNMR$csmoking_t0))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes



#alcohol_s2
Trend_before_Ex_onlyNMR$alcg30d_t0<-as.numeric(Trend_before_Ex_onlyNMR$alcg30d_t0)

mean(Trend_before_Ex_onlyNMR$alcg30d_t0, na.rm = TRUE)
sd(Trend_before_Ex_onlyNMR$alcg30d_t0, na.rm = TRUE)
mean(is.na(Trend_before_Ex_onlyNMR$alcg30d_t0)) * 100

mean_som_tail<-mean(Trend_before_Ex_onlyNMR$alcg30d_t0, na.rm = TRUE)
sd_som_tail<- sd(Trend_before_Ex_onlyNMR$alcg30d_t0, na.rm = TRUE)

boxplot(Trend_before_Ex_onlyNMR$alcg30d_t0, main = "som_tail Boxplot")
outliers <- Trend_before_Ex_onlyNMR$alcg30d_t0 > mean_som_tail + 4 * sd_som_tail | Trend_before_Ex_onlyNMR$alcg30d_t0 < mean_som_tail - 4 * sd_som_tail

# 
sum(outliers, na.rm = TRUE)



median(Trend_before_Ex_onlyNMR$alcg30d_t0, na.rm = TRUE)
q1 <- quantile(Trend_before_Ex_onlyNMR$alcg30d_t0, 0.25, na.rm = TRUE)
q1
q3 <- quantile(Trend_before_Ex_onlyNMR$alcg30d_t0, 0.75, na.rm = TRUE)
q3


#mydata$edyrs_s0
median(Trend_before_Ex_onlyNMR$edyrs_t0, na.rm = TRUE)
q1 <- quantile(Trend_before_Ex_onlyNMR$edyrs_t0, 0.25, na.rm = TRUE)
q1
q3 <- quantile(Trend_before_Ex_onlyNMR$edyrs_t0, 0.75, na.rm = TRUE)
q3



#mydata$dschlaf


mean(is.na(Trend_before_Ex_onlyNMR$t0_schlaf_04)) * 100

num_yes<- sum(Trend_before_Ex_onlyNMR$t0_schlaf_04 == "1 - 4 - 7 mal", na.rm = TRUE)
num_non_missing <- sum(!is.na(Trend_before_Ex_onlyNMR$t0_schlaf_04))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes

num_yes<- sum(Trend_before_Ex_onlyNMR$t0_schlaf_04 == "2 - 1 - 3 mal", na.rm = TRUE)
num_non_missing <- sum(!is.na(Trend_before_Ex_onlyNMR$t0_schlaf_04))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes

num_yes<- sum(Trend_before_Ex_onlyNMR$t0_schlaf_04 == "3 - seltener als 1 mal in der woche", na.rm = TRUE)
num_non_missing <- sum(!is.na(Trend_before_Ex_onlyNMR$t0_schlaf_04))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes

num_yes<- sum(Trend_before_Ex_onlyNMR$t0_schlaf_04 == "4 - ich habe keine probleme durchzuschlafen.", na.rm = TRUE)
num_non_missing <- sum(!is.na(Trend_before_Ex_onlyNMR$t0_schlaf_04))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes

num_yes<- sum(Trend_before_Ex_onlyNMR$t0_schlaf_04 == "5 - ich werde nachts häufig wach, kann aber wieder einschlafen.", na.rm = TRUE)
num_non_missing <- sum(!is.na(Trend_before_Ex_onlyNMR$t0_schlaf_04))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes


num_yes<- sum(Trend_before_Ex_onlyNMR$t0_schlaf_04 == "9", na.rm = TRUE)
num_non_missing <- sum(!is.na(Trend_before_Ex_onlyNMR$t0_schlaf_04))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes



#mydata$crp_hs
Trend_before_Ex_onlyNMR$crp_hs_re<-as.numeric(Trend_before_Ex_onlyNMR$crp_hs_re)
mean(log(Trend_before_Ex_onlyNMR$crp_hs_re), na.rm = TRUE)
sd(log(Trend_before_Ex_onlyNMR$crp_hs_re), na.rm = TRUE)


mean_crp_hs<-mean(log(Trend_before_Ex_onlyNMR$crp_hs_re), na.rm = TRUE)
sd_crp_hs<- sd(log(Trend_before_Ex_onlyNMR$crp_hs_re), na.rm = TRUE)

boxplot(log(Trend_before_Ex_onlyNMR$crp_hs_re), main = "som_tail Boxplot")
outliers <- Trend_before_Ex_onlyNMR$crp_hs_re > mean_crp_hs + 4 * sd_crp_hs | Trend_before_Ex_onlyNMR$crp_hs_re < mean_crp_hs - 4 * sd_crp_hs

# 
sum(outliers, na.rm = TRUE)

median(Trend_before_Ex_onlyNMR$crp_hs_re, na.rm = TRUE)
q1 <- quantile(Trend_before_Ex_onlyNMR$crp_hs_re, 0.25, na.rm = TRUE)
q1
q3 <- quantile(Trend_before_Ex_onlyNMR$crp_hs_re, 0.75, na.rm = TRUE)
q3


#eGFR
mean_gfr_mdrd_s0<-mean(log(Trend_before_Ex_onlyNMR$gfr_mdrd_t0), na.rm = TRUE)
sd_gfr_mdrd_s0<- sd(log(Trend_before_Ex_onlyNMR$gfr_mdrd_t0), na.rm = TRUE)

boxplot(Trend_before_Ex_onlyNMR$gfr_mdrd_t0, main = "som_tail Boxplot")
outliers <- Trend_before_Ex_onlyNMR$gfr_mdrd_t0> mean_gfr_mdrd_s0 + 4 * sd_gfr_mdrd_s0 | Trend_before_Ex_onlyNMR$gfr_mdrd_t0 < mean_gfr_mdrd_s0 - 4 * sd_gfr_mdrd_s0



#  
sum(outliers, na.rm = TRUE)



median(Trend_before_Ex_onlyNMR$gfr_mdrd_t0, na.rm = TRUE)
Trend_before_Ex_onlyNMR$gfr_mdrd_t0<-as.numeric(Trend_before_Ex_onlyNMR$gfr_mdrd_t0)
q1 <- quantile(Trend_before_Ex_onlyNMR$gfr_mdrd_t0, 0.25, na.rm = TRUE)
q1
q3 <- quantile(Trend_before_Ex_onlyNMR$gfr_mdrd_t0, 0.75, na.rm = TRUE)
q3



#Total hdl cholesterol ratio
Trend_before_Ex_onlyNMR$lchol_hdl_t0<-as.numeric(Trend_before_Ex_onlyNMR$chol_hdl_t0)
mean(Trend_before_Ex_onlyNMR$chol_hdl_t0, na.rm = TRUE)
sd(Trend_before_Ex_onlyNMR$chol_hdl_t0, na.rm = TRUE)


#  
sum(outliers, na.rm = TRUE)
is.numeric(Trend_before_Ex_onlyNMR$chol_hdl_t0)
Trend_before_Ex_onlyNMR$chol_hdl_t0<-as.numeric(Trend_before_Ex_onlyNMR$chol_hdl_t0)
median(Trend_before_Ex_onlyNMR$chol_hdl_t0, na.rm = TRUE)
q1 <- quantile(Trend_before_Ex_onlyNMR$chol_hdl_t0, 0.25, na.rm = TRUE)
q1
q3 <- quantile(Trend_before_Ex_onlyNMR$chol_hdl_t0, 0.75, na.rm = TRUE)
q3



#ldlch
Trend_before_Ex_onlyNMR$ldlch<-as.numeric(Trend_before_Ex_onlyNMR$ldlch)
mean(Trend_before_Ex_onlyNMR$ldlch, na.rm = TRUE)
sd(Trend_before_Ex_onlyNMR$ldlch, na.rm = TRUE)

mean_ldlch<-mean(log(Trend_before_Ex_onlyNMR$ldlch), na.rm = TRUE)
sd_ldlch<- sd(log(Trend_before_Ex_onlyNMR$ldlch), na.rm = TRUE)

boxplot(Trend_before_Ex_onlyNMR$ldlch, main = "som_tail Boxplot")
outliers <- Trend_before_Ex_onlyNMR$ldlch > mean_ldlch + 4 * sd_ldlch | Trend_before_Ex_onlyNMR$ldlch < mean_ldlch - 4 * sd_ldlch

#  
sum(outliers, na.rm = TRUE)

median(Trend_before_Ex_onlyNMR$ldlch, na.rm = TRUE)
q1 <- quantile(Trend_before_Ex_onlyNMR$ldlch, 0.25, na.rm = TRUE)
q1
q3 <- quantile(Trend_before_Ex_onlyNMR$ldlch, 0.75, na.rm = TRUE)
q3



#hdlch
Trend_before_Ex_onlyNMR$hdlch<-as.numeric(Trend_before_Ex_onlyNMR$hdlch)
mean(Trend_before_Ex_onlyNMR$hdlch, na.rm = TRUE)
sd(Trend_before_Ex_onlyNMR$hdlch, na.rm = TRUE)

mean_hdlch<-mean(log(Trend_before_Ex_onlyNMR$hdlch), na.rm = TRUE)
sd_hdlch<- sd(log(Trend_before_Ex_onlyNMR$hdlch), na.rm = TRUE)

boxplot(Trend_before_Ex_onlyNMR$hdlch, main = "som_tail Boxplot")
outliers <- Trend_before_Ex_onlyNMR$hdlch > mean_hdlch + 4 * sd_hdlch | Trend_before_Ex_onlyNMR$hdlch < mean_hdlch - 4 * sd_hdlch

#  
sum(outliers, na.rm = TRUE)

median(Trend_before_Ex_onlyNMR$hdlch, na.rm = TRUE)
q1 <- quantile(Trend_before_Ex_onlyNMR$hdlch, 0.25, na.rm = TRUE)
q1
q3 <- quantile(Trend_before_Ex_onlyNMR$hdlch, 0.75, na.rm = TRUE)
q3


#mydata$tg_s
#  
sum(outliers, na.rm = TRUE)

Trend_before_Ex_onlyNMR$tg_s<-as.numeric(Trend_before_Ex_onlyNMR$tg_s)
median(Trend_before_Ex_onlyNMR$tg_s, na.rm = TRUE)
q1 <- quantile(Trend_before_Ex_onlyNMR$tg_s, 0.25, na.rm = TRUE)
q1
q3 <- quantile(Trend_before_Ex_onlyNMR$tg_s, 0.75, na.rm = TRUE)
q3





#rbc
Trend_before_Ex_onlyNMR$rbc<-as.numeric(Trend_before_Ex_onlyNMR$rbc)
median(Trend_before_Ex_onlyNMR$rbc, na.rm = TRUE)
Trend_before_Ex_onlyNMR$rbc<-as.numeric(Trend_before_Ex_onlyNMR$rbc)
q1 <- quantile(Trend_before_Ex_onlyNMR$rbc, 0.25, na.rm = TRUE)
q1
q3 <- quantile(Trend_before_Ex_onlyNMR$rbc, 0.75, na.rm = TRUE)
q3

mean_rbc<-mean(log(Trend_before_Ex_onlyNMR$rbc), na.rm = TRUE)
sd_rbc<- sd(log(Trend_before_Ex_onlyNMR$rbc), na.rm = TRUE)

boxplot(Trend_before_Ex_onlyNMR$rbc, main = "som_tail Boxplot")
outliers <- Trend_before_Ex_onlyNMR$rbc > mean_rbc + 4 * sd_rbc | Trend_before_Ex_onlyNMR$rbc < mean_rbc - 4 * sd_rbc

#  
sum(outliers, na.rm = TRUE)




#mydata$wbc
Trend_before_Ex_onlyNMR$wbc<-as.numeric(Trend_before_Ex_onlyNMR$wbc)
median(Trend_before_Ex_onlyNMR$wbc, na.rm = TRUE)
Trend_before_Ex_onlyNMR$wbc<-as.numeric(Trend_before_Ex_onlyNMR$wbc)
q1 <- quantile(Trend_before_Ex_onlyNMR$wbc, 0.25, na.rm = TRUE)
q1
q3 <- quantile(Trend_before_Ex_onlyNMR$wbc, 0.75, na.rm = TRUE)
q3



mean_wbc<-mean(log(Trend_before_Ex_onlyNMR$wbc), na.rm = TRUE)
sd_wbc<- sd(log(Trend_before_Ex_onlyNMR$wbc), na.rm = TRUE)

boxplot(Trend_before_Ex_onlyNMR$wbc, main = "som_tail Boxplot")
outliers <- Trend_before_Ex_onlyNMR$wbc > mean_wbc + 4 * sd_wbc | Trend_before_Ex_onlyNMR$wbc < mean_wbc - 4 * sd_wbc

#  
sum(outliers, na.rm = TRUE)



#hba1c
Trend_before_Ex_onlyNMR$hba1c<-as.numeric(Trend_before_Ex_onlyNMR$hba1c)
median(Trend_before_Ex_onlyNMR$hba1c, na.rm = TRUE)
q1 <- quantile(Trend_before_Ex_onlyNMR$hba1c, 0.25, na.rm = TRUE)
q1
q3 <- quantile(Trend_before_Ex_onlyNMR$hba1c, 0.75, na.rm = TRUE)
q3

mean(is.na(Trend_before_Ex_onlyNMR$hba1c)) * 100

mean_hba1c<-mean(log(Trend_before_Ex_onlyNMR$hba1c), na.rm = TRUE)
sd_hba1c<- sd(log(Trend_before_Ex_onlyNMR$hba1c), na.rm = TRUE)

boxplot(Trend_before_Ex_onlyNMR$hba1c, main = "som_tail Boxplot")
outliers <- Trend_before_Ex_onlyNMR$hba1c > mean_hba1c + 4 * sd_hba1c | Trend_before_Ex_onlyNMR$hba1c < mean_hba1c - 4 * sd_hba1c

#  
sum(outliers, na.rm = TRUE)





#log(ggt) 

median(Trend_before_Ex_onlyNMR$ggt_s, na.rm = TRUE)
q1 <- quantile(Trend_before_Ex_onlyNMR$ggt_s, 0.25, na.rm = TRUE)

q1

q3 <- quantile(Trend_before_Ex_onlyNMR$ggt_s, 0.75, na.rm = TRUE)
q3


mean_ggt<-mean(log(Trend_before_Ex_onlyNMR$ggt_s), na.rm = TRUE)
sd_ggt<- sd(log(Trend_before_Ex_onlyNMR$ggt_s), na.rm = TRUE)

boxplot(Trend_before_Ex_onlyNMR$ggt_s, main = "som_tail Boxplot")
outliers <- Trend_before_Ex_onlyNMR$ggt_s > mean_ggt + 4 * sd_ggt | Trend_before_Ex_onlyNMR$ggt_s < mean_ggt - 4 * sd_ggt

#  
sum(outliers, na.rm = TRUE)



#diabetes_s2
num_yes<- sum(Trend_before_Ex_onlyNMR$diabetes_t0 == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(Trend_before_Ex_onlyNMR$diabetes_t0))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes



#hyp_s0
num_0 <- sum(Trend_before_Ex_onlyNMR$hyp_t0 == "0", na.rm = TRUE)
num_non_missing <- sum(!is.na(Trend_before_Ex_onlyNMR$hyp_t0))
percent_0 <- num_0 / num_non_missing * 100
percent_0
num_0



#metsyn_t0

which(colnames(List.with.metabolitesT)=="metsyn_t0")
gfr_zz_nrT<-List.with.metabolitesT[,c(52,485)]
Trend_before_Ex_onlyNMR2<- merge(gfr_zz_nrT,Trend_before_Ex_onlyNMR, by=c("proband"))
Trend_before_Ex_onlyNMR2$metsyn_t0 <- ifelse(Trend_before_Ex_onlyNMR2$metsyn_t0 %in% c("0 - nein"), 0,
                         ifelse(Trend_before_Ex_onlyNMR2$metsyn_t0 %in% c("1 - ja"), 1, Trend_before_Ex_onlyNMR2$metsyn_t0))
Trend_before_Ex_onlyNMR2$metsyn_t0<-as.numeric(Trend_before_Ex_onlyNMR2$metsyn_t0)
num_yes<- sum(Trend_before_Ex_onlyNMR2$metsyn_t0 == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(Trend_before_Ex_onlyNMR2$metsyn_t0))
percent_yes <- num_yes / num_non_missing * 100
percent_yes





#gfr_mdrd_s0
Trend_before_Ex_onlyNMR$gfr_mdrd_t02 <- ifelse(Trend_before_Ex_onlyNMR$gfr_mdrd_t0 < 60, 1, 2)

Trend_before_Ex_onlyNMR$gfr_mdrd_t0
num_yes<- sum(Trend_before_Ex_onlyNMR$gfr_mdrd_t02 == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(Trend_before_Ex_onlyNMR$gfr_mdrd_t02))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes


#MI
num_yes<- sum(Trend_before_Ex_onlyNMR$t0_chro_20c == "-1", na.rm = TRUE)
num_non_missing <- sum(!is.na(Trend_before_Ex_onlyNMR$t0_chro_20c))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes

```





#C. Data Exclusion
#C.1 Included Participants
```{r}
#Only include participants with targeted urinary metabolite concentration profile
Allproband_TREND0 <- mydataT[rowSums(!is.na(mydataT[,346:396])) > 0, ]

#Exclude participants taking antibiotics
subset_data <- subset(data2T, atc == "J01CA04"|
                        atc == "J01"|
                        atc == "J01CE02"|
                        atc == "J01CE03"|
                        atc == "J01CR02"|
                        atc == "J01FA06"|
                        atc == "J01AA08"|
                        atc == "J01FF01"|
                        atc == "J01MA06"|
                        atc == "J01XE01")

data3T <- subset_data[!duplicated(subset_data[,"zz_nr"]),]

mydata7T<- merge(Allproband_TREND0,data3T, by="zz_nr",all.x = TRUE, all.y = FALSE)

mydata7TT <- mydata7T[is.na(mydata7T$atc), ]

#Exclude pregnant women
mydatat0<-mydata7TT
#mydatat0 <- mydata7TT[!(mydata7TT$BLT_GRAV == 1), , drop = TRUE]

```


```{r}
#colnames(mydatat0)[377,363]


mydataexpt0<-mydatat0

selected_columns <- mydataexpt0[, c(377, 363)]

for (col in colnames(selected_columns)) {
  mydataexpt0[[paste0(col, "_exp")]] <- exp(selected_columns[[col]])
}

na_count <- sum(is.na(mydataexpt0[, 399]))
total_count <- 992
na_percent <- (na_count / total_count) * 100
#mean_values <- colMeans(mydataexpt0[, c(399)], na.rm = TRUE)

mean(mydataexpt0$ln_meth_abso_exp)
mean(mydataexpt0$ln_crea_abso_exp)

na_count <- sum(is.na(mydataexpt0[, 400]))
na_percent <- (na_count / total_count) * 100


names<-("Methanol") 
column_numbers <- 399:400

mydataexpt0[, 399] <- as.numeric(mydataexpt0[, 399])

mydataexpt0[, 400] <- as.numeric(mydataexpt0[, 400])


mean_values <- 186.9013 / 7.944976

sd(mydataexpt0$ln_meth_abso_exp)
sd(mydataexpt0$ln_crea_abso_exp)

194.5945/7.944976





```






#D. data cleaning
```{r}
mydatat0$gfr_mdrd_t0[mydatat0$gfr_mdrd_t0==".n"] <- NA
mydatat0$hyp_t0[mydatat0$hyp_t0==".n"] <- NA
mydatat0$hyp_t0[mydatat0$hyp_t0==".z"] <- NA
mydatat0$edyrs_t0[mydatat0$edyrs_t0==".n"] <- NA
mydatat0$edyrs_t0[mydatat0$edyrs_t0==".z"] <- NA



mydatat0$csmoking_t0[mydatat0$csmoking_t0==".q"] <- NA
mydatat0$csmoking_t0[mydatat0$csmoking_t0==".v"] <- NA
mydatat0$diabetes_t0[mydatat0$diabetes_t0==".n"] <- NA
mydatat0$diabetes_t0[mydatat0$diabetes_t0==".z"] <- NA
mydatat0$som_tail[mydatat0$som_tail==".n"] <- NA
mydatat0$som_tail[mydatat0$som_tail==".z"] <- NA
```


#E. Outliers replaced by NA
```{r}
#test before


#mydatat0M<-mydatat0[, colSums(is.na(mydatat0[,377])) <= 496] #992/2


na_count <- sum(is.na(mydatat0[,377]))


mydatat0S<-mydatat0


mydataNAconv<-mydatat0

boxplot(mydatat0$ln_meth_abso)




for (i in 377){
  high <- mean(mydatat0[,i],na=TRUE) + sd(mydatat0[,i],na=TRUE) * 4
  low <- mean(mydatat0[,i],na=TRUE) - sd(mydatat0[,i],na=TRUE) * 4
  mydatat0$Outlier <- (mydatat0[,i] < low | mydatat0[,i] > high)
  mydatat0[,i][mydatat0$Outlier]=NA
  
} 


#test afterwards
boxplot(mydatat0$ln_meth_abso)




na_counts <- data.frame(Spalte = character(0), Anzahl_NA = numeric(0), stringsAsFactors = FALSE)

for (i in c(363,377)) {
  high <- mean(mydataNAconv[,i], na.rm = TRUE) + sd(mydataNAconv[,i], na.rm = TRUE) * 4
  low <- mean(mydataNAconv[,i], na.rm = TRUE) - sd(mydataNAconv[,i], na.rm = TRUE) * 4
  
  outlier_mask <- (mydataNAconv[,i] < low | mydataNAconv[,i] > high)
  num_outliers <- sum(outlier_mask, na.rm = TRUE)
  
  mydataNAconv[which(outlier_mask), i] <- NA
  
  na_counts <- rbind(na_counts, data.frame(Spalte = colnames(mydataNAconv)[i], Anzahl_NA = num_outliers))
}

print(na_counts)





```








#Data cleaning 
```{r}

for (i in 377){
  mydatat0[,i]<-as.numeric(mydatat0[,i])
  mydatat0[,i]<- scale(mydatat0[,i], center = TRUE, scale = TRUE)
}
is.numeric(mydatat0[,377])


mean_var <- mean(mydatat0$ln_meth_abso, na.rm = TRUE)
sd_var <- sd(mydatat0$ln_meth_abso, na.rm = TRUE)
if (abs(mean_var) < 0.01 && abs(sd_var - 1) < 0.01) {
  print("The variable is standardized")
} else {
  print("The variable is not standardized")
}

mydatat0$t0_ernaehr_01[mydatat0$t0_ernaehr_01=="998"] <- NA
```







# Table S6: description table food items: 
```{r}

mydatat0$t0_ernaehr_01[mydatat0$t0_ernaehr_01=="998"] <- NA
unique_values <- unique(mydatat0$t0_ernaehr_07)
print(unique_values)


result <- data.frame(food = character(),
                     percent_1 = numeric(),
                     percent_2 = numeric(),
                     percent_3 = numeric(),
                     percent_4 = numeric(),
                     percent_5 = numeric(),
                     percent_6 = numeric(),
                     percent_7 = numeric(),
                     stringsAsFactors = FALSE)



# Define food names
food_names <- c("meat(sausages excluded)","sausages, ham","fish","cooked potatoes",
                "fried potatoes, croquettes, French fries","pasta, e.g. spaghetti",
                "rice","salad or raw vegetable",
                "cooked vegetable","fresh fruit", "wholemeal bread, brown bread, crispbread",
                "oat flakes, cereals, cornflakes","eggs","cake, biscuits, cookies", 
                "candy/sweets (hard candy, filled chocolates, chocolate)","salty snacks")


for (i in 1:16) {
  
  
  food_var <- ifelse(i < 10, paste0("t0_ernaehr_0", i), paste0("t0_ernaehr_", i))
  
  # Calculate the frequencies for the current food variable
  freq <- table(mydatat0[, food_var], useNA = "ifany")
  # Calculate the percentage of responses for each category
  percent <- round(prop.table(freq) * 100, 1)
  
  # Add the results to the data frame
  result <- rbind(result, c(food_names[i], percent))
  
}

# Rename the columns in the data frame
names(result) <- c("food items", "every day or almost every day", "several times a week", 
                   "about once a week", "several times a month",
                   "about once a month or fewer", "never or almost never","missing")

result



library(openxlsx)
write.xlsx(result, file = "B:/Methanol_project/Official data/food3_2.xlsx")



```






# rows where less then 10 persons selecting a category in an food item variable- put in next category
```{r}

table(mydatat0$t0_ernaehr_01)
table(mydata7TT$t0_ernaehr_02)
table(mydata7TT$t0_ernaehr_03)
table(mydata7TT$t0_ernaehr_04)
table(mydata7TT$t0_ernaehr_05)
table(mydata7TT$t0_ernaehr_06)
table(mydata7TT$t0_ernaehr_07)
table(mydata7TT$t0_ernaehr_08)
table(mydata7TT$t0_ernaehr_09)
table(mydata7TT$t0_ernaehr_10)
table(mydata7TT$t0_ernaehr_11)
table(mydata7TT$t0_ernaehr_12)
table(mydata7TT$t0_ernaehr_13)
table(mydata7TT$t0_ernaehr_14)
table(mydata7TT$t0_ernaehr_15)
table(mydata7TT$t0_ernaehr_16)




mydatat0$t0_ernaehr_01[mydatat0$t0_ernaehr_01=="998"] <- NA
food_vars <- paste0("t0_ernaehr_0", 1:9)

# Schleife über jede food-Variable
for (food_var in food_vars) {
  # Berechne die Häufigkeiten der Ausprägungen
  freq <- table(mydatat0[[food_var]])
  
  # Überprüfe, ob eine Ausprägung kleiner als 10 ist
  if (any(freq < 10)) {
    # Erhalte die Ausprägungen mit mindestens 10 Personen
    cat("In", food_var, "gibt es Ausprägungen mit weniger als 10 Personen.\n")
  }
}

#In t0_ernaehr_05 gibt es Ausprägungen mit weniger als 10 Personen.
#In t0_ernaehr_06 gibt es Ausprägungen mit weniger als 10 Personen.
#In t0_ernaehr_07 gibt es Ausprägungen mit weniger als 10 Personen.
#In t0_ernaehr_09 gibt es Ausprägungen mit weniger als 10 Personen.



# Liste aller food-Variablen
food_vars <- paste0("t0_ernaehr_", 10:16)

# Schleife über jede food-Variable
for (food_var in food_vars) {
  # Berechne die Häufigkeiten der Ausprägungen
  freq <- table(mydatat0[[food_var]])
  
  # Überprüfe, ob eine Ausprägung kleiner als 10 ist
  if (any(freq[1:6] < 10)) {
    cat("In", food_var, "gibt es Ausprägungen mit weniger als 10 Personen.\n")
  }
}




#In t0_ernaehr_10 gibt es Ausprägungen mit weniger als 10 Personen.



table(mydatat0$t0_ernaehr_10)
mydatat0$t0_ernaehr_10 <- ifelse(mydatat0$t0_ernaehr_10 == 6, 5, mydatat0$t0_ernaehr_10)
table(mydatat0$t0_ernaehr_10)


table(mydatat0$t0_ernaehr_05)
mydatat0$t0_ernaehr_05 <- ifelse(mydatat0$t0_ernaehr_05 == 1, 2, mydatat0$t0_ernaehr_05)
table(mydatat0$t0_ernaehr_05)


table(mydatat0$t0_ernaehr_06)
mydatat0$t0_ernaehr_06 <- ifelse(mydatat0$t0_ernaehr_06 == 1, 2, mydatat0$t0_ernaehr_06)
table(mydatat0$t0_ernaehr_06)


table(mydatat0$t0_ernaehr_07)
mydatat0$t0_ernaehr_07 <- ifelse(mydatat0$t0_ernaehr_07 == 1, 2, mydatat0$t0_ernaehr_07)
table(mydatat0$t0_ernaehr_07)


table(mydatat0$t0_ernaehr_09)
mydatat0$t0_ernaehr_09 <- ifelse(mydatat0$t0_ernaehr_09 == 6, 5, mydatat0$t0_ernaehr_09)
table(mydatat0$t0_ernaehr_09)

```




#Data cleaning metabolites 
```{r}

mydatat0[, 82:97][mydatat0[, 82:97] == 9] <- NA
mydatat0[, 82:97][mydatat0[, 82:97] == 8] <- NA



mydatat0$som_tail[mydatat0$som_tail==""] <- NA


mydatat0$rbc<-as.numeric(mydatat0$rbc)
mydatat0$wbc<-as.numeric(mydatat0$wbc)
mydatat0$chol_hdl_t0<-as.numeric(mydatat0$chol_hdl_t0)
mydatat0$tg_s<-as.numeric(mydatat0$tg_s)
mydatat0$som_tail<-as.numeric(mydatat0$som_tail)
mydatat0$gfr_mdrd_t0<-as.numeric(mydatat0$gfr_mdrd_t0)
mydatat0$ggt_s<-as.numeric(mydatat0$ggt_s)



anzahl_na <- sum(is.na(mydatat0$ln_meth_abso))
print(anzahl_na)
```


#F. Description table after Exclusion
```{r}
mydata_t_after_ex<-mydatat0

#AGE
mean_age <- mean(mydata_t_after_ex$AGE_SHIP_T0)
range_age <- range(mydata_t_after_ex$AGE_SHIP_T0)
mean_age
range_age 
sd_age<- sd(mydata_t_after_ex$AGE_SHIP_T0, na.rm = TRUE)




#Gender
num_female <- sum(mydata_t_after_ex$SEX_SHIP_T0 == "2", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_t_after_ex$SEX_SHIP_T0))
percent_female <- num_female / num_non_missing * 100
percent_female
num_female


#som_tail
mean_som_tail<-mean(mydata_t_after_ex$som_tail, na.rm = TRUE)
sd_som_tail<- sd(mydata_t_after_ex$som_tail, na.rm = TRUE)
mean_som_tail
sd_som_tail
boxplot(mydata_t_after_ex$som_tail, main = "som_tail Boxplot")
outliers <- mydata_t_after_ex$som_tail > mean_som_tail + 4 * sd_som_tail | mydata_t_after_ex$som_tail < mean_som_tail - 4 * sd_som_tail

#  
sum(outliers, na.rm = TRUE)




#csmoking_s0

mean(is.na(mydata_t_after_ex$csmoking_t0)) * 100
num_yes<- sum(mydata_t_after_ex$csmoking_t0 == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_t_after_ex$csmoking_t0))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
 num_yes

#alcohol_s2

mydata_t_after_ex$alcg30d_t0<-as.numeric(mydata_t_after_ex$alcg30d_t0)

mean(mydata_t_after_ex$alcg30d_t0, na.rm = TRUE)
sd(mydata_t_after_ex$alcg30d_t0, na.rm = TRUE)
mean(is.na(mydata_t_after_ex$alcg30d_t0)) * 100

mean_som_tail<-mean(mydata_t_after_ex$alcg30d_t0, na.rm = TRUE)
sd_som_tail<- sd(mydata_t_after_ex$alcg30d_t0, na.rm = TRUE)

boxplot(mydata_t_after_ex$alcg30d_t0, main = "som_tail Boxplot")
outliers <- mydata_t_after_ex$alcg30d_t0 > mean_som_tail + 4 * sd_som_tail | mydata_t_after_ex$alcg30d_t0 < mean_som_tail - 4 * sd_som_tail

#  
sum(outliers, na.rm = TRUE)



median(mydata_t_after_ex$alcg30d_t0, na.rm = TRUE)
q1 <- quantile(mydata_t_after_ex$alcg30d_t0, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_t_after_ex$alcg30d_t0, 0.75, na.rm = TRUE)
q3






#hyp_s0
mydata_t_after_ex$hyp_t0

num_0 <- sum(mydata_t_after_ex$hyp_t0 == "0", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_t_after_ex$hyp_t0))
percent_0 <- num_0 / num_non_missing * 100
percent_0
num_0



#chol_hdl_s0
mydata_t_after_ex$chol_hdl_t0<-as.numeric(mydata_t_after_ex$chol_hdl_t0)
mean(mydata_t_after_ex$chol_hdl_t0, na.rm = TRUE)
sd(mydata_t_after_ex$chol_hdl_t0, na.rm = TRUE)


mean_chol_hdl_s0<-mean(log(mydata_t_after_ex$chol_hdl_t0), na.rm = TRUE)
sd_chol_hdl_s0<- sd(log(mydata_t_after_ex$chol_hdl_t0), na.rm = TRUE)

boxplot(mydata_t_after_ex$chol_hdl_t0, main = "som_tail Boxplot")
outliers <- mydata_t_after_ex$chol_hdl_t0 > mean_chol_hdl_s0 + 4 * sd_chol_hdl_s0 | mydata_t_after_ex$chol_hdl_t0 < mydata_t_after_ex$chol_hdl_t0 - 4 * sd_chol_hdl_s0

#  
sum(outliers, na.rm = TRUE)

median(mydata_t_after_ex$chol_hdl_t0, na.rm = TRUE)
q1 <- quantile(mydata_t_after_ex$chol_hdl_t0, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_t_after_ex$chol_hdl_t0, 0.75, na.rm = TRUE)
q3


#mydata$tg_s
mydata_t_after_ex$tg_s
mydata_t_after_ex$tg_s<-as.numeric(mydata_t_after_ex$tg_s)
median(mydata_t_after_ex$tg_s, na.rm = TRUE)
q1 <- quantile(mydata_t_after_ex$tg_s, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_t_after_ex$tg_s, 0.75, na.rm = TRUE)
q3

mean_tg_s<-mean(log(mydata_t_after_ex$tg_s), na.rm = TRUE)
sd_tg_s<- sd(log(mydata_t_after_ex$tg_s), na.rm = TRUE)

boxplot(mydata_t_after_ex$tg_s, main = "som_tail Boxplot")
outliers <- mydata_t_after_ex$tg_s > mean_chol_hdl_s0 + 4 * sd_tg_s | mydata_t_after_ex$tg_s < mean_tg_s - 4 * sd_tg_s

#  
sum(outliers, na.rm = TRUE)




#hba1c
mydata_t_after_ex$hba1c<-as.numeric(mydata_t_after_ex$hba1c)
median(mydata_t_after_ex$hba1c, na.rm = TRUE)
q1 <- quantile(mydata_t_after_ex$hba1c, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_t_after_ex$hba1c, 0.75, na.rm = TRUE)
q3

mean(is.na(mydata_t_after_ex$hba1c)) * 100

mean_hba1c<-mean(log(mydata_t_after_ex$hba1c), na.rm = TRUE)
sd_hba1c<- sd(log(mydata_t_after_ex$hba1c), na.rm = TRUE)

boxplot(mydata_t_after_ex$hba1c, main = "som_tail Boxplot")
outliers <- mydata_t_after_ex$hba1c > mean_hba1c + 4 * sd_hba1c | mydata_t_after_ex$hba1c < mean_hba1c - 4 * sd_hba1c

#  
sum(outliers, na.rm = TRUE)





#eGFR
mean_gfr_mdrd_s0<-mean(log(mydata_t_after_ex$gfr_mdrd_t0), na.rm = TRUE)
sd_gfr_mdrd_s0<- sd(log(mydata_t_after_ex$gfr_mdrd_t0), na.rm = TRUE)

boxplot(mydata_t_after_ex$gfr_mdrd_t0, main = "som_tail Boxplot")
outliers <- mydata_t_after_ex$gfr_mdrd_t0> mean_gfr_mdrd_s0 + 4 * sd_gfr_mdrd_s0 | mydata_t_after_ex$gfr_mdrd_t0 < mean_gfr_mdrd_s0 - 4 * sd_gfr_mdrd_s0
sum(outliers, na.rm = TRUE)

median(mydata_t_after_ex$gfr_mdrd_t0, na.rm = TRUE)
mydata_t_after_ex$gfr_mdrd_t0<-as.numeric(mydata_t_after_ex$gfr_mdrd_t0)
q1 <- quantile(mydata_t_after_ex$gfr_mdrd_t0, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_t_after_ex$gfr_mdrd_t0, 0.75, na.rm = TRUE)
q3




#mydata$physact_s0
num_yes<- sum(mydata_t_after_ex$physact_t0 == "0 - 0 - Nein", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_t_after_ex$physact_t0))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes 




#mydata$edyrs_s0
median(mydata_t_after_ex$edyrs_t0, na.rm = TRUE)
q1 <- quantile(mydata_t_after_ex$edyrs_t0, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_t_after_ex$edyrs_t0, 0.75, na.rm = TRUE)
q3




#mydata$dschlaf


mean(is.na(mydata_t_after_ex$t0_schlaf_04)) * 100

num_yes<- sum(mydata_t_after_ex$t0_schlaf_04 == "1 - 4 - 7 mal", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_t_after_ex$t0_schlaf_04))
percent_yes <- num_yes / num_non_missing * 100
percent_yes


num_yes<- sum(mydata_t_after_ex$t0_schlaf_04 == "2 - 1 - 3 mal", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_t_after_ex$t0_schlaf_04))
percent_yes <- num_yes / num_non_missing * 100
percent_yes

num_yes<- sum(mydata_t_after_ex$t0_schlaf_04 == "3 - seltener als 1 mal in der woche", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_t_after_ex$t0_schlaf_04))
percent_yes <- num_yes / num_non_missing * 100
percent_yes

num_yes<- sum(mydata_t_after_ex$t0_schlaf_04 == "4 - ich habe keine probleme durchzuschlafen.", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_t_after_ex$t0_schlaf_04))
percent_yes <- num_yes / num_non_missing * 100
percent_yes

num_yes<- sum(mydata_t_after_ex$t0_schlaf_04 == "5 - ich werde nachts häufig wach, kann aber wieder einschlafen.", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_t_after_ex$t0_schlaf_04))
percent_yes <- num_yes / num_non_missing * 100
percent_yes



#mydata$wbc

mean_wbc<-mean(log(mydata_t_after_ex$wbc), na.rm = TRUE)
Allproband_TREND0$wbc<-as.numeric(Allproband_TREND0$wbc)
sd_wbc<- sd(log(Allproband_TREND0$wbc), na.rm = TRUE)

boxplot(mydata_t_after_ex$wbc, main = "som_tail Boxplot")
outliers <- mydata_t_after_ex$wbc > mean_wbc + 4 * sd_wbc | mydata_t_after_ex$wbc < mean_tg_s - 4 * sd_wbc

#  
sum(outliers, na.rm = TRUE)


mydata_t_after_ex$wbc
mydata_t_after_ex$wbc<-as.numeric(mydata_t_after_ex$wbc)
median(mydata_t_after_ex$wbc, na.rm = TRUE)
mydata_t_after_ex$wbc<-as.numeric(mydata_t_after_ex$wbc)
q1 <- quantile(mydata_t_after_ex$wbc, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_t_after_ex$wbc, 0.75, na.rm = TRUE)
q3





#rbc

mean_rbc<-mean(log(mydata_t_after_ex$rbc), na.rm = TRUE)
sd_rbc<- sd(log(mydata_t_after_ex$rbc), na.rm = TRUE)

boxplot(mydata_t_after_ex$rbc, main = "som_tail Boxplot")
outliers <- mydata_t_after_ex$rbc > mean_rbc + 4 * sd_rbc | mydata_t_after_ex$rbc < mean_rbc - 4 * sd_rbc

#  
sum(outliers, na.rm = TRUE)
mydata_t_after_ex$rbc<-as.numeric(mydata_t_after_ex$rbc)
median(mydata_t_after_ex$rbc, na.rm = TRUE)
mydata_t_after_ex$wbc<-as.numeric(mydata_t_after_ex$rbc)
q1 <- quantile(mydata_t_after_ex$rbc, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_t_after_ex$rbc, 0.75, na.rm = TRUE)
q3



#mydata$crp_hs
mydata_t_after_ex$crp_hs_re<-as.numeric(mydata_t_after_ex$crp_hs_re)
mean(log(mydata_t_after_ex$crp_hs_re), na.rm = TRUE)
sd(log(mydata_t_after_ex$crp_hs_re), na.rm = TRUE)


mean_crp_hs<-mean(log(mydata_t_after_ex$crp_hs_re), na.rm = TRUE)
sd_crp_hs<- sd(log(mydata_t_after_ex$crp_hs_re), na.rm = TRUE)

boxplot(log(mydata_t_after_ex$crp_hs_re), main = "som_tail Boxplot")
outliers <- mydata_t_after_ex$crp_hs_re > mean_crp_hs + 4 * sd_crp_hs | mydata_t_after_ex$crp_hs_re < mean_crp_hs - 4 * sd_crp_hs

#  
sum(outliers, na.rm = TRUE)

median(mydata_t_after_ex$crp_hs_re, na.rm = TRUE)
q1 <- quantile(mydata_t_after_ex$crp_hs_re, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_t_after_ex$crp_hs_re, 0.75, na.rm = TRUE)
q3



#log(ggt) 

mean_ggt<-mean(log(mydata_t_after_ex$ggt_s), na.rm = TRUE)
sd_ggt<- sd(log(mydata_t_after_ex$ggt_s), na.rm = TRUE)

boxplot(mydata_t_after_ex$ggt_s, main = "som_tail Boxplot")
outliers <- mydata_t_after_ex$ggt_s > mean_ggt + 4 * sd_ggt | mydata_t_after_ex$ggt_s < mean_ggt - 4 * sd_ggt

#  
sum(outliers, na.rm = TRUE)

mydata_t_after_ex$ggt_s

median(mydata_t_after_ex$ggt_s, na.rm = TRUE)
q1 <- quantile(mydata_t_after_ex$ggt_s, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_t_after_ex$ggt_s, 0.75, na.rm = TRUE)
q3




#metsyn_t0
which(colnames(List.with.metabolitesT)=="metsyn_t0")
gfr_zz_nrT<-List.with.metabolitesT[,c(52,485)]
mydata_t_after_ex2<- merge(gfr_zz_nrT,mydata_t_after_ex, by=c("proband"))
mydata_t_after_ex2$metsyn_t0 <- ifelse(mydata_t_after_ex2$metsyn_t0 %in% c("0 - nein"), 0,
                         ifelse(mydata_t_after_ex2$metsyn_t0 %in% c("1 - ja"), 1, mydata_t_after_ex2$metsyn_t0))
mydata_t_after_ex2$metsyn_t0<-as.numeric(mydata_t_after_ex2$metsyn_t0)
num_yes<- sum(mydata_t_after_ex2$metsyn_t0 == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_t_after_ex2$metsyn_t0))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes






#MI
mydata_t_after_ex$gfr_mdrd_t02 <- ifelse(mydata_t_after_ex$gfr_mdrd_t0 < 60, 1, 2)

mydata_t_after_ex$gfr_mdrd_t0
num_yes<- sum(mydata_t_after_ex$gfr_mdrd_t02 == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_t_after_ex$gfr_mdrd_t02))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes



#diabetes_s2
num_yes<- sum(mydata_t_after_ex$diabetes_t0 == "1", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_t_after_ex$diabetes_t0))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes

#ckd

num_yes<- sum(mydata_t_after_ex$t0_chro_20c == "-1", na.rm = TRUE)
num_non_missing <- sum(!is.na(mydata_t_after_ex$t0_chro_20c))
percent_yes <- num_yes / num_non_missing * 100
percent_yes
num_yes



#hdlch
mydata_t_after_ex$hdlch<-as.numeric(mydata_t_after_ex$hdlch)
mean(mydata_t_after_ex$hdlch, na.rm = TRUE)
sd(mydata_t_after_ex$hdlch, na.rm = TRUE)

mean_hdlch<-mean(log(mydata_t_after_ex$hdlch), na.rm = TRUE)
sd_hdlch<- sd(log(mydata_t_after_ex$hdlch), na.rm = TRUE)

boxplot(mydata_t_after_ex$hdlch, main = "som_tail Boxplot")
outliers <- mydata_t_after_ex$hdlch > mean_hdlch + 4 * sd_hdlch | mydata_t_after_ex$hdlch < mean_hdlch - 4 * sd_hdlch

#  
sum(outliers, na.rm = TRUE)

median(mydata_t_after_ex$hdlch, na.rm = TRUE)
q1 <- quantile(mydata_t_after_ex$hdlch, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_t_after_ex$hdlch, 0.75, na.rm = TRUE)
q3



#ldlch
mydata_t_after_ex$ldlch<-as.numeric(mydata_t_after_ex$ldlch)
mean(mydata_t_after_ex$ldlch, na.rm = TRUE)
sd(mydata_t_after_ex$ldlch, na.rm = TRUE)

mean_ldlch<-mean(log(mydata_t_after_ex$ldlch), na.rm = TRUE)
sd_ldlch<- sd(log(mydata_t_after_ex$ldlch), na.rm = TRUE)

boxplot(mydata_t_after_ex$ldlch, main = "som_tail Boxplot")
outliers <- mydata_t_after_ex$ldlch > mean_ldlch + 4 * sd_ldlch | mydata_t_after_ex$ldlch < mean_ldlch - 4 * sd_ldlch

#  
sum(outliers, na.rm = TRUE)

median(mydata_t_after_ex$ldlch, na.rm = TRUE)
q1 <- quantile(mydata_t_after_ex$ldlch, 0.25, na.rm = TRUE)
q1
q3 <- quantile(mydata_t_after_ex$ldlch, 0.75, na.rm = TRUE)
q3

```





#F. linear regression
```{r}
pvalglo<-c()

listmet <- vector(mode = "list", length = 381-345)
listfooditem <- vector(mode = "list", length = 97-81)
myListx5 <- c(listmet, listfooditem)
a <- c(listmet, listfooditem)
myListx6 <- c(listmet, listfooditem)

myListxSaT <- c(listmet, listfooditem)





#mydata$eGFR_ckd<-as.numeric(mydatat0$eGFR_ckd)

mydatat0$alcg30d_t0<-as.numeric(mydatat0$alcg30d_t0)
mydatat0$ph_u<-as.numeric(mydatat0$ph_u)


#unknown
#mydatat00<-mydatat0[,c(1:87,89:395)]

library(olsrr)
#168:200
for (i in 377){
#  for (j in 82:97){
  for (j in 82:97){
    Regression_Model_food<-lm(mydatat0[,i]~factor(mydatat0[,j])
                              +rcs(ln_PQN,4)
                              +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0
                              +rcs(som_tail,4)
                              +rcs(gfr_mdrd_t0,4)
                              +ph_u
                              +physact_t0
                              +log(ggt_s)
                              +hyp_t0
                              +edyrs_t0
                              +csmoking_t0
                              +alcg30d_t0*SEX_SHIP_T0
                              +factor(t0_schlaf_04)
                              +tg_s
                              +wbc
                              +rbc
                              +chol_hdl_t0
                              +diabetes_t0,na.action = na.exclude
                              ,
                              data=mydatat0)
    
    
    
    
    myListx5[[i-376]][[j-81]] <- Regression_Model_food
    
    
    
    if (j >= 86 && j <= 88) {
      vartest <- c("factor(mydatat0[, j])3", "factor(mydatat0[, j])4", "factor(mydatat0[, j])5", "factor(mydatat0[, j])6")
    } else if (j >= 90 && j <= 91) {
      vartest <- c("factor(mydatat0[, j])2", "factor(mydatat0[, j])3", "factor(mydatat0[, j])4", "factor(mydatat0[, j])5")
    } else {
      vartest <- c("factor(mydatat0[, j])2", "factor(mydatat0[, j])3", "factor(mydatat0[, j])4", "factor(mydatat0[, j])5", "factor(mydatat0[, j])6")
    }
    
  #  Wald-test: prüft, ob eine oder alle unabhängigen Variablen 
  #             einen signifikanten Beitrag zu einem generalisierten 
  #             linearen Regressionsmodell liefern
   waldtest <- car::linearHypothesis(Regression_Model_food, vartest, vcov = vcovHC(Regression_Model_food, type="HC1"))
    summary(waldtest)
    print(waldtest)
    
    
samplesize<-length(Regression_Model_food$residuals)
    myListx6[[i-376]][[j-81]] <- waldtest
    pvalglo2 <- (myListx6[[i-376]][[j-81]]$"Pr(>F)"[2])
    myListx6[[i-376]][[j-81]]<-pvalglo2
    
    myListxSaT[[i-376]][[j-81]] <- samplesize
    
  }
}





# Wald test: Consider a multi-level categorical predictor, even with just 3 levels.
#          With standard treatment coding of that predictor, the reported 
#          coefficients are for the differences of each of 2 levels from the 
#          reference level. The apparent "significance" of one level thus can 
#          depend on the choice of the reference level. What you really care 
#          about is the association of the entire categorical variable with outcome, 
#          including all levels regardless of choice of reference level.
# plot(Regression_Model_food)


myListx6[sapply(myListx6, is.null)] <- NULL


metabolites.labeled <- c("Methanol")
  





myListx6[sapply(myListx6, is.null)] <- NULL


names(myListxSaT)<-metabolites.labeled


names(myListx6)<-metabolites.labeled

my_names <- c("meat(sausages excluded)","sausages, ham","fish","cooked potatoes",
              "fried potatoes, croquettes, French fries","pasta, e.g. spaghetti",
   "rice","salad or raw vegetable",
  "cooked vegetable","fresh fruit", "wholemeal bread, brown bread, crispbread",
  "oat flakes, cereals, cornflakes","eggs","cake, biscuits, cookies", 
  "candy/sweets (hard candy, filled chocolates, chocolate)","salty snacks")

myListxSaT[sapply(myListxSaT, is.null)] <- NULL
metabolites.fooditems2T <- lapply(myListxSaT, FUN = function(x){
  names(x) <- my_names
  return(x)
})

myListx6[sapply(myListx6, is.null)] <- NULL
metabolites.fooditems <- lapply(myListx6, FUN = function(x){
  names(x) <- my_names
  return(x)
})


```



# Convert nested list to data frame by column

```{r}

my_list_data_cbind2T <- as.data.frame(do.call(cbind,           
                                            metabolites.fooditems2T))
d1222T <- data.frame(pvalue=unlist(my_list_data_cbind2T, use.names = TRUE))

d1222T$metabolites <- rownames(d1222T)
d1222T$food_items<-unlist(lapply(strsplit(d1222T$metabolites, '.', fixed = TRUE), '[', 2))
d1222T$metabolites<-unlist(lapply(strsplit(d1222T$metabolites, '.', fixed = TRUE), '[', 1))

rownames(d1222T) <- NULL


my_list_data_cbind <- as.data.frame(do.call(cbind,           
                                            metabolites.fooditems))
d1 <- data.frame(pvalue=unlist(my_list_data_cbind, use.names = TRUE))

d1$metabolites <- rownames(d1)



d1$FDR <- p.adjust(d1$pvalue, method = "fdr", n = length(d1$pvalue))
p_adjusted <- d1$pvalue[d1$FDR < 0.05]
cat(sprintf("%d significant results at FDR < 0.05 (threshold: %.2e)\n", length(p_adjusted), max(d1$FDR[d1$FDR < 0.05])))


d3<-group_by(d1,FDR<0.05)
d4<-d3
d4$"FDR < 0.05" <- NULL
d4$metabolite<-sub("\\..*", "", d4$metabolites)
d4$food_items<-unlist(lapply(strsplit(d4$metabolites, '.', fixed = TRUE), '[', 2))

d4 <- d4[-2]


d4<-data.frame(metabolites = d4$metabolite,
               food_items= d4$food_items,
               pvalue_glo= d4$pvalue,
               FDR_glo=d4$FDR)

d4$FDR_glo<-as.numeric(d4$FDR_glo)
d5<-d4[order(d4$metabolites, d4$FDR_glo),]




# Convert nested list to data frame by column
my_list_data_cbind <- as.data.frame(do.call(cbind,           
                                            metabolites.fooditems))
d1 <- data.frame(pvalue=unlist(my_list_data_cbind, use.names = TRUE))

d1$metabolites <- rownames(d1)



d1$FDR <- p.adjust(d1$pvalue, method = "fdr")
p_adjusted <- d1$pvalue[d1$FDR < 0.05]
cat(sprintf("%d significant results at FDR < 0.05 (threshold: %.2e)\n", length(p_adjusted), max(d1$FDR[d1$FDR < 0.05])))



d3<-group_by(d1,FDR<0.05)
d4<-d3
d4$"FDR < 0.05" <- NULL
d4$metabolite<-sub("\\..*", "", d4$metabolites)
d4$food_items<-unlist(lapply(strsplit(d4$metabolites, '.', fixed = TRUE), '[', 2))

d4 <- d4[-2]


d4<-data.frame(metabolites = d4$metabolite,
               food_items= d4$food_items,
               pvalue_glo= d4$pvalue,
               FDR_glo=d4$FDR)

d4$FDR_glo<-as.numeric(d4$FDR_glo)
d5<-d4[order(d4$metabolites, d4$FDR_glo),]
```

# ß-values comparison between 1&2 and 5&6, 3&4=NA
```{r}
for (i in 82:97){
  food.cat3<-NULL
  food.cat3[which(mydatat0[,i]=='1')]<-1
  food.cat3[which(mydatat0[,i]=='2')]<-1
  food.cat3[which(mydatat0[,i]=='3')]<-9
  food.cat3[which(mydatat0[,i]=='4')]<-9
  food.cat3[which(mydatat0[,i]=='5')]<-0
  food.cat3[which(mydatat0[,i]=='6')]<-0
  mydatat0$food.cat3<-food.cat3
  mydatat0[, paste("cat2.", colnames(mydatat0)[i], sep="")]<-food.cat3
}

#391-406
#linear regression
pvalglo<-c()
coefficients<-c()
#install.packages("dplyr")
library(dplyr)
listmet <- vector(mode = "list", length = 1)
listfooditem <- vector(mode = "list", length = 406-390)
myListx5 <- c(listmet, listfooditem, vector(mode = "list", length = 16))
a <- c(listmet, listfooditem)
myListx6 <- c(listmet, listfooditem, vector(mode = "list", length = 16))
myListx7 <- c(listmet, listfooditem, vector(mode = "list", length = 16))
myListx8 <- c(listmet, listfooditem, vector(mode = "list", length = 16))

myListx9 <- listfooditem
myListx10 <- listfooditem
coefficients<-c()


#Calculating frequencies

#(451:483)
#1775:1807

for (j in 401:416){
  frequent<-length(which(mydatat0[,j]==1))/(length(which(mydatat0[,j]==1))+length(which(mydatat0[,j]==0)))
  rare<-(length(which(mydatat0[,j]==0)))/(length(which(mydatat0[,j]==1))+length(which(mydatat0[,j]==0)))
  myListx9[[j-400]] <- c(rare,frequent)
}

 
# Convert nested list to data frame by column
my_list_data_cbind200 <- as.data.frame(do.call(cbind,           
                                               myListx9))

transpose <- data.frame(rare=unlist(my_list_data_cbind200, use.names = TRUE))
transpose <- as.data.frame(matrix(transpose$rare, ncol = 2, byrow = TRUE))

library(dplyr)
transpose$food_items <- my_names
transpose<-rename(transpose, precentage_rare=V1)
transpose<-rename(transpose, precentage_frequent=V2)



library(tidyverse)
library(splines)
library(rms)
library(sandwich)
library(olsrr)

listmet <- vector(mode = "list", length = 381-346)
listfooditem <- vector(mode = "list", length = 401-386)
myListx5 <- c(listmet, listfooditem)
a <- c(listmet, listfooditem)
myListx6 <- c(listmet, listfooditem)
myListx7 <- c(listmet, listfooditem)
myListx8 <- c(listmet, listfooditem)

myListx9 <- listfooditem
myListx10 <- listfooditem
coefficients<-c()

library(sandwich)
library(dplyr)
for (i in 377){
  for (j in 401:416){
    
    Regression_Model_food<-lm(mydatat0[,i]~factor(mydatat0[,j])
                              +rcs(ln_PQN,4)
                              +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0
                              +rcs(som_tail,4)
                              +rcs(gfr_mdrd_t0,4)
                              +ph_u
                              +physact_t0
                              +log(ggt_s)
                              +hyp_t0
                              +edyrs_t0
                              +csmoking_t0
                              +alcg30d_t0*SEX_SHIP_T0
                              +factor(t0_schlaf_04)
                              +tg_s
                              +wbc
                              +rbc
                              +chol_hdl_t0
                              +diabetes_t0,na.action = na.exclude
                              ,
                              data=mydatat0)
    
    summary(Regression_Model_food)
    print(Regression_Model_food)
    
    
    
    myListx5[[i-376]][[j-400]] <- Regression_Model_food
    
    coefficient<-summary(Regression_Model_food)$coefficients[2]
   # print(coefficient)
    
    conf.intervall<-confint(Regression_Model_food, 'factor(mydatat0[, j])1', level=0.95)
    myListx8[[i-376]][[j-400]]<-c(coefficient,conf.intervall)
    
    
    #Wald-test
    vartest <- c("factor(mydatat0[, j])1")
    waldtest <- car::linearHypothesis(Regression_Model_food, vartest, vcov = vcovHC(Regression_Model_food, type="HC1"))
    #waldtest<- wald.test(Sigma = vcov(Regression_Model_food), b = coef(Regression_Model_food), Terms = 3:4)
    summary(waldtest)
    print(waldtest)
    
    myListx6[[i-376]][[j-400]] <- waldtest
    pvalglo2 <- (myListx6[[i-376]][[j-400]]$"Pr(>F)"[2])
    myListx6[[i-376]][[j-400]]<-pvalglo2
    
    
  }
}

#beta-values(CI)
myListx8[sapply(myListx8, is.null)] <- NULL

names(myListx8)<-metabolites.labeled

metabolites.fooditems8 <- lapply(myListx8, FUN = function(x){
  names(x) <- my_names
  return(x)
})


my_list_data_cbind8 <- as.data.frame(do.call(cbind,           
                                             metabolites.fooditems8))
my_list_data_cbind8 <- lapply(my_list_data_cbind8, gsub, pattern='c', replacement='')



d1_8 <- data.frame(beta_CI=unlist(my_list_data_cbind8, use.names = TRUE))
d1_8$metabolites <- rownames(d1)


d1_8<-group_by(d1_8,metabolites)
d1_8$food_items<-unlist(lapply(strsplit(d1_8$metabolites, '.', fixed = TRUE), '[', 2))

d1_8$metabolites<-sub("\\..*", "", d1_8$metabolites)








#p-value not global
myListx6[sapply(myListx6, is.null)] <- NULL

names(myListx6)<-metabolites.labeled

metabolites.fooditems <- lapply(myListx6, FUN = function(x){
  names(x) <- my_names
  return(x)
})








#Convert nested list to data frame by column
my_list_data_cbind <- as.data.frame(do.call(cbind,           
                                            metabolites.fooditems))
d1 <- data.frame(pvalue=unlist(my_list_data_cbind, use.names = TRUE))

d1$metabolites <- rownames(d1)


#FDR
d1$FDR <- p.adjust(d1$pvalue, method = "fdr")
p_adjusted <- d1$pvalue[d1$FDR < 0.05]
cat(sprintf("%d significant results at FDR < 0.05 (threshold: %.2e)\n", length(p_adjusted), max(d1$FDR[d1$FDR < 0.05])))



d3<-group_by(d1,FDR<0.05)
d4<-d3
d4$"FDR < 0.05" <- NULL
d4$metabolite<-sub("\\..*", "", d4$metabolites)
d4$food_items<-unlist(lapply(strsplit(d4$metabolites, '.', fixed = TRUE), '[', 2))

d4 <- d4[-2]


d4<-data.frame(metabolites = d4$metabolite,
               food_items= d4$food_items,
               pvalue= d4$pvalue,
               FDR=d4$FDR)

d4$FDR<-as.numeric(d4$FDR)

d5_2<-d4[order(d4$metabolites, d4$FDR),]
#4.989920e-26
#6.916030e-23

library(openxlsx)
write.xlsx(d5_2, file="2beta1_2versusbeta5_12.xlsx", overwrite=TRUE, 
           sheetNAME="Metafood")



#Combine the two datasets
each.category_onlyonecat<- merge(x=d5_2,y=d5, all.x=TRUE)


withfreq<- merge(each.category_onlyonecat,transpose, by=c("food_items"))

withfreq2<-withfreq[c(2,1,8,7,5,3,6,4)] 

finaldataset<- merge(withfreq2,d1_8, by=c("metabolites","food_items"))


finaldataset<-finaldataset[order(finaldataset$FDR_glo),]

finaldataset2<-finaldataset[c(1,2,3,4,9,5,6,7,8)]



library(openxlsx)
write.xlsx(finaldataset2, file = "C:/Users/KlierK/Documents/June/TREND0meth2.xlsx", overwrite = TRUE, 
           sheetName = "Metafood")


#Methanol and rounded
finaldataset2$FDR <- format(finaldataset2$FDR, scientific = TRUE, digits = 2)
finaldataset2$FDR_glo <- format(finaldataset2$FDR_glo, scientific = TRUE, digits = 2)
finaldataset2$pvalue_glo <- format(finaldataset2$pvalue_glo, scientific = TRUE, digits = 2)
finaldataset2$pvalue <- format(finaldataset2$pvalue, scientific = TRUE, digits = 2)

finaldataset2$precentage_frequent <- format(finaldataset2$precentage_frequent, digits = 1)
finaldataset2$precentage_rare <- format(finaldataset2$precentage_rare, digits = 1)



format_and_round <- function(text) {
  values <- gsub("\\(|\\)", "", text)  # Klammern entfernen
  values <- unlist(strsplit(values, ", "))  # Aufteilen der Werte
  rounded_values <- round(as.numeric(values), digits = 2)  # Runden auf 2 Nachkommastellen
  
  formatted_text <- paste0(rounded_values[1], " (", paste(rounded_values[-1], collapse = ", "), ")")
  return(formatted_text)
}

# Anwenden der Funktion auf alle Werte in beta_CI
finaldataset2$formatted_beta_CI <- sapply(finaldataset2$beta_CI, format_and_round)
finaldataset10 <- subset(finaldataset2, select = -c(beta_CI))

new_order <- order(finaldataset10$metabolites)
finaldataset10 <- finaldataset10[new_order, ]



colnames(d1222T)[colnames(d1222T) == "pvalue"] <- "sample size"


finaldataset_sampleSizeT<- merge(d1222T,finaldataset10, by=c("food_items","metabolites"))



write.xlsx(finaldataset10, file="TREND1.xlsx", overwrite=TRUE, 
           sheetNAME="Metafood")
```


#G. data preparing
```{r}


my_comparisons <- list( c("1", "2"), c("1", "3"), c("1", "4"),c("1", "5"),c("1", "6") )



empty_list <- vector(mode = "list", length = 60-2)
pval <- c()
probandid <- c()


mydatat0$gfr_mdrd_t0[mydatat0$gfr_mdrd_t0==".n"] <- NA



###



library(dplyr)
library(olsrr)
library(rms)
#168:200
for (i in 377){
  #  for (j in 82:97){
    Regression_Model_food<-lm(mydatat0[,i]~
                              +rcs(ln_PQN,4)
                              +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0
                              +rcs(som_tail,4)
                              +rcs(gfr_mdrd_t0,4)
                              +ph_u
                              +physact_t0
                              +log(ggt_s)
                              +hyp_t0
                              +edyrs_t0
                              +csmoking_t0
                              +alcg30d_t0*SEX_SHIP_T0
                              +factor(t0_schlaf_04)
                              +tg_s
                              +wbc
                              +rbc
                              +chol_hdl_t0
                              +diabetes_t0,na.action = na.exclude
                              ,
                              data=mydatat0)
    
    
    summary(Regression_Model_food)
    
    
    
    print(Regression_Model_food)
    empty_list[[i-376]] <- Regression_Model_food
    pval <- c(pval,summary(Regression_Model_food)$coefficients[4,4])
    
    probandid <- c(probandid, mydatat0$proband[i])
    Residuals<-(-1)*(fitted(Regression_Model_food)-mydatat0[, i])
    mydatat0[, paste("res_", colnames(mydatat0)[i], sep="")] <- Residuals
    
    # print(qplot(fitted.values(Regression_Model),residuals(Regression_Model))+geom_smooth(formula = y ~ x,method="lm",se=F))
}

```








#H. regression ~behaviour factors
#H.1 Methanol~Basic covariates:
#H.1.1 sex  (adj. for PQN, ph_u, SEX)
```{r}
library(magrittr)
library(rms)
library(car)
#dd = datadist(mydatat0)
#options(datadist = "dd")
Regression_Model<-lm(mydatat0[,377]~ 
                       SEX_SHIP_T0*rcs(AGE_SHIP_T0,4)
                     +rcs(ln_PQN,4)
                     +ph_u, 
                     na.action = na.exclude,
                     data=mydatat0)

summary(Regression_Model)




length(Regression_Model$residuals)

waldtestw <- car::linearHypothesis(Regression_Model, c("SEX_SHIP_T0:rcs(AGE_SHIP_T0, 4)AGE_SHIP_T0", "SEX_SHIP_T0:rcs(AGE_SHIP_T0, 4)AGE_SHIP_T0'", "SEX_SHIP_T0:rcs(AGE_SHIP_T0, 4)AGE_SHIP_T0''"),
                                   #title="treatment:gender:phase:hour", 
                                   #idata=idata, idesign=~phase*hour,
                                   # iterms="phase:hour"
                                   type="HC1")

summary(waldtestw)
print(waldtestw)


pglo_w<-waldtestw$"Pr(>F)"[2]
pglo_w


```




#H.1.2 age  (adj. for PQN, ph_u, SEX)
```{r}
library(rms)
library(car)
library(sandwich)
#dd = datadist(mydatat0)
#options(datadist = "dd")


#ols for beta
Regression_Model_age<-lm(ln_meth_abso~ 
                           rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0
                         +rcs(ln_PQN,4)
                         +ph_u
                         ,
                         na.action = na.exclude,
                         data=mydatat0)

summary(Regression_Model_age)
print(Regression_Model_age)



vartest <- c("rcs(AGE_SHIP_T0, 4)AGE_SHIP_T0:SEX_SHIP_T0", "rcs(AGE_SHIP_T0, 4)AGE_SHIP_T0':SEX_SHIP_T0", "rcs(AGE_SHIP_T0, 4)AGE_SHIP_T0'':SEX_SHIP_T0")


#Wald-test
waldtestw <- car::linearHypothesis(Regression_Model_age, vartest, vcov = vcovHC(Regression_Model_age, type="HC1"))
summary(waldtestw)
print(waldtestw)

pglo_w<-waldtestw$"Pr(>F)"[2]
pglo_w


length(Regression_Model_age$residuals)

```



#H.1.3 waist circumference  (adj. for age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model_waist<-lm(ln_meth_abso~ 
                             rcs(som_tail,4)
                           + rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0
                           +rcs(ln_PQN,4)
                           +ph_u,
                           na.action = na.exclude
                           , data=mydatat0)

summary(Regression_Model_waist)


#Wald-test
vartest <- c("rcs(som_tail, 4)som_tail","rcs(som_tail, 4)som_tail'","rcs(som_tail, 4)som_tail''")
waldtestw <- car::linearHypothesis(Regression_Model_waist, vartest, vcov = vcovHC(Regression_Model_waist, type="HC1"))
#waldtest<- wald.test(Sigma = vcov(Regression_Model_food), b = coef(Regression_Model_food), Terms = 3:4)
summary(waldtestw)
print(waldtestw)

pglo_w<-waldtestw$"Pr(>F)"[2]
pglo_w
length(Regression_Model_waist$residuals)

```


#H.1.4 gfr  (waist circumference, adj. for age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model_gfr<-lm(ln_meth_abso~ 
                           rcs(gfr_mdrd_t0,4)
                         + rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0
                         +rcs(ln_PQN,4)
                         +ph_u,
                         na.action = na.exclude
                         , data=mydatat0)

summary(Regression_Model_gfr)




#Wald-test
vartest <- c("rcs(gfr_mdrd_t0, 4)gfr_mdrd_t0''","rcs(gfr_mdrd_t0, 4)gfr_mdrd_t0'","rcs(gfr_mdrd_t0, 4)gfr_mdrd_t0")

waldtestw <- car::linearHypothesis(Regression_Model_gfr, vartest, vcov = vcovHC(Regression_Model_gfr, type="HC1"))
summary(waldtestw)
print(waldtestw)

pglo_w<-waldtestw$"Pr(>F)"[2]
pglo_w
length(Regression_Model$residuals)




```






#H.2 Methanol~Behaviour covariates:
#H.2.1 smoking (adj. for waist circumference,age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model_smo<-lm(ln_meth_abso~ 
                           csmoking_t0
                         +alcg30d_t0*SEX_SHIP_T0
                         +rcs(gfr_mdrd_t0,4)
                         +rcs(som_tail,4)
                         +rcs(ln_PQN,4)
                         +edyrs_t0
                         +physact_t0
                         +ph_u
                         +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                         na.action = na.exclude, data=mydatat0)

summary(Regression_Model_smo)

length(Regression_Model_smo$residuals)

intervals <- confint(Regression_Model_smo)

lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]

results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model_smo)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model_smo)$coefficients[2,4], 20), nsmall = 20)
)

results 

p_value_intercept <- summary(Regression_Model_smo)$coefficients[2,4]
p_value_intercept




a<-coeftest(Regression_Model_smo, vcov = vcovHC(Regression_Model_smo, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model_smo)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model_smo)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 

```






##Extended Data Fig. S3: Graph smoking TREND
```{r}

empty_list <- vector(mode = "list", length = 60-50)
library(rms)
    
    for (i in 377){
Regression_Model<-lm(mydatat0[,i]~
                           +alcg30d_t0*SEX_SHIP_T0
                         +rcs(gfr_mdrd_t0,4)
                         +rcs(som_tail,4)
                         +rcs(ln_PQN,4)
                         +edyrs_t0
                         +physact_t0
                         +ph_u
                         +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                         na.action = na.exclude, data=mydatat0)

empty_list[[i-350]] <- Regression_Model
pval <- c(pval,summary(Regression_Model)$coefficients[4,4])

probandid <- c(probandid, mydatat0$proband[i])
Residuals<-(-1)*(fitted(Regression_Model)-mydatat0[, i])
mydatat0[, paste("ressm_", colnames(mydatat0)[i], sep="")] <- Residuals

}
    
    #mydatat0$ressm_ln_meth_abso

#install.packages("ggforce")
#install.packages("ggforce", version = "0.3.1")
library(ggplot2)
library(ggforce)
#install.packages("ggbracket")
#library(ggbracket)

library(ggplot2)
library(ggforce)
library(ggplot2)
#install.packages("ggalt")
#library(ggalt)

update.packages("ggplot2")
library("ggplot2")

#smoking
mydatat01 <- subset(mydatat0, !is.na(csmoking_t0))
mydatat01$res_ln_meth_abso


startdata8 <- mydatat01[!(mydatat01$csmoking_t0 == 9),]

startdata8$ressm_ln_meth_abso
startdata8$csmoking_t0
startdata8$csmoking_t0 <- ifelse(startdata8$csmoking_t0 == 0, "no smoker", "smoker")

startdata8$ressm_ln_meth_abso
b <- ggplot(startdata8, 
            aes(x = factor(csmoking_t0), 
                y = ressm_ln_meth_abso)) +
  geom_violin(aes(fill = factor(csmoking_t0)),
              trim = FALSE, width = 0.6, size = 0.8, draw_quantiles = TRUE) +
  scale_fill_manual(values = c("#005293", "#2F74B3")) + # manually set colors
  geom_boxplot(width = .2, 
               fill = "gray81",
               outlier.color = "gray81",
               outlier.size = 2, size = 0.8) +
  labs(title = "TREND Study", x = "", y = "Methanol [res.]") +
  theme_bw() +
  theme(plot.title = element_text(size = 15),
        axis.text.x = element_text(size = 15),
        axis.text.y = element_text(size = 15))+
  guides(fill = "none") # add this line to remove the fill legend
b

#update.packages("ggalt")
#library(ggalt)
#install.packages("ggplot2")
library(ggplot2)
library(ggforce)
update.packages("ggplot2")
#install.packages("ggplot2")
library(ggplot2)
library(ggpubr)
smoking2 <- b + geom_bracket(
  xmin = "no smoker", xmax = "smoker", y.position =4,
  label = "FDR: 1.57e-2", 
  tip.length = c(0.02, 0.02), vjust = 2,
  label.size = 4
)+
  geom_hline(yintercept = 0, linetype = "dashed", size=0.8) +
  theme_bw() +
  theme(panel.background = element_rect(fill = NA), # remove panel background fill
        plot.background = element_rect(fill = NA), # remove plot background fill
        plot.title = element_text(size = 20),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 20),
        axis.title.y= element_text (size=25),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.line = element_line(),
        panel.border = element_blank())

smoking2


ggsave("B:/Methanol_project/smoking_TREND.png", plot = smoking2, width = 9, height = 10, units = "cm", dpi = 300)
```









#H.2.2 alcohol (adj. for waist circumference,age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       alcg30d_t0*SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +edyrs_t0
                     +physact_t0
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)
length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]

p_value_intercept




a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```


#H.2.3 education (adj., waist circumference,age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       edyrs_t0
                     +alcg30d_t0*SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +physact_t0
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)

length(Regression_Model$residuals)


intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept






a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 


```




#H.2.4 physical activity (adj., waist circumference,age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       physact_t0
                     +edyrs_t0
                     +alcg30d_t0*SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)


length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept



a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```





#H.3 Methanol- pyhsiologische parameter
#H.3.1 tg(adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       log(tg_s)
                     +physact_t0
                     +edyrs_t0
                     +alcg30d_t0*SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)

length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept


a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```





#H.3.2 log(crp) (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}

mydatat0$crp_hs_re<-as.numeric(mydatat0$crp_hs_re)
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       log(crp_hs_re)
                     +physact_t0
                     +edyrs_t0
                     +alcg30d_t0*SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)


length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept




a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```




#H.3.3 log(ggt) (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       log(ggt_s)+
                       +physact_t0
                     +edyrs_t0
                     +alcg30d_t0*SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)

length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept




a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```





#H.3.4 wbc (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       wbc+
                       +physact_t0
                     +edyrs_t0
                     +alcg30d_t0*SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)

length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept




a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```






#H.3.5 rbc (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       rbc+
                       +physact_t0
                     +edyrs_t0
                     +alcg30d_t0*SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)


length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept




a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```




#H.3.6 ldlch (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
mydatat0$ldlch<-as.numeric(mydatat0$ldlch)

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       ldlch+
                       +physact_t0
                     +edyrs_t0
                     +alcg30d_t0*SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)


length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept




a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```


#H.3.7 hdlch (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
mydatat0$hdlch<-as.numeric(mydatat0$hdlch)

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       hdlch+
                       +physact_t0
                     +edyrs_t0
                     +alcg30d_t0*SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)


length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept




a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```




#H.3.8 hba1c (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
mydatat0$hba1c<-as.numeric(mydatat0$hba1c)

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       hba1c+
                       +physact_t0
                     +edyrs_t0
                     +alcg30d_t0*SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)



length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept




a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```








#H.4 Methanol~ clinical phenotypes
#H.4.1 diabetes_t0 (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       factor(diabetes_t0)+
                       +physact_t0
                     +edyrs_t0
                     +alcg30d_t0*SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)


length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept




a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```


#H.4 Methanol~ clinical phenotypes
#H.4.1 hypertension (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       hyp_t0 +
                       +physact_t0
                     +edyrs_t0
                     +alcg30d_t0*SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)


length(Regression_Model$residuals)

intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept




a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```



#H.4.2 metabolisches syndrom (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
which(colnames(List.with.metabolitesT)=="metsyn_t0")
gfr_zz_nrT<-List.with.metabolitesT[,c(52,485)]
mydatat0<- merge(gfr_zz_nrT,mydatat0, by=c("proband"))
mydatat0$metsyn_t0 <- ifelse(mydatat0$metsyn_t0 %in% c("0 - nein"), 0,
                         ifelse(mydatat0$metsyn_t0 %in% c("1 - ja"), 1, mydatat0$metsyn_t0))
mydatat0$metsyn_t0<-as.numeric(mydatat0$metsyn_t0)
 
library(rms)
mydatat0$metsyn_t0
Regression_Model<-lm(ln_meth_abso~ 
                       metsyn_t0 +
                       +physact_t0
                     +edyrs_t0
                     +alcg30d_t0*SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)


length(Regression_Model$residuals)
intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept




a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```




#H.4.3 MI (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
which(colnames(List.with.metabolitesT)=="t0_chro_20c")
gfr_zz_nrT<-List.with.metabolitesT[,c(52,2791)]
mydatat03<- merge(gfr_zz_nrT,mydatat0, by=c("proband"))

mydatat03$t0_chro_20c1 <- ifelse(mydatat03$t0_chro_20c.x %in% c("0 - Nein"), 0,
                             ifelse(mydatat03$t0_chro_20c.x %in% c("1 - Ja","-1 - Ja"), 1, mydatat03$t0_chro_20c.x))
mydatat03$t0_chro_20c1<-as.numeric(mydatat03$t0_chro_20c1)


which(colnames(mydatat0)=="t0_chro_20c1")

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       t0_chro_20c1 +
                       +physact_t0
                     +edyrs_t0
                     +alcg30d_t0*SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat03)

summary(Regression_Model)


length(Regression_Model$residuals)
intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept




a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```





#H.4.4 CKD (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)

```{r}

mydatat0$gfr_mdrd_t02<-mydatat0$gfr_mdrd_t0


mydatat0$gfr_mdrd_t02[mydatat0$gfr_mdrd_t02<61 ] <- 1
mydatat0$gfr_mdrd_t02[mydatat0$gfr_mdrd_t02>60 ] <- 2

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       gfr_mdrd_t02 #Jetzt formatierte Variable CKD
                       +physact_t0
                     +edyrs_t0
                     +alcg30d_t0*SEX_SHIP_T0
                     +csmoking_t0
                     #  +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)

length(Regression_Model$residuals)
intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)
results
length(Regression_Model$residuals)


p_value_intercept <- summary(Regression_Model)$coefficients[2,4]


p_value_intercept




a<-coeftest(Regression_Model, vcov = vcovHC(Regression_Model, type = "HC1"))
a
summary(a)
print(a)
p_value_second <- a[2, "Pr(>|t|)"]
p_value_second
estimate_second <- a[2, "Estimate"]
estimate_second
estimate_second <- a[2, "Estimate"]
standard_error_second <- a[2, "Std. Error"]

#   
ci_lower_second <- estimate_second - 1.96 * standard_error_second
ci_upper_second <- estimate_second + 1.96 * standard_error_second

ci_lower_second
ci_upper_second


#Summary of both results
results_mit_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(estimate_second, 5), nsmall = 3) %>%
    paste0(" (", round(ci_lower_second, 5), ", ", round(ci_upper_second, 5), ")"),
  `P-Value` = format(round(p_value_second, 50), nsmall = 20)
)
results_mit_HC1 

results_ohne_HC1 <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 50), nsmall = 20)
)

results_ohne_HC1 
results_mit_HC1 
```





#Claculating FDR values
```{r}
test = c(0.324810,
         0.310001,
         0.019900,
         0.09735,
         
         0.00161,
         0.00020,
         0.12625,
         0.002239,
         
         0.4011022,
         0.636685,
         0.493391,
         0.95106,
         
         0.150398,
         
         0.8688295,
         0.58958,
         0.01668,
         
         0.81737,
         0.82909,
         0.21959,
         0.50066,
         0.09014)
p.adjust(test, method = "fdr")

```

#  Incremental R² 
```{r}

r_squared_results <- list()


calculate_r_squared <- function(model) {
  adjusted_r_squared <- summary(model)$adj.r.squared
  r_squared_results[[length(r_squared_results) + 1]] <<- adjusted_r_squared
}


library(sandwich)
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       +rcs(ln_PQN,4)
                     +ph_u, 
                     na.action = na.exclude,
                     data=mydatat0)

summary(Regression_Model)

PQN<-calculate_r_squared(Regression_Model)
PQN
0.5571097

```




# I. Incremental R square
# I.1.1 sex and age (adj. for PQN, ph_u)
```{r}
library(magrittr)
library(rms)
library(car)
#dd = datadist(mydata)
#options(datadist = "dd")
Regression_Model<-lm(ln_meth_abso~ 
                       SEX_SHIP_T0*rcs(AGE_SHIP_T0,4)
                     +rcs(ln_PQN,4)
                     +ph_u, 
                     na.action = na.exclude,
                     data=mydatat0)

summary(Regression_Model)


intervals <- confint(Regression_Model)
lower <- intervals[, "2.5 %"]
upper <- intervals[, "97.5 %"]


results <- data.frame(
  `Beta Coefficient (95% CI)` = format(round(coef(Regression_Model)[2], 5), nsmall = 3) %>%
    paste0(" (", round(lower[2], 5), ", ", round(upper[2], 5), ")"),
  `P-Value` = format(round(summary(Regression_Model)$coefficients[2,4], 20), nsmall = 20)
)


sex<-calculate_r_squared(Regression_Model)
sex

#sex and age - PQN ph
0.5628573-0.5571097

```

#I.1.2 waist circumference  (adj. for age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model_waist<-lm(ln_meth_abso~ 
                             rcs(som_tail,4)
                           + rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0
                           +rcs(ln_PQN,4)
                           +ph_u,
                           na.action = na.exclude
                           , data=mydatat0)

summary(Regression_Model_waist)


waist<-calculate_r_squared(Regression_Model_waist)
waist

#waist- PQN ph age sex
0.5658679-0.5628573 
```


#I.1.3 gfr  (waist circumference, adj. for age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model_gfr<-lm(ln_meth_abso~ 
                           rcs(gfr_mdrd_t0,4)
                         + rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0
                         +rcs(ln_PQN,4)
                         +ph_u,
                         na.action = na.exclude
                         , data=mydatat0)

summary(Regression_Model_gfr)

gfr<-calculate_r_squared(Regression_Model_gfr)
gfr

#eGFR- PQN ph age sex
0.564404-0.5628573 #PQN age sex
```


#All Basic covariates
```{r}

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

All_b<-calculate_r_squared(Regression_Model)
All_b
0.5669113
```

#I.2 Methanol~Behaviour covariates:
#I.2.1 smoking (adj. for waist circumference,age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model_smo<-lm(ln_meth_abso~ 
                           csmoking_t0
                         +rcs(gfr_mdrd_t0,4)
                         +rcs(som_tail,4)
                         +rcs(ln_PQN,4)
                         +ph_u
                         +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                         na.action = na.exclude, data=mydatat0)

summary(Regression_Model_smo)
smo<-calculate_r_squared(Regression_Model_smo)
smo

#smoking- PQN ph age sex eGFR waistc
0.5717329-0.5669113
```








#I.2.2 alcohol (adj. for waist circumference,age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       alcg30d_t0 *SEX_SHIP_T0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)
alc<-calculate_r_squared(Regression_Model)
alc

#alc- PQN ph age sex eGFR waistc
0.5752177-0.5669113
```

#I.2.3 physical activity (adj., waist circumference,age, PQN, ph_u, SEX)
```{r}

Regression_Model<-lm(ln_meth_abso~ 
                       physact_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)
pa<-calculate_r_squared(Regression_Model)
pa

#education- PQN ph age sex eGFR waistc
0.5687626-0.5669113
```

#I.2.4 education (adj., waist circumference,age, PQN, ph_u, SEX)
```{r}
Regression_Model<-lm(ln_meth_abso~ 
                       edyrs_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)
edu<-calculate_r_squared(Regression_Model)
edu

#education- PQN ph age sex eGFR waistc
0.5721748-0.5669113
```


#I.3 Methanol- pyhsiologische parameter
####All Basic covariates
```{r}

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0
                     +physact_t0
                     +edyrs_t0
                     +csmoking_t0
                     +alcg30d_t0 *SEX_SHIP_T0
                     ,
                     na.action = na.exclude, data=mydatat0)

All_phy<-calculate_r_squared(Regression_Model)
All_phy
0.584974
```


#I.3.1 tg(adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       log(tg_s)
                     +physact_t0
                     +edyrs_t0
                     +alcg30d_t0 *SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)

tg<-calculate_r_squared(Regression_Model)
tg

#tg- PQN ph age sex eGFR waistc smoking alcohol PA education
0.5848602-0.584974
```



#I.3.2  log(crp) (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       log(crp_hs_re)
                     +physact_t0
                     +edyrs_t0
                     +alcg30d_t0 *SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)

crp<-calculate_r_squared(Regression_Model)
crp


#crp- PQN ph age sex eGFR waistc smoking alcohol PA education
0.5929366-0.584974
```

#I.3.3  log(ggt) (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       log(ggt_s)+
                       +physact_t0
                     +edyrs_t0
                     +alcg30d_t0 *SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)
ggt<-calculate_r_squared(Regression_Model)
ggt


#ggt- PQN ph age sex eGFR waistc smoking alcohol PA education
0.5847322-0.584974
```




#I.3.4  wbc (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       wbc+
                       +physact_t0
                     +edyrs_t0
                     +alcg30d_t0 *SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)

wbc<-calculate_r_squared(Regression_Model)
wbc

#wbc- PQN ph age sex eGFR waistc smoking alcohol PA education
0.584322-0.584974
```




#I.3.5 rbc (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       rbc+
                       +physact_t0
                     +edyrs_t0
                     +alcg30d_t0 *SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)

rbc<-calculate_r_squared(Regression_Model)
rbc


#rbc- PQN ph age sex eGFR waistc smoking alcohol PA education
0.5852018-0.584974

```




#I.3.6 hdl (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       hdlch+
                       +physact_t0
                     +edyrs_t0
                     +alcg30d_t0 *SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)

hdl<-calculate_r_squared(Regression_Model)
hdl



#hdl- PQN ph age sex eGFR waistc smoking alcohol PA education
0.5845510717-0.584974
```


#I.3.7 ldl (adj. for education alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       ldlch+
                       +physact_t0
                     +edyrs_t0
                     +alcg30d_t0 *SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)

ldl<-calculate_r_squared(Regression_Model)
ldl



#ldl- PQN ph age sex eGFR waistc smoking alcohol PA education
0.5846770441-0.584974
```


#I.3.8 hba1c (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       hba1c+
                       +physact_t0
                     +edyrs_t0
                     +alcg30d_t0 *SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)

hba1c<-calculate_r_squared(Regression_Model)
hba1c



#hba1c- PQN ph age sex eGFR waistc smoking alcohol PA education
0.587583-0.584974
```



#I.4 Methanol~ clinical phenotypes
#I.4.1 diabetes_s0 (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       factor(diabetes_t0)+
                       +physact_t0
                     +edyrs_t0
                     +alcg30d_t0 *SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)

diab<-calculate_r_squared(Regression_Model)
diab


#dia- PQN ph age sex eGFR waistc smoking alcohol PA education
0.5845572-0.584974
#-0.0004168
```



#I.4.2 hypertension (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       hyp_t0 +
                       +physact_t0
                     +edyrs_t0
                     +alcg30d_t0 *SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)

hyp<-calculate_r_squared(Regression_Model)
hyp


#hyp- PQN ph age sex eGFR waistc smoking alcohol PA education
0.5848386-0.584974
```


#I.4.3 metabolisches syndrom (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       metsyn_t0 +
                       +physact_t0
                     +edyrs_t0
                     +alcg30d_t0 *SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)

MetS<-calculate_r_squared(Regression_Model)
MetS



#MetS- PQN ph age sex eGFR waistc smoking alcohol PA education
0.5858343-0.584974
```


#I.4.4 MI (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       t0_chro_20c1 +
                       factor(diabetes_t0)+
                       +physact_t0
                     +edyrs_t0
                     +alcg30d_t0 *SEX_SHIP_T0
                     +csmoking_t0
                     +rcs(gfr_mdrd_t0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat03)

summary(Regression_Model)

MI<-calculate_r_squared(Regression_Model)
MI


#MetS- PQN ph age sex eGFR waistc smoking alcohol PA education
MI-0.584974
```




#I.4.5 CKD (adj. for education, alc, smoking, waist circumference,age, PQN, ph_u, SEX)
```{r}
library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0
                     +physact_t0
                     +edyrs_t0
                     +csmoking_t0
                     +alcg30d_t0 *SEX_SHIP_T0
                     ,
                     na.action = na.exclude, data=mydatat0)

All_phy_noGFR<-calculate_r_squared(Regression_Model)
All_phy_noGFR
0.5834094


mydatat0$gfr_mdrd_t02<-mydatat0$gfr_mdrd_t0
mydatat0$gfr_mdrd_t02[mydatat0$gfr_mdrd_t02<61 ] <- 1
mydatat0$gfr_mdrd_t02[mydatat0$gfr_mdrd_t02>60 ] <- 2

library(rms)
Regression_Model<-lm(ln_meth_abso~ 
                       gfr_mdrd_t02 #Jetzt formatierte Variable CKD
                     +
                       +physact_t0
                     +edyrs_t0
                     +alcg30d_t0 *SEX_SHIP_T0
                     +csmoking_t0
                     #  +rcs(gfr_mdrd_s0,4)
                     +rcs(som_tail,4)
                     +rcs(ln_PQN,4)
                     +ph_u
                     +rcs(AGE_SHIP_T0,4)*SEX_SHIP_T0,
                     na.action = na.exclude, data=mydatat0)

summary(Regression_Model)
CKD<-calculate_r_squared(Regression_Model)
CKD

#CKD- PQN ph age sex waistc smoking alcohol PA education
0.5840056959
0.5840056959- 0.5834094
#0.0011841
```





#Table S1: Descriptive table of the study SHIP-START-0 and SHIP-TREND-0
```{r}

#Mergen: mydata and mydatat0


which(colnames(List.with.metabolitesT)=="metsyn_t0")
gfr_zz_nrT<-List.with.metabolitesT[,c(52,485)]
mydata_t_after_ex2<- merge(gfr_zz_nrT,mydata_t_after_ex, by=c("proband"))
mydata_t_after_ex2$metsyn_t0 <- ifelse(mydata_t_after_ex2$metsyn_t0 %in% c("0 - nein"), 0,
                         ifelse(mydata_t_after_ex2$metsyn_t0 %in% c("1 - ja"), 1, mydata_t_after_ex2$metsyn_t0))
mydata_t_after_ex2$metsyn_t0<-as.numeric(mydata_t_after_ex2$metsyn_t0)

mydatat0$metsyn_t0<-mydata_t_after_ex2$metsyn_t0



mydatat0$t0_chro_20c1 <- mydata_t_after_ex$t0_chro_20c

mydatat0$gfr_mdrd_t02 <- ifelse(mydatat0$gfr_mdrd_t0 < 60, 1, 2)

mydata$gfr_mdrd_s02 <- ifelse(mydata$gfr_mdrd_s0 < 60, 1, 2)
mydata$mi2<-mydata_after_ex$mi
mydata$metsyn_s0<-mydata_after_ex$metsyn_s0





selected_vars <- c("SEX_SHIP_T0", "AGE_SHIP_T0","hdlch","ldlch","som_tail","diabetes_t0","gfr_mdrd_t02","metsyn_t0",
                   "ggt_s","crp_hs_re","rbc","wbc","edyrs_t0","physact_t0","gfr_mdrd_t02","hba1c","tg_s","chol_hdl_t0",
                   "hyp_t0","alcg30d_t0","csmoking_t0","t0_chro_20c1")
new_names <- c("SEX", "AGE_SHIP0", "hdl_s","ldl_s","som_tail","diabetes_s0","gfr_mdrd_s02","metsyn_s0","ggt_s","crp_hs"
               ,"rbc","wbc","edyrs_s0","physact_s0","gfr_mdrd_s0","hba1c","tg_s","chol_hdl_s0","hyp_s0",
               "alcg7d_s0","csmoking_s0","mi2")
mydata$physact_s0
mydatat0$hyp_t0


mydatat0$diabe

mydatat0_selected <- mydatat0[selected_vars]
mydatat0$t0_chro_20c1
colnames(mydatat0_selected) <- new_names


mydata_selected <- mydata[new_names]

mydatat0_selected$neue_spalte <- 2
mydata_selected$neue_spalte <- 1



mydatat0_selected$physact_s0 <- ifelse(mydatat0_selected$physact_s0 == "1 - 1 - Ja", 1, ifelse(mydatat0_selected$physact_s0 == "0 - 0 - Nein", 0, NA))


combined_data <- rbind(mydata_selected, mydatat0_selected)



###############################################################################
#### START calculating differences ####


TREND<- subset(combined_data, neue_spalte=="2")
SHIP <- subset(combined_data, neue_spalte=="1")



#Age (in years)------>  t-test für unabhängige Stichproben 
#normalverteilt
boxplot(combined_data$AGE_SHIP0~combined_data$neue_spalte)
barplot(table(combined_data$AGE_SHIP0))

qqnorm(TREND$AGE_SHIP0)
qqnorm(SHIP$AGE_SHIP0)
qqnorm(combined_data$AGE_SHIP0)

t.test(combined_data$AGE_SHIP0~combined_data$neue_spalte, var.equal=T, con=0.95, alternative="two.sided")
#p-value = 0.6788723
```

#Sex (% of male)
```{r}

#1=männlich
Kreuztabelle<-xtabs(~combined_data$SEX+combined_data$neue_spalte)
Kreuztabelle

chisq.test(combined_data$SEX,combined_data$neue_spalte)

fisher.test(combined_data$neue_spalte,combined_data$SEX,conf.int = T)
fisher.test(combined_data$SEX,combined_data$neue_spalte,conf.int = T)
```


#Waist circumference (cm), som_tail
```{r}
boxplot(combined_data$som_tail~combined_data$neue_spalte)
barplot(table(combined_data$neue_spalte))
qqnorm(SHIP$som_tail)
qqnorm(TREND$som_tail)
t.test(combined_data$som_tail~combined_data$neue_spalte, var.equal=T, con=0.95, alternative="two.sided")
#p-value < 0.00000000000000022204460492503131
```
#Physically active (%)
```{r}
Kreuztabelle<-xtabs(~combined_data$physact_s0+combined_data$neue_spalte)
Kreuztabelle

chisq.test(combined_data$physact_s0,combined_data$neue_spalte)

fisher.test(combined_data$physact_s0,combined_data$neue_spalte,conf.int = T)
```



#smoking
```{r}
Kreuztabelle<-xtabs(~combined_data$csmoking_s0+combined_data$neue_spalte)
Kreuztabelle

fisher.test(combined_data$csmoking_s0,combined_data$neue_spalte,conf.int = T)
```


#Alcohol intake (g/day)
```{r}
combined_data$alcg7d_s0<-as.numeric(combined_data$alcg7d_s0)
TREND$alcg7d_s0<-as.numeric(TREND$alcg7d_s0)
SHIP$alcg7d_s0<-as.numeric(SHIP$alcg7d_s0)

boxplot(combined_data$alcg7d_s0~combined_data$neue_spalte)
barplot(table(combined_data$alcg7d_s0))

qqnorm(TREND$alcg7d_s0)
qqnorm(SHIP$alcg7d_s0)


wilcox.test(combined_data$alcg7d_s0~combined_data$neue_spalte,exact=FALSE, conf.int=TRUE)
```

#Education
```{r}
Kreuztabelle<-xtabs(~combined_data$edyrs_s0+combined_data$neue_spalte)
Kreuztabelle

#fisher.test(combined_data$edyrs_s0,combined_data$neue_spalte,conf.int = T)
chisq.test(combined_data$edyrs_s0,combined_data$neue_spalte)
```
#LDL cholesterol (mg/dL)
```{r}
combined_data$ldl_s<-as.numeric(combined_data$ldl_s)
boxplot(combined_data$ldl_s~combined_data$neue_spalte)
barplot(table(combined_data$ldl_s))


TREND$ldl_s<-as.numeric(TREND$ldl_s)
SHIP$ldl_s<-as.numeric(SHIP$ldl_s)
qqnorm(TREND$ldl_s)
qqnorm(SHIP$ldl_s)

shapiro.test(combined_data$ldl_s)

wilcox.test(combined_data$ldl_s~combined_data$neue_spalte,exact=FALSE, conf.int=TRUE)
```

#HDL cholesterol (mg/dL)
```{r}
combined_data$hdl_s<-as.numeric(combined_data$hdl_s)
boxplot(combined_data$hdl_s~combined_data$neue_spalte)
barplot(table(combined_data$hdl_s))


TREND$hdl_s<-as.numeric(TREND$hdl_s)
SHIP$hdl_s<-as.numeric(SHIP$hdl_s)
qqnorm(TREND$hdl_s)
qqnorm(SHIP$hdl_s)

shapiro.test(combined_data$hdl_s)

wilcox.test(combined_data$hdl_s~combined_data$neue_spalte,exact=FALSE, conf.int=TRUE)
```
#Triglyceride (mg/dL)
```{r}
combined_data$tg_s<-as.numeric(combined_data$tg_s)
boxplot(combined_data$tg_s~combined_data$neue_spalte)
barplot(table(combined_data$tg_s))


TREND$tg_s<-as.numeric(TREND$tg_s)
SHIP$tg_s<-as.numeric(SHIP$tg_s)
qqnorm(TREND$tg_s)
qqnorm(SHIP$tg_s)

shapiro.test(combined_data$tg_s)

wilcox.test(combined_data$tg_s~combined_data$neue_spalte,exact=FALSE, conf.int=TRUE)
```
#RBC (mg/dL)
```{r}
combined_data$rbc<-as.numeric(combined_data$rbc)
boxplot(combined_data$rbc~combined_data$neue_spalte)
barplot(table(combined_data$rbc))


TREND$rbc<-as.numeric(TREND$rbc)
SHIP$rbc<-as.numeric(SHIP$rbc)
qqnorm(TREND$rbc)
qqnorm(SHIP$rbc)

barplot(table(TREND$rbc))
barplot(table(SHIP$rbc))

shapiro.test(combined_data$rbc)

wilcox.test(combined_data$rbc~combined_data$neue_spalte,exact=FALSE, conf.int=TRUE)
```
#hba1c (mg/dL)
```{r}
combined_data$hba1c<-as.numeric(combined_data$hba1c)
boxplot(combined_data$hba1c~combined_data$neue_spalte)
barplot(table(combined_data$hba1c))


TREND$hba1c<-as.numeric(TREND$hba1c)
SHIP$hba1c<-as.numeric(SHIP$hba1c)
qqnorm(TREND$hba1c)
qqnorm(SHIP$hba1c)

barplot(table(TREND$hba1c))
barplot(table(SHIP$hba1c))

shapiro.test(combined_data$hba1c)

wilcox.test(combined_data$hba1c~combined_data$neue_spalte,exact=FALSE, conf.int=TRUE)
```


#ggt (mg/dL)
```{r}
combined_data$ggt_s<-as.numeric(combined_data$ggt_s)
boxplot(combined_data$ggt_s~combined_data$neue_spalte)
barplot(table(combined_data$ggt_s))


TREND$ggt_s<-as.numeric(TREND$ggt_s)
SHIP$ggt_s<-as.numeric(SHIP$ggt_s)
qqnorm(TREND$ggt_s)
qqnorm(SHIP$ggt_s)

barplot(table(TREND$ggt_s))
barplot(table(SHIP$ggt_s))

shapiro.test(combined_data$ggt_s)

wilcox.test(combined_data$ggt_s~combined_data$neue_spalte,exact=FALSE, conf.int=TRUE)
```
#chol_ (mg/dL)
```{r}
combined_data$chol_hdl_s0<-as.numeric(combined_data$chol_hdl_s0)
boxplot(combined_data$chol_hdl_s0~combined_data$neue_spalte)
barplot(table(combined_data$chol_hdl_s0))


TREND$chol_hdl_s0<-as.numeric(TREND$chol_hdl_s0)
SHIP$chol_hdl_s0<-as.numeric(SHIP$chol_hdl_s0)
qqnorm(TREND$chol_hdl_s0)
qqnorm(SHIP$chol_hdl_s0)

barplot(table(TREND$chol_hdl_s0))
barplot(table(SHIP$chol_hdl_s0))

shapiro.test(combined_data$chol_hdl_s0)

wilcox.test(combined_data$chol_hdl_s0~combined_data$neue_spalte,exact=FALSE, conf.int=TRUE)
```
#gfr_ (mg/dL)
```{r}

combined_data$gfr_mdrd_s0<-as.numeric(combined_data$gfr_mdrd_s0)
boxplot(combined_data$gfr_mdrd_s0~combined_data$neue_spalte)
barplot(table(combined_data$gfr_mdrd_s0))


TREND$gfr_mdrd_s0<-as.numeric(TREND$gfr_mdrd_s0)
SHIP$gfr_mdrd_s0<-as.numeric(SHIP$gfr_mdrd_s0)
qqnorm(TREND$gfr_mdrd_s0)
qqnorm(SHIP$gfr_mdrd_s0)

barplot(table(TREND$gfr_mdrd_s0))
barplot(table(SHIP$gfr_mdrd_s0))

shapiro.test(combined_data$gfr_mdrd_s0)

wilcox.test(combined_data$gfr_mdrd_s0~combined_data$neue_spalte,exact=FALSE, conf.int=TRUE)
```


#crp (mg/dL)
```{r}
combined_data$crp_hs<-as.numeric(combined_data$crp_hs)
boxplot(combined_data$crp_hs~combined_data$neue_spalte)
barplot(table(combined_data$crp_hs))


TREND$crp_hs<-as.numeric(TREND$crp_hs)
SHIP$crp_hs<-as.numeric(SHIP$crp_hs)
qqnorm(TREND$crp_hs)
qqnorm(SHIP$crp_hs)

barplot(table(TREND$crp_hs))
barplot(table(SHIP$crp_hs))

shapiro.test(combined_data$crp_hs)

wilcox.test(combined_data$crp_hs~combined_data$neue_spalte,exact=FALSE, conf.int=TRUE)
```
#Diabetes
```{r}
Kreuztabelle<-xtabs(~combined_data$diabetes_s0+combined_data$neue_spalte)
Kreuztabelle

fisher.test(combined_data$diabetes_s0,combined_data$neue_spalte,conf.int = T)
``` 


 
#Hypertension
```{r}
Kreuztabelle<-xtabs(~combined_data$hyp_s0+combined_data$neue_spalte)
Kreuztabelle

fisher.test(combined_data$hyp_s0,combined_data$neue_spalte,conf.int = T)

```


#MetS
```{r}
Kreuztabelle<-xtabs(~combined_data$metsyn_s0+combined_data$neue_spalte)
Kreuztabelle

fisher.test(combined_data$metsyn_s0,combined_data$neue_spalte,conf.int = T)
```

#Mi
```{r}
Kreuztabelle<-xtabs(~combined_data$mi2+combined_data$neue_spalte)
Kreuztabelle

fisher.test(combined_data$mi2,combined_data$neue_spalte,conf.int = T)
```



#CKD
```{r}
Kreuztabelle<-xtabs(~combined_data$gfr_mdrd_s02+combined_data$neue_spalte)
Kreuztabelle

fisher.test(combined_data$gfr_mdrd_s02,combined_data$neue_spalte,conf.int = T)

```






 








 




